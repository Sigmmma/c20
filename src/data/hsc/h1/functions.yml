functions:
  - slug: plus
    info:
      en: |
        ```hsc
        (<real> + <number(s)>)
        (+ 5 6 7 8 9)
        ; returns: 35
        ```
        Returns the sum of all specified expressions.
    tags:
      - math
  - slug: minus
    info:
      en: |
        ```hsc
        (<real> - <number(s)>)
        (- 10 5 1)
        ; returns: 4
        ```
        Returns the first expression subtracted by all following expressions.
    tags:
      - math
  - slug: mult
    info:
      en: |
        ```hsc
        (<real> * <number(s)>)
        (* 5 5)
        ; returns: 25
        (* 5.5 6)
        ; returns: 33
        ```
        Returns the product of all specified expressions.
    tags:
      - math
  - slug: div
    info:
      en: |
        ```hsc
        (<real> / <number> <number>)
        (/ 10 5)
        ; returns: 2
        (/ 2.5 2)
        ; returns: 1.25
        ```
        Returns the quotient of two expressions. The second argument, the
        denominator, must NOT be in the range `-0.0001` to `0.0001` (zero or
        near zero) or an assertion will be thrown.
    tags:
      - math
  - slug: eq
    info:
      en: |
        ```hsc
        (<boolean> = <expression> <expression>)
        (= (hud_get_timer_ticks) 0)
        ```
        Returns true if two expressions are equal.
    tags:
      - comp
  - slug: ne
    info:
      en: |
        ```hsc
        (<boolean> != <expression> <expression>)
        (!= (hud_get_timer_ticks) 0)
        ```
        Returns true if two expressions are not equal.
    tags:
      - comp
  - slug: gt
    info:
      en: |
        ```hsc
        (<boolean> > <number> <number>)
        (> 10 5)
        ; returns: true
        (> 5 10)
        ; returns: false
        ```
        Returns true if the first number is larger than the second.
    tags:
      - comp
  - slug: lt
    info:
      en: |
        ```hsc
        (<boolean> < <number> <number>)
        (> 4 8)
        ; returns: true
        (> 8 4)
        ; returns: false
        ```
        Returns true if the first number is smaller than the second.
    tags:
      - comp
  - slug: ge
    info:
      en: |
        ```hsc
        (<boolean> >= <number> <number>)
        (>= 10 10)
        ; returns: true
        (>= 5 10)
        ; returns: false
        ```
        Returns true if the first number is larger than or equal to the second.
    tags:
      - comp
  - slug: le
    info:
      en: |
        ```hsc
        (<boolean> <= <number> <number>)
        (<= 4 4)
        ; returns: true
        (<= 8 4)
        ; returns: false
        ```
        Returns true if the first number is smaller than or equal to the second.
    tags:
      - comp
  - slug: and
    info:
      en: |
        ```hsc
        (<boolean> and <boolean(s)>)
        (and (player_action_test_action) (= 1 (list_count (players))))
        ```
        Returns true if all specified expressions are true. This function is
        _short circuiting_, meaning it will not evaluate subsequent expressions
        if a a prior one evaluates to `false`.
    tags:
      - logic
  - slug: begin
    info:
      en: |
        ```hsc
        (<passthrough> begin <expression(s)>)
        (begin
          (object_destroy mid_banshee_1)
          (ai_erase mid_banshee/pilot_1)
        )
        ```
        The `begin` expression evaluates a series of expressions in order. It's
        primarily used to wrap a series of expressions into a single expression
        to be used as a `cond` result or one of the branches of an `if` expression.
        It is not necessary to wrap all the top-level expressions within a `script`
        declaration with a `begin`; there is already one implicit. The return
        value of the last expression in the sequence will be returned by `cond`.
    tags:
      - control
  - slug: begin_random
    info:
      en: |
        ```hsc
        (<passthrough> begin_random <expression(s)>)
        (begin_random
          (begin (vehicle_unload fort_cship "cd-passengerl01") (sleep 5))
          (begin (vehicle_unload fort_cship "cd-passengerl02") (sleep 5))
          (begin (vehicle_unload fort_cship "cd-passengerl03") (sleep 5))
        )
        ```
        Like `begin`, but evaluates the sequence of expressions in random order
        and returns the last value evaluated. An example use case is making
        passengers exit a dropship in random order. This function can contain up to
        32 expressions.
    tags:
      - control
  - slug: cond
    info:
      en: |
        ```hsc
        (<passthrough> cond (<boolean1> <result1>) [(<boolean2> <result2>) [...]])
        (cond
          ((game_is_cooperative) (wake fast_setup))
          ((not (= normal (game_difficulty_get))) (wake fast_setup))
          (true (wake tutorial_setup))
        )
        ```
        Tests each branch's condition expression. On the first `true` condition,
        the associated result expression is evaluated and its value returned.
        Has no default value. This is similar to an _if-elseif-elseif..._ chain in
        other languages.
    tags:
      - control
  - slug: if
    info:
      en: |
        ```hsc
        (<passthrough> if <boolean> <then> [<else>])
        (if (game_safe_to_speak)
          (ai_conversation first_arrival)
        )
        (if (game_is_cooperative)
          (begin
            (ai_place area_a_cov/elites)
            (ai_place area_a_cov/jackals)
          )
          (ai_place area_a_cov/grunts)
        )
        ```
        Conditionally evaluates expressions based on a condition. If the condition
        is `true`, the `<then>` branch is evaluated. If the condition is `false`,
        the optional `[<else>]` branch is evaluated instead. If you want to
        execute a series of expressions then you must wrap them with a `begin`.
        This returns the value of the branch expression chosen.
    tags:
      - control
  - slug: inspect
    info:
      en: |
        ```hsc
        (<void> inspect <expression>)
        (inspect (+ 3 4))
        ; outputs: 7
        ```
        Prints the value of an expression to the screen for debugging purposes.
    tags:
      - debug
  - slug: min
    info:
      en: |
        ```hsc
        (<real> min <number(s)>)
        (min 60 5 10)
        ; returns: 5
        ```
        Returns the minimum of all specified expressions.
    tags:
      - math
  - slug: max
    info:
      en: |
        ```hsc
        (<real> max <number(s)>)
        (max 60 5 10)
        ; returns: 60
        ```
        Returns the maximum of all specified expressions.
    tags:
      - math
  - slug: not
    info:
      en: |
        ```hsc
        (<boolean> not <boolean>)
        (not bsl_sucks)
        ; returns: false
        ```
        Returns the opposite of the expression.
    tags:
      - logic
  - slug: or
    info:
      en: |
        ```hsc
        (<boolean> or <boolean(s)>)
        (or (player_action_test_action) true)
        ; returns: true
        ```
        Returns true if any specified expressions are true. This function is
        _short circuiting_, meaning it will not evaluate subsequent expressions
        if a a prior one evaluates to `true`.
    tags:
      - logic
  - slug: set
    info:
      en: |
        ```hsc
        (<passthrough> set <variable name> <expression>)
        (set bsl_sucks true)
        ```
        Sets the value of a defined global variable.
  - slug: sleep
    info:
      en: |
        ```hsc
        (<void> sleep <short> [<script>])
        (sleep (* 30 10)) ; sleep this thread for 10s
        (sleep 30 more_weapons) ; sleep more_weapons for 1s
        (sleep -1) ; sleep indefinitely
        ```
        Pauses execution of this script (or, optionally, another script) for
        the specified number of ticks (1 tick = 1/30 second). You can "park" a
        thread with `(sleep -1)` and it will sleep until another thread wakes
        it or sleeps it with a positive number of ticks.
    tags:
      - control
  - slug: sleep_until
    info:
      en: |
        ```hsc
        (<void> sleep_until <boolean> [short_1] [short_2])
        ; sleeps until less than 3 enemies remain, checking 2x per second:
        (sleep_until (> 3 (ai_living_count first_wave)) 15)
        ```
        Pauses execution of this script until `condition` is true.
        By default, this checks once per second (every 30 ticks), but if `short_1`
        is specified, it checks every `short_1` ticks instead.
        
        By default, this will await the condition indefinitely but `short_2` can
        be used to timeout after a certain number of ticks instead. After the
        timeout, the script will continue on as if `condition` became true.
    tags:
      - control
  - slug: wake
    info:
      en: |
        ```hsc
        (<void> wake <script name>)
        (wake more_weapons)
        ```
        Wakes a sleeping or dormant script in the _next_ update (tick).
    tags:
      - control
  - slug: thread_sleep
    info:
      en: |
        ```hsc
        (<void> thread_sleep <long>)
        (thread_sleep 20)
        ```
        Sleeps the calling thread for the specified number of ms.
    tags:
      - control
  - slug: activate_nav_point_flag
    info:
      en: >-
        ```hsc

        (<void> activate_nav_point_flag <navpoint> <unit> <cutscene_flag> <real>)

        ```

        Activates a nav point type `<string>` attached to (local) player `<unit>`
        anchored to a flag with a vertical offset `<real>`. If the player is not
        local to the machine, this will fail.
  - slug: abs_integer
    info:
      en: |-
        ```hsc
        (<long> abs_integer <long>)
        ```
        return the absolute (non-negative) value of an integer
    context: H1A only
    tags:
      - math
  - slug: abs_real
    info:
      en: |-
        ```hsc
        (<real> abs_real <real>)
        ```
        return the absolute (non-negative) value of a real
    context: H1A only
    tags:
      - math
  - slug: activate_nav_point_object
    info:
      en: >-
        ```hsc

        (<void> activate_nav_point_object <navpoint> <unit> <object> <real>)

        ```

        Activates a nav point type <string> attached to (local) player <unit> anchored
        to an object with a vertical offset <real>. If the player is not local to
        the machine, this will fail.
  - slug: activate_team_nav_point_flag
    info:
      en: >-
        ```hsc

        (<void> activate_team_nav_point_flag <navpoint> <team> <cutscene_flag> <real>)

        ```

        Activates a nav point type <string> attached to a team anchored to a flag
        with a vertical offset <real>. If the player is not local to the machine,
        this will fail.
  - slug: activate_team_nav_point_object
    info:
      en: >-
        ```hsc

        (<void> activate_team_nav_point_object <navpoint> <team> <object> <real>)

        ```

        Activates a nav point type <string> attached to a team anchored to an object
        with a vertical offset <real>. If the player is not local to the machine,
        this will fail.
  - slug: ai
    info:
      en: |-
        ```hsc
        (<void> ai <boolean>)
        ```
        turns all AI on or off.
  - slug: ai_actors
    info:
      en: |-
        ```hsc
        (<object_list> ai_actors <ai>)
        ```
        Converts an ai reference to an object list
  - slug: ai_allegiance
    info:
      en: |-
        ```hsc
        (<void> ai_allegiance <team> <team>)
        ```
        Creates an allegiance between two teams. The engine supports at most
        8 allegiances at a time.
  - slug: ai_allegiance_broken
    info:
      en: >-
        ```hsc

        (<boolean> ai_allegiance_broken <team> <team>)

        ```

        Returns whether two teams have an allegiance that is currently broken by
        traitorous behavior
  - slug: ai_allegiance_remove
    info:
      en: |-
        ```hsc
        (<void> ai_allegiance_remove <team> <team>)
        ```
        Destroys an allegiance between two teams
  - slug: ai_allow_charge
    info:
      en: |-
        ```hsc
        (<void> ai_allow_charge <ai> <boolean>)
        ```
        Either enables or disables charging behavior for a group of actors
  - slug: ai_allow_dormant
    info:
      en: |-
        ```hsc
        (<void> ai_allow_dormant <ai> <boolean>)
        ```
        Either enables or disables automatic dormancy for a group of actors
  - slug: ai_attach
    info:
      en: |-
        ```hsc
        (<void> ai_attach <unit> <ai>)
        ```
        Attaches the specified unit to the specified encounter
  - slug: ai_attach_free
    info:
      en: |-
        ```hsc
        (<void> ai_attach_free <unit> <actor_variant>)
        ```
        Attaches a unit to a newly created free actor of the specified type
  - slug: ai_attack
    info:
      en: |-
        ```hsc
        (<void> ai_attack <ai>)
        ```
        Makes the specified platoon(s) go into the attacking state
  - slug: ai_automatic_migration_target
    info:
      en: |-
        ```hsc
        (<void> ai_automatic_migration_target <ai> <boolean>)
        ```
        Enables or disables a squad as being an automatic migration target
  - slug: ai_berserk
    info:
      en: |-
        ```hsc
        (<void> ai_berserk <ai> <boolean>)
        ```
        Forces a group of actors to start or stop berserking
  - slug: ai_braindead
    info:
      en: >-
        ```hsc

        (<void> ai_braindead <ai> <boolean>)

        ```

        Makes a group of actors braindead, or restores them to life (in their initial
        state)
  - slug: ai_braindead_by_unit
    info:
      en: >-
        ```hsc

        (<void> ai_braindead_by_unit <object_list> <boolean>)

        ```

        Makes a list of objects braindead, or restores them to life. If you pass
        in a vehicle index, it makes all actors in that vehicle braindead (including
        any built-in guns).
  - slug: ai_command_list
    info:
      en: |-
        ```hsc
        (<void> ai_command_list <ai> <ai_command_list>)
        ```
        Tells a group of actors to begin executing the specified command list
  - slug: ai_command_list_advance
    info:
      en: >-
        ```hsc

        (<void> ai_command_list_advance <ai>)

        ```

        Tells a group of actors that are running a command list that they may advance
        further along the list (if they are waiting for a stimulus)
  - slug: ai_command_list_advance_by_unit
    info:
      en: |-
        ```hsc
        (<void> ai_command_list_advance_by_unit <unit>)
        ```
        Just like ai_command_list_advance but operates upon a unit instead
  - slug: ai_command_list_by_unit
    info:
      en: |-
        ```hsc
        (<void> ai_command_list_by_unit <unit> <ai_command_list>)
        ```
        Tells a named unit to begin executing the specified command list
  - slug: ai_command_list_status
    info:
      en: >-
        ```hsc

        (<short> ai_command_list_status <object_list>)

        ```

        Gets the status of a number of units running command lists: 0 = none, 1
        = finished command list, 2 = waiting for stimulus, 3 = running command list
  - slug: ai_conversation
    info:
      en: >-
        ```hsc

        (<boolean> ai_conversation <conversation>)

        ```

        Tries to add an entry to the list of conversations waiting to play. Returns
        FALSE if the required units could not be found to play the conversation,
        or if the player is too far away and the 'delay' flag is not set.
  - slug: ai_conversation_advance
    info:
      en: |-
        ```hsc
        (<void> ai_conversation_advance <conversation>)
        ```
        Tells a conversation that it may advance
  - slug: ai_conversation_line
    info:
      en: >-
        ```hsc

        (<short> ai_conversation_line <conversation>)

        ```

        Returns which line the conversation is currently playing, or 999 if the
        conversation is not currently playing.
  - slug: ai_conversation_status
    info:
      en: >-
        ```hsc

        (<short> ai_conversation_status <conversation>)

        ```

        Returns the status of a conversation (0=none, 1=trying to begin, 2=waiting
        for guys to get in position, 3=playing, 4=waiting to advance, 5=could not
        begin, 6=finished successfully, 7=aborted midway)
  - slug: ai_conversation_stop
    info:
      en: |-
        ```hsc
        (<void> ai_conversation_stop <conversation>)
        ```
        Stops a conversation from playing or trying to play
  - slug: ai_debug_communication_focus
    info:
      en: |-
        ```hsc
        (<void> ai_debug_communication_focus <string(s)>)
        ```
        Focuses (or stops focusing) a set of unit vocalization types
  - slug: ai_debug_communication_ignore
    info:
      en: >-
        ```hsc

        (<void> ai_debug_communication_ignore <string(s)>)

        ```

        Ignores (or stops ignoring) a set of AI communication types when printing
        out communications
  - slug: ai_debug_communication_suppress
    info:
      en: |-
        ```hsc
        (<void> ai_debug_communication_suppress <string(s)>)
        ```
        Suppresses (or stops suppressing) a set of AI communication types
  - slug: ai_debug_sound_point_set
    info:
      en: |-
        ```hsc
        (ai_debug_sound_point_set)

        ```
        Drops the AI debugging sound point at the camera location
    context: Test builds only
  - slug: ai_debug_speak
    info:
      en: |-
        ```hsc
        (ai_debug_speak <string>)
        (ai_debug_speak "pain minor")
        ```
        Makes the currently selected AI speak a vocalization
    context: Test builds only
  - slug: ai_debug_speak_list
    info:
      en: |-
        ```hsc
        (ai_debug_speak_list <string>)
        (ai_debug_speak_list "involuntary")
        ```
        Makes the currently selected AI speak a list of vocalizations
    context: Test builds only
  - slug: ai_debug_teleport_to
    info:
      en: |-
        ```hsc
        (ai_debug_teleport_to <ai>)
        ```
        Teleports all players to the specified encounter
    context: Test builds only
  - slug: ai_debug_vocalize
    info:
      en: |-
        ```hsc
        (ai_debug_vocalize <string> <string>)
        ```
        Makes the selected AI vocalize
    context: Test builds only
  - slug: ai_defend
    info:
      en: |-
        ```hsc
        (<void> ai_defend <ai>)
        ```
        Makes the specified platoon(s) go into the defending state
  - slug: ai_deselect
    info:
      en: |-
        ```hsc
        (ai_deselect)

        ```
        Clears the selected encounter
    context: Test builds only
  - slug: ai_detach
    info:
      en: |-
        ```hsc
        (<void> ai_detach <unit>)
        ```
        Detaches the specified unit from all AI
  - slug: ai_dialogue_triggers
    info:
      en: |-
        ```hsc
        (<void> ai_dialogue_triggers <boolean>)
        (ai_dialogue_triggers true)
        (ai_dialogue_triggers false)
        ```
        Turns impromptu [dialogue](~h1/tags/dialogue) on or off. When off,
        units will still play some sounds (like when they take damage) but will
        not speak when exiting vehicles, seeing friends die, etc.
    tags:
      - dialogue
  - slug: ai_disregard
    info:
      en: >-
        ```hsc

        (<void> ai_disregard <object_list> <boolean>)

        (ai_disregard (players) true)

        (ai_disregard (players) false)

        ```

        If true, forces all actors to completely disregard the specified units,
        otherwise lets them acknowledge the units again.
  - slug: ai_erase
    info:
      en: |-
        ```hsc
        (<void> ai_erase <ai>)
        ```
        Erases the specified encounter and/or squad
  - slug: ai_erase_all
    info:
      en: |-
        ```hsc
        (<void> ai_erase_all)
        ```
        Erases all AI
  - slug: ai_exit_vehicle
    info:
      en: |-
        ```hsc
        (<void> ai_exit_vehicle <ai>)
        ```
        Tells a group of actors to get out of any vehicles that they are in
  - slug: ai_follow_distance
    info:
      en: >-
        ```hsc

        (<void> ai_follow_distance <ai> <real>)

        ```

        Sets the distance threshold which will cause squads to migrate when following
        someone
  - slug: ai_follow_target_ai
    info:
      en: >-
        ```hsc

        (<void> ai_follow_target_ai <ai> <ai>)

        ```

        Sets the follow target for an encounter to be a group of AI (encounter,
        squad or platoon)
  - slug: ai_follow_target_disable
    info:
      en: |-
        ```hsc
        (<void> ai_follow_target_disable <ai>)
        ```
        Turns off following for an encounter
  - slug: ai_follow_target_players
    info:
      en: |-
        ```hsc
        (<void> ai_follow_target_players <ai>)
        ```
        Sets the follow target for an encounter to be the closest player. AI
        follow their target by [moving to firing positions](~ai#firing-positions)
        near their target with the same letter label. Note that the AI may need
        to be migrated to follow the player through multiple sets of firing positions.
  - slug: ai_follow_target_unit
    info:
      en: |-
        ```hsc
        (<void> ai_follow_target_unit <ai> <unit>)
        ```
        Sets the follow target for an encounter to be a specific [unit](~).
  - slug: ai_force_active
    info:
      en: >-
        ```hsc

        (<void> ai_force_active <ai> <boolean>)

        ```

        Forces an encounter to remain active (i.e. not freeze in place) even if
        there are no players nearby
  - slug: ai_force_active_by_unit
    info:
      en: >-
        ```hsc

        (<void> ai_force_active_by_unit <unit> <boolean>)

        ```

        Forces a named actor that is NOT in an encounter to remain active (i.e.
        not freeze in place) even if there are no players nearby
  - slug: ai_free
    info:
      en: |-
        ```hsc
        (<void> ai_free <ai>)
        ```
        Removes a group of actors from their encounter and sets them free
  - slug: ai_free_units
    info:
      en: >-
        ```hsc

        (<void> ai_free_units <object_list>)

        ```

        Removes a set of units from their encounter (if any) and sets them free
  - slug: ai_go_to_vehicle
    info:
      en: |-
        ```hsc
        (<void> ai_go_to_vehicle <ai> <unit> <string>)
        ```
        Tells a group of actors to get into a vehicle, in the substring-specified
        seats (e.g. passenger for pelican). Does not interrupt any actors who are
        already going to vehicles.

        You can test if a vehicle is flipped by calling this function, then
        in the same tick testing `ai_going_to_vehicle`. If it returns `0` it
        means the vehicle is flipped.
  - slug: ai_go_to_vehicle_override
    info:
      en: >-
        ```hsc

        (<void> ai_go_to_vehicle_override <ai> <unit> <string>)

        ```

        Tells a group of actors to get into a vehicle, in the substring-specified
        seats (e.g. passenger for pelican). Any actors who are already going to
        vehicles will stop and go to this one instead!
  - slug: ai_going_to_vehicle
    info:
      en: >-
        ```hsc

        (<short> ai_going_to_vehicle <unit>)

        ```

        Return the number of actors that are still trying to get into the specified
        vehicle
  - slug: ai_grenades
    info:
      en: |-
        ```hsc
        (<void> ai_grenades <boolean>)
        ```
        Turns grenade inventory on or off
  - slug: ai_is_attacking
    info:
      en: >-
        ```hsc

        (<boolean> ai_is_attacking <ai>)

        ```

        Returns whether a platoon is in the attacking mode (or if an encounter is
        specified, returns whether any platoon in that encounter is attacking)
  - slug: ai_kill
    info:
      en: |-
        ```hsc
        (<void> ai_kill <ai>)
        ```
        Instantly kills the specified encounter and/or squad
  - slug: ai_kill_silent
    info:
      en: >-
        ```hsc

        (<void> ai_kill_silent <ai>)

        ```

        Instantly and silently (no animation or sound played) kills the specified
        encounter and/or squad
  - slug: ai_lines
    info:
      en: |-
        ```hsc
        (ai_lines)
        ```
        Cycles through AI line-spray modes
    context: Test builds only
  - slug: ai_link_activation
    info:
      en: >-
        ```hsc

        (<void> ai_link_activation <ai> <ai>)

        ```

        Links the first encounter so that it will be made active whenever it detects
        that the second encounter is active
  - slug: ai_living_count
    info:
      en: >-
        ```hsc

        (<short> ai_living_count <ai>)

        ```

        Return the number of living actors in the specified encounter and/or squad
  - slug: ai_living_fraction
    info:
      en: >-
        ```hsc

        (<real> ai_living_fraction <ai>)

        ```

        Return the fraction `[0-1]` of living actors in the specified encounter
        and/or squad
  - slug: ai_look_at_object
    info:
      en: |-
        ```hsc
        (<void> ai_look_at_object <unit> <object>)
        ```
        Tells an actor to look at an object until further notice
  - slug: ai_magically_see_encounter
    info:
      en: |-
        ```hsc
        (<void> ai_magically_see_encounter <ai> <ai>)
        ```
        Makes one encounter magically aware of another
  - slug: ai_magically_see_players
    info:
      en: |-
        ```hsc
        (<void> ai_magically_see_players <ai>)
        ```
        Makes an encounter magically aware of nearby players
  - slug: ai_magically_see_unit
    info:
      en: |-
        ```hsc
        (<void> ai_magically_see_unit <ai> <unit>)
        ```
        Makes an encounter magically aware of the specified unit
  - slug: ai_maneuver
    info:
      en: >-
        ```hsc

        (<void> ai_maneuver <ai>)

        ```

        Makes all squads in the specified platoon(s) maneuver to their designated
        maneuver squads
  - slug: ai_maneuver_enable
    info:
      en: >-
        ```hsc

        (<void> ai_maneuver_enable <ai> <boolean>)

        ```

        Enables or disables the maneuver/retreat rule for an encounter or platoon.
        The rule will still trigger, but none of the actors will be given the order
        to change squads.
  - slug: ai_migrate
    info:
      en: |-
        ```hsc
        (<void> ai_migrate <ai> <ai>)
        ```
        Makes all or part of an encounter move to another encounter
  - slug: ai_migrate_and_speak
    info:
      en: >-
        ```hsc

        (<void> ai_migrate_and_speak <ai> <ai> <string>)

        ```

        Makes all or part of an encounter move to another encounter, and say their
        `advance` or `retreat` speech lines.
  - slug: ai_migrate_by_unit
    info:
      en: |-
        ```hsc
        (<void> ai_migrate_by_unit <object_list> <ai>)
        ```
        Makes a named vehicle or group of units move to another encounter
  - slug: ai_nonswarm_count
    info:
      en: >-
        ```hsc

        (<short> ai_nonswarm_count <ai>)

        ```

        Return the number of non-swarm actors in the specified encounter and/or
        squad
  - slug: ai_place
    info:
      en: |-
        ```hsc
        (<void> ai_place <ai>)
        ```
        Places the specified encounter on the map
  - slug: ai_playfight
    info:
      en: |-
        ```hsc
        (<void> ai_playfight <ai> <boolean>)
        ```
        Sets an encounter to be playfighting or not
  - slug: ai_prefer_target
    info:
      en: >-
        ```hsc

        (<void> ai_prefer_target <object_list> <boolean>)

        ```

        If true, *ALL* enemies will prefer to attack the specified units. If false,
        removes the preference.
  - slug: ai_reconnect
    info:
      en: >-
        ```hsc

        (<void> ai_reconnect)

        ```

        Reconnects all AI information to the current structure bsp (use this after
        you create encounters or command lists in sapien, or place new firing points
        or command list points)
  - slug: ai_renew
    info:
      en: >-
        ```hsc

        (<void> ai_renew <ai>)

        ```

        Refreshes the health and grenade count of a group of actors, so they are
        as good as new
  - slug: ai_retreat
    info:
      en: >-
        ```hsc

        (<void> ai_retreat <ai>)

        ```

        Makes all squads in the specified platoon(s) maneuver to their designated
        maneuver squads
  - slug: ai_select
    info:
      en: |-
        ```hsc
        (<void> ai_select <ai>)
        ```
        Selects the specified AI for use with AI debug functions like `ai_debug_speak`.
  - slug: ai_set_blind
    info:
      en: |-
        ```hsc
        (<void> ai_set_blind <ai> <boolean>)
        ```
        Enables or disables sight for actors in the specified encounter
  - slug: ai_set_current_state
    info:
      en: >-
        ```hsc

        (<void> ai_set_current_state <ai> <ai_default_state>)

        ```

        Sets the current state of a group of actors. WARNING: may have unpredictable
        results on actors that are in combat.
  - slug: ai_set_deaf
    info:
      en: |-
        ```hsc
        (<void> ai_set_deaf <ai> <boolean>)
        ```
        Enables or disables hearing for actors in the specified encounter
  - slug: ai_set_respawn
    info:
      en: |-
        ```hsc
        (<void> ai_set_respawn <ai> <boolean>)
        ```
        Enables or disables respawning in the specified encounter
  - slug: ai_set_return_state
    info:
      en: >-
        ```hsc

        (<void> ai_set_return_state <ai> <ai_default_state>)

        ```

        Sets the state that a group of actors will return to when they have nothing
        to do
  - slug: ai_set_team
    info:
      en: |-
        ```hsc
        (<void> ai_set_team <ai> <team>)
        ```
        Makes an encounter change to a new team
  - slug: ai_spawn_actor
    info:
      en: |-
        ```hsc
        (<void> ai_spawn_actor <ai>)
        ```
        Spawns a single actor in the specified encounter and/or squad
  - slug: ai_status
    info:
      en: >-
        ```hsc

        (<short> ai_status <ai>)

        ```

        Returns the most severe combat status of a group of actors (0=inactive,
        1=noncombat, 2=guarding, 3=search/suspicious, 4=definite enemy(heard or
        magic awareness), 5=visible enemy, 6=engaging in combat)
  - slug: ai_stop_looking
    info:
      en: |-
        ```hsc
        (<void> ai_stop_looking <unit>)
        ```
        Tells an actor to stop looking at whatever it's looking at
  - slug: ai_strength
    info:
      en: >-
        ```hsc

        (<real> ai_strength <ai>)

        ```

        Return the current strength (average body vitality from 0-1) of the specified
        encounter and/or squad
  - slug: ai_swarm_count
    info:
      en: >-
        ```hsc

        (<short> ai_swarm_count <ai>)

        ```

        Return the number of swarm actors in the specified encounter and/or squad
  - slug: ai_teleport_to_starting_location
    info:
      en: >-
        ```hsc

        (<void> ai_teleport_to_starting_location <ai>)

        ```

        Teleports a group of actors to the starting locations of their current squad(s)
  - slug: ai_teleport_to_starting_location_if_unsupported
    info:
      en: >-
        ```hsc

        (<void> ai_teleport_to_starting_location_if_unsupported <ai>)

        ```

        Teleports a group of actors to the starting locations of their current squad(s),
        only if they are not supported by solid ground (i.e. if they are falling
        after switching BSPs).
  - slug: ai_timer_expire
    info:
      en: |-
        ```hsc
        (<void> ai_timer_expire <ai>)
        ```
        makes a squad's delay timer expire and releases them to enter combat.
  - slug: ai_timer_start
    info:
      en: |-
        ```hsc
        (<void> ai_timer_start <ai>)
        ```
        makes a squad's delay timer start counting.
  - slug: ai_try_to_fight
    info:
      en: >-
        ```hsc

        (<void> ai_try_to_fight <ai> <ai>)

        ```

        Causes a group of actors to preferentially target another group of actors
  - slug: ai_try_to_fight_nothing
    info:
      en: |-
        ```hsc
        (<void> ai_try_to_fight_nothing <ai>)
        ```
        Removes the preferential target setting from a group of actors
  - slug: ai_try_to_fight_player
    info:
      en: |-
        ```hsc
        (<void> ai_try_to_fight_player <ai>)
        ```
        Causes a group of actors to preferentially target the player
  - slug: ai_vehicle_encounter
    info:
      en: >-
        ```hsc

        (<void> ai_vehicle_encounter <unit> <ai>)

        ```

        Sets a vehicle to "belong" to a particular encounter/squad. Any actors who
        get into the vehicle will be placed in this squad. Vehicles potentially
        drivable by multiple teams need their own encounter!
  - slug: ai_vehicle_enterable_actor_type
    info:
      en: >-
        ```hsc

        (<void> ai_vehicle_enterable_actor_type <unit> <actor_type>)

        ```

        Sets a vehicle as being impulsively enterable for actors of a certain type
        (grunt, elite, marine etc)
  - slug: ai_vehicle_enterable_actors
    info:
      en: >-
        ```hsc

        (<void> ai_vehicle_enterable_actors <unit> <ai>)

        ```

        Sets a vehicle as being impulsively enterable for a certain encounter/squad
        of actors
  - slug: ai_vehicle_enterable_disable
    info:
      en: >-
        ```hsc

        (<void> ai_vehicle_enterable_disable <unit>)

        ```

        Disables actors from impulsively getting into a vehicle (this is the default
        state for newly placed vehicles)
  - slug: ai_vehicle_enterable_distance
    info:
      en: >-
        ```hsc

        (<void> ai_vehicle_enterable_distance <unit> <real>)

        ```

        Sets a vehicle as being impulsively enterable for actors within a certain
        distance
  - slug: ai_vehicle_enterable_team
    info:
      en: >-
        ```hsc

        (<void> ai_vehicle_enterable_team <unit> <team>)

        ```

        Sets a vehicle as being impulsively enterable for actors on a certain team
  - slug: attract_mode_start
    info:
      en: |-
        ```hsc
        (attract_mode_start)
        ```
        On Xbox, this would trigger the ["attract" videos](https://www.youtube.com/watch?v=l0cPgrGfRC4)
        to play when the main menu is left idle. Not applicable to PC.
    context: Gearbox only
  - slug: bind
    info:
      en: |-
        ```hsc
        (<void> bind <string> <string> <string>)
        ```
        Binds an input device/button combination to a game control
  - slug: bit_test
    info:
      en: |-
        ```hsc
        (<long> bit_test <long> <short>)
        (bit_test 2 1) ;1
        (bit_test 2 0) ;0
        ```
        Returns `1` or `0` for the bit at the given position.
    context: H1A only
    tags:
      - logic
      - comp
  - slug: bit_toggle
    info:
      en: |-
        ```hsc
        (<long> bit_toggle <long> <short> <boolean>)
        (bit_toggle 0 2 true) ;4 (0000 => 0100)
        (bit_toggle 7 0 false) ;6 (0111 => 0110)
        ```
        Sets the value's bit at the given position on or off.
    context: H1A only
    tags:
      - logic
  - slug: bitwise_and
    info:
      en: |-
        ```hsc
        (<long> bitwise_and <long> <long>)
        (bitwise_and 6 3) ;2 (0110 & 0011 = 0010)
        ```
        Returns the [bitwise AND](https://en.wikipedia.org/wiki/Bitwise_operation#AND)
        of two numbers. If a bit is `1` in both of the inputs, it is `1` in the
        output and otherwise `0`.
    context: H1A only
    tags:
      - logic
  - slug: bitwise_flags_toggle
    info:
      en: |-
        ```hsc
        (<long> bitwise_flags_toggle <long> <long> <boolean>)
        (bitwise_flags_toggle 13 3 true) ;15 (1101 => 1111)
        (bitwise_flags_toggle 13 3 false) ;12 (1101 => 1100)
        ```
        Uses the second argument as a mask to toggle bits on or off in the
        first argument.
    context: H1A only
    tags:
      - logic
  - slug: bitwise_left_shift
    info:
      en: |-
        ```hsc
        (<long> bitwise_left_shift <long> <short>)
        (bitwise_left_shift 1 4) ;16 (00001 << 4 = 10000)
        (bitwise_left_shift 5 1) ;10 (00101 << 1 = 01010)
        ```
        Performs a [bitwise left shift](https://en.wikipedia.org/wiki/Bitwise_operation#Logical_shift)
        of a value by the given bit count. All bits are moved to the left by a
        number of positions, with the rightmost bits filling with 0's.
        Returns `0` if the positions argument is negative. This has the effect
        of multiplying the argument by a power of 2.
    context: H1A only
    tags:
      - logic
  - slug: bitwise_or
    info:
      en: |-
        ```hsc
        (<long> bitwise_or <long> <long>)
        (bitwise_or 6 3) ;7 (0110 | 0011 = 0111)
        ```
        Returns the [bitwise OR](https://en.wikipedia.org/wiki/Bitwise_operation#OR)
        of two numbers. If a bit is `1` in either or both of the inputs, it is
        `1` in the output and otherwise `0`.
    context: H1A only
    tags:
      - logic
  - slug: bitwise_right_shift
    info:
      en: |-
        ```hsc
        (<long> bitwise_right_shift <long> <short>)
        (bitwise_right_shift 13 2) ;3 (1101 >> 2 = 0011)
        (bitwise_right_shift -1 1) ;2147483647
        ```
        Performs an [unsigned right shift](https://en.wikipedia.org/wiki/Bitwise_operation#Logical_shift)
        (also called logical or zero filling shift) of a value by the given bit count.
        All bits are moved to the right by a number of positions, with the leftmost
        bits filling with 0's. Returns `0` if the positions argument is negative.
    context: H1A only
    tags:
      - logic
  - slug: bitwise_xor
    info:
      en: |-
        ```hsc
        (<long> bitwise_xor <long> <long>)
        (bitwise_xor 5 5) ;0 (0101 ^ 0101 = 0000)
        (bitwise_xor 12 15) ;3 (1100 ^ 1111 = 0011)
        ```
        Returns the [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR)
        (exclusive or) of two numbers. If a bit differs in both inputs, it is
        `1` in the output and otherwise `0`. In other words, one or the other
        bit must be `1` but not both.
    context: H1A only
    tags:
      - logic
  - slug: breadcrumbs_nav_points_active
    info:
      en: |-
        ```hsc
        (<boolean> breadcrumbs_nav_points_active)
        ```
        Returns true if breadcrumbs improved nav points are enabled.
    tags:
      - added_in_mcc
  - slug: breakable_surfaces_enable
    info:
      en: |-
        ```hsc
        (<void> breakable_surfaces_enable <boolean>)
        (breakable_surfaces_enable false)
        ```
        Enables or disables breakability of all [breakable surfaces](~scenario_structure_bsp#tag-field-breakable-surfaces)
        in the level
  - slug: breakable_surfaces_reset
    info:
      en: |-
        ```hsc
        (<void> breakable_surfaces_reset)
        ```
        Restores all breakable surfaces
  - slug: camera_control
    info:
      en: |-
        ```hsc
        (<void> camera_control <boolean>)
        (camera_control true)
        (camera_control false)
        ```
        Toggles script control of the camera
  - slug: camera_set
    info:
      en: >-
        ```hsc

        (<void> camera_set <cutscene_camera_point> <short>)

        (camera_set somewhere_point 100)

        ```

        Moves the camera to the specified camera point over the specified number
        of ticks
  - slug: camera_set_animation
    info:
      en: |-
        ```hsc
        (<void> camera_set_animation <animation_graph> <string>)
        ```
        Begins a prerecorded camera animation
  - slug: camera_set_dead
    info:
      en: |-
        ```hsc
        (<void> camera_set_dead <unit>)
        (camera_set_dead (player0))
        ```
        Makes the scripted camera zoom out around a unit as if it were dead
  - slug: camera_set_first_person
    info:
      en: |-
        ```hsc
        (<void> camera_set_first_person <unit>)
        (camera_set_first_person (player0))
        ```
        Makes the scripted camera follow a unit
  - slug: camera_set_relative
    info:
      en: >-
        ```hsc

        (<void> camera_set_relative <cutscene_camera_point> <short> <object>)

        (camera_set_relative somewhere_point 200 warthog_mp_1)

        ```

        Moves the camera to the specified camera point over the specified number
        of ticks (position is relative to the specified object)
  - slug: camera_time
    info:
      en: >-
        ```hsc

        (<short> camera_time)

        ```

        Returns the number of ticks remaining in the current camera interpolation
  - slug: change_team
    info:
      en: |-
        ```hsc
        (<void> change_team <short>)
        (change_team 0)
        ; changes you to red
        (change_team 1)
        ; changes you to blue
        (change_team 2)
        ; auto balance
        ```
        Change your team (0=red, 1=blue, else=auto). Removed in H1A.
  - slug: cheat_active_camouflage
    info:
      en: |-
        ```hsc
        (<void> cheat_active_camouflage)
        ```
        Gives the player active camouflage
  - slug: cheat_active_camouflage_local_player
    info:
      en: |-
        ```hsc
        (<void> cheat_active_camouflage_local_player <short>)
        (cheat_active_camouflage_local_player 1)
        ```
        Gives the player active camouflage
  - slug: cheat_all_powerups
    tags:
      - globals
    info:
      en: |-
        ```hsc
        (<void> cheat_all_powerups)
        ```
        Drops all powerups near player. The set of powerups is controlled by
        the [globals tag](~globals#tag-field-cheat-powerups).
  - slug: cheat_all_vehicles
    info:
      en: |-
        ```hsc
        (<void> cheat_all_vehicles)
        ```
        Drops all vehicles on player
  - slug: cheat_all_weapons
    info:
      en: |-
        ```hsc
        (<void> cheat_all_weapons)
        ```
        Drops all weapons near player
  - slug: cheat_spawn_warthog
    info:
      en: |-
        ```hsc
        (<void> cheat_spawn_warthog)
        ```
        Drops a warthog near player
  - slug: cheat_teleport_to_camera
    info:
      en: |-
        ```hsc
        (<void> cheat_teleport_to_camera)
        ```
        Teleports player to camera location
  - slug: cheats_load
    info:
      en: |-
        ```hsc
        (<void> cheats_load)
        ```
        Reloads the cheats.txt file
  - slug: checkpoint_load
    info:
      en: |-
        ```hsc
        (<void> checkpoint_load <string>)
        ```
        Load a saved checkpoint
  - slug: checkpoint_save
    info:
      en: |-
        ```hsc
        (checkpoint_save)

        ```
        Save last solo checkpoint
  - slug: cinematic_abort
    info:
      en: |-
        ```hsc
        (<void> cinematic_abort)
        ```
        Aborts a cinematic
  - slug: cinematic_screen_effect_set_convolution
    info:
      en: >-
        ```hsc

        (<void> cinematic_screen_effect_set_convolution <short> <short> <real> <real>
        <real>)

        ```

        Sets the convolution effect
  - slug: cinematic_screen_effect_set_filter
    info:
      en: >-
        ```hsc

        (<void> cinematic_screen_effect_set_filter <real> <real> <real> <real> <boolean>
        <real>)

        ```

        Sets the filter effect
  - slug: cinematic_screen_effect_set_filter_desaturation_tint
    info:
      en: >-
        ```hsc

        (<void> cinematic_screen_effect_set_filter_desaturation_tint <real> <real>
        <real>)

        ```

        Sets the desaturation filter tint color
  - slug: cinematic_screen_effect_set_video
    info:
      en: >-
        ```hsc

        (<void> cinematic_screen_effect_set_video <short> <real>)

        ```

        Sets the video effect: `<noise intensity[0,1]>`, `<overbright: 0=none, 1=2x,
        2=4x>`
  - slug: cinematic_screen_effect_start
    info:
      en: |-
        ```hsc
        (<void> cinematic_screen_effect_start <boolean>)
        ```
        Starts screen effect; pass true to clear
  - slug: cinematic_screen_effect_stop
    info:
      en: |-
        ```hsc
        (<void> cinematic_screen_effect_stop)
        ```
        Returns control of the screen effects to the rest of the game
  - slug: cinematic_set_near_clip_distance
    info:
      en: |
        ```hsc
        (<void> cinematic_set_near_clip_distance <real>)
        ```
  - slug: cinematic_set_title
    info:
      en: |-
        ```hsc
        (<void> cinematic_set_title <cutscene_title>)
        ```
        Activates the chapter title
  - slug: cinematic_set_title_delayed
    info:
      en: |-
        ```hsc
        (<void> cinematic_set_title_delayed <cutscene_title> <real>)
        ```
        Activates the chapter title, delayed by <real> seconds
  - slug: cinematic_show_letterbox
    info:
      en: |-
        ```hsc
        (<void> cinematic_show_letterbox <boolean>)
        (cinematic_show_letterbox true)
        (cinematic_show_letterbox false)
        ```
        Sets or removes the letterbox bars
  - slug: cinematic_skip_start_internal
    info:
      en: |
        ```hsc
        (<void> cinematic_skip_start_internal)
        ```
  - slug: cinematic_skip_stop_internal
    info:
      en: |
        ```hsc
        (<void> cinematic_skip_stop_internal)
        ```
  - slug: cinematic_start
    info:
      en: |-
        ```hsc
        (<void> cinematic_start)
        ```
        Initializes game to start a cinematic (interruptive) cutscene
  - slug: cinematic_stop
    info:
      en: |-
        ```hsc
        (<void> cinematic_stop)
        ```
        Initializes the game to end a cinematic (interruptive) cutscene
  - slug: cinematic_suppress_bsp_object_creation
    info:
      en: >-
        ```hsc

        (<void> cinematic_suppress_bsp_object_creation <boolean>)

        (cinematic_suppress_bsp_object_creation true)

        (cinematic_suppress_bsp_object_creation false)

        ```

        Suppresses or enables the automatic creation of objects during cutscenes
        due to a bsp switch
  - slug: cls
    info:
      en: |-
        ```hsc
        (<void> cls)
        ```
        Clears console output and tab completions from the screen.
  - slug: config_one_control
    info:
      en: |-
        ```hsc
        (config_one_control <string>)
        ```
        Test function to configure a single control
    context: Gearbox only
  - slug: connect
    info:
      en: |-
        ```hsc
        (connect <string> <string>)
        ```
        Attempt to connect to server - use ip:port password as parameters
    context: Gearbox only
  - slug: core_load
    info:
      en: |-
        ```hsc
        (<void> core_load)
        ```
        Loads debug [game state](~) from `core\core.bin`.
  - slug: core_load_at_startup
    info:
      en: |-
        ```hsc
        (<void> core_load_at_startup)
        ```
        Loads debug [game state](~) from `core\core.bin` as soon as the map is initialized.
  - slug: core_load_name
    info:
      en: |-
        ```hsc
        (<void> core_load_name <string>)
        ```
        Loads debug [game state](~) from `core\<path>`.
  - slug: core_load_name_at_startup
    info:
      en: |-
        ```hsc
        (<void> core_load_name_at_startup <string>)
        ```
        Loads debug [game state](~) from `core\<path>` as soon as the map is initialized.
  - slug: core_save
    info:
      en: |-
        ```hsc
        (<void> core_save)
        ```
        Saves debug [game state](~) to `core\core.bin`.
  - slug: core_save_name
    info:
      en: |-
        ```hsc
        (<boolean> core_save_name <string>)
        ```
        Saves debug [game state](~) to `core\<path>` in pre-H1A versions of the game.
        In H1A this function was hijacked for campaign segments.
  - slug: crash
    info:
      en: |-
        ```hsc
        (<void> crash <string>)
        (crash "Something is wrong")
        ```
        Crashes (for debugging)
  - slug: custom_animation
    info:
      en: >-
        ```hsc

        (<boolean> custom_animation <unit> <animation_graph> <string> <boolean>)

        ```

        Starts a custom animation playing on a unit (interpolates into animation
        if last parameter is true)
  - slug: custom_animation_list
    info:
      en: >-
        ```hsc

        (<boolean> custom_animation_list <object_list> <animation_graph> <string>
        <boolean>)

        ```

        Starts a custom animation playing on a unit list (interpolates into animation
        if last parameter is true)
  - slug: damage_new
    info:
      en: |-
        ```hsc
        (<void> damage_new <damage> <cutscene_flag>)
        (damage_new "scenery\emitters\burning_flame\flame" enter_lava_flag)
        ```
        Causes the specified damage at the specified flag
  - slug: damage_object
    info:
      en: |-
        ```hsc
        (<void> damage_object <damage> <object>)
        (damage_object "weapons\assault rifle\bullet" (player0))
        ```
        Causes the specified damage at the specified object
  - slug: deactivate_nav_point_flag
    info:
      en: >-
        ```hsc

        (<void> deactivate_nav_point_flag <unit> <cutscene_flag>)

        ```

        Deactivates a nav point type attached to a player <unit> anchored to a flag
  - slug: deactivate_nav_point_object
    info:
      en: >-
        ```hsc

        (<void> deactivate_nav_point_object <unit> <object>)

        ```

        Deactivates a nav point type attached to a player <unit> anchored to an
        object
  - slug: deactivate_team_nav_point_flag
    info:
      en: |-
        ```hsc
        (<void> deactivate_team_nav_point_flag <team> <cutscene_flag>)
        ```
        Deactivates a nav point type attached to a team anchored to a flag
  - slug: deactivate_team_nav_point_object
    info:
      en: |-
        ```hsc
        (<void> deactivate_team_nav_point_object <team> <object>)
        ```
        Deactivates a nav point type attached to a team anchored to an object
  - slug: debug_camera_load
    info:
      en: |-
        ```hsc
        (<void> debug_camera_load)
        ```
        Loads the saved camera position and facing
  - slug: debug_camera_load_name
    info:
      en: |-
        ```hsc
        (<void> debug_camera_load_name <string>)
        ```
        loads the camera position and facing from <name>_<map_name>.txt
    context: H1A only
  - slug: debug_camera_load_simple_name
    info:
      en: |-
        ```hsc
        (<void> debug_camera_load_simple_name <string>)
        ```
        loads the camera position and facing from camera_<name>.txt
    context: H1A only
  - slug: debug_camera_load_text
    info:
      en: |-
        ```hsc
        (<void> debug_camera_load_text <string>)
        ```
        loads the camera position and facing from a passed in string
    context: H1A only
  - slug: debug_camera_save
    info:
      en: |-
        ```hsc
        (<void> debug_camera_save)
        ```
        Saves the camera position and facing
  - slug: debug_camera_save_name
    info:
      en: |-
        ```hsc
        (<void> debug_camera_save_name <string>)
        ```
        saves the camera position and facing to <name>_<map_name>.txt
    context: H1A only
  - slug: debug_camera_save_simple_name
    info:
      en: |-
        ```hsc
        (<void> debug_camera_save_simple_name <string>)
        ```
        saves the camera position and facing to camera_<name>.txt
    context: H1A only
  - slug: debug_memory
    info:
      en: |-
        ```hsc
        (debug_memory)

        ```
        Dumps memory leaks
    context: Gearbox only
  - slug: debug_memory_by_file
    info:
      en: |-
        ```hsc
        (debug_memory_by_file)

        ```
        Dumps memory leaks by source file
    context: Gearbox only
  - slug: debug_memory_for_file
    info:
      en: |-
        ```hsc
        (debug_memory_for_file <string>)
        (debug_memory_for_file "\halopc\haloce\source\tag_files\tag_groups.c")
        ```
        Dumps memory leaks from the specified source file
    context: Gearbox only
  - slug: debug_pvs
    info:
      en: |-
        ```hsc
        (<void> debug_pvs <boolean>)
        ```
        displays the current pvs.
  - slug: debug_sounds_distances
    info:
      en: >-
        ```hsc

        (debug_sounds_distances <string> <real> <real>)

        ```

        Changes the minimum and maximum distances for all sound classes
        matching the substring
    context: Gearbox only
  - slug: debug_sounds_enable
    info:
      en: |-
        ```hsc
        (<void> debug_sounds_enable <string> <boolean>)
        ```
        Enables or disabled all sound classes matching the substring
  - slug: debug_sounds_wet
    info:
      en: |-
        ```hsc
        (debug_sounds_wet <string> <real>)
        ```
        Changes the reverb level for all sound classes matching the substring
    context: Gearbox only
  - slug: debug_tags
    info:
      en: |-
        ```hsc
        (debug_tags)
        ```
        Writes all memory being used by tag files into tag_dump.txt
    context: Test builds only
  - slug: debug_teleport_player
    info:
      en: |
        ```hsc
        (<void> debug_teleport_player <short> <short>)
        ```
        Given two local player indices, teleports the first to the second
        if they both exist.
  - slug: delete_save_game_files
    info:
      en: |-
        ```hsc
        (delete_save_game_files)

        ```
        Delete all custom profile files
    context: Gearbox only
  - slug: device_get_position
    info:
      en: >-
        ```hsc

        (device_get_position <device>)

        ```

        Gets the current position of the given device (used for devices
        without explicit device groups)
  - slug: device_get_position
    info:
      en: >-
        ```hsc

        (<real> device_get_position <device>)

        ```

        Gets the current position of the given device (used for devices without
        explicit device groups)
  - slug: device_get_power
    info:
      en: |-
        ```hsc
        (<real> device_get_power <device>)
        ```
        Gets the current power of a named device
  - slug: device_group_change_only_once_more_set
    info:
      en: |-
        ```hsc
        (<void> device_group_change_only_once_more_set <device_group> <boolean>)
        ```
        true allows a device to change states only once
  - slug: device_group_get
    info:
      en: |-
        ```hsc
        (<real> device_group_get <device_group>)
        ```
        Returns the desired value of the specified device group
  - slug: device_group_set
    info:
      en: |-
        ```hsc
        (<boolean> device_group_set <device_group> <real>)
        ```
        Changes the desired value of the specified device group
  - slug: device_group_set_immediate
    info:
      en: |-
        ```hsc
        (<void> device_group_set_immediate <device_group> <real>)
        ```
        Instantaneously changes the value of the specified device group
  - slug: device_one_sided_set
    info:
      en: >-
        ```hsc

        (<void> device_one_sided_set <device> <boolean>)

        ```

        true makes the given device one-sided (only able to be opened from one direction),
        false makes it two-sided
  - slug: device_operates_automatically_set
    info:
      en: >-
        ```hsc

        (<void> device_operates_automatically_set <device> <boolean>)

        ```

        true makes the given device open automatically when any biped is nearby,
        false makes it not
  - slug: device_set_never_appears_locked
    info:
      en: |-
        ```hsc
        (<void> device_set_never_appears_locked <device> <boolean>)
        ```
        changes a machine's never_appears_locked flag, but only if paul is a bastard
  - slug: device_set_position
    info:
      en: >-
        ```hsc

        (<boolean> device_set_position <device> <real>)

        (device_set_position <device> 1.0)

        ```

        Set the desired position of the given device (used for devices without explicit
        device groups)
  - slug: device_set_position_immediate
    info:
      en: >-
        ```hsc

        (<void> device_set_position_immediate <device> <real>)

        (device_set_position_immediate <device> 1.0)

        ```

        Instantaneously changes the position of the given device (used for devices
        without explicit device groups
  - slug: device_set_power
    info:
      en: |-
        ```hsc
        (<void> device_set_power <device> <real>)
        (device_set_power <device> 1.0)
        ```
        Immediately sets the power of a named device to the given value
  - slug: disconnect
    info:
      en: |-
        ```hsc
        (disconnect)
        ```
        Disconnect from a server
    context: Gearbox only
  - slug: display_scenario_help
    info:
      en: |-
        ```hsc
        (<void> display_scenario_help <short>)
        (display_scenario_help 1)
        ```
        Display in-game help dialog
  - slug: effect_new
    info:
      en: |-
        ```hsc
        (<void> effect_new <effect> <cutscene_flag>)
        (effect_new "effects\coop teleport" teleporting_flag)
        ```
        Starts the specified effect at the specified flag
  - slug: effect_new_on_object_marker
    info:
      en: >-
        ```hsc

        (<void> effect_new_on_object_marker <effect> <object> <string>)

        (effect_new_on_object_marker "effects\burning large" warthog_mp "driver")

        ```

        Starts the specified effect on the specified object at the specified marker
  - slug: enable_hud_help_flash
    info:
      en: |-
        ```hsc
        (<void> enable_hud_help_flash <boolean>)
        (enable_hud_help_flash true)
        (enable_hud_help_flash false)
        ```
        Starts/stops the help text flashing
  - slug: error_overflow_suppression
    info:
      en: |-
        ```hsc
        (<void> error_overflow_suppression <boolean>)
        (error_overflow_suppression true)
        (error_overflow_suppression false)
        ```
        Enables or disables the suppression of error spamming
  - slug: fade_in
    info:
      en: |-
        ```hsc
        (<void> fade_in <real> <real> <real> <short>)
        (fade_in 0.0 0.0 0.0 100)
        ```
        Does a screen fade in from a particular color in the amount of ticks
  - slug: fade_out
    info:
      en: |-
        ```hsc
        (<void> fade_out <real> <real> <real> <short>)
        (fade_out 1.0 1.0 1.0 100)
        ```
        Does a screen fade out to a particular color in the amount of ticks
  - slug: fast_setup_network_server
    info:
      en: >-
        ```hsc

        (fast_setup_network_server <string> <string> <boolean>)

        ```

        Sets up a network server with the given map name, game variant, and
        true for remote connections, false for not
    context: Gearbox only
  - slug: game_all_quiet
    info:
      en: >-
        ```hsc

        (<boolean> game_all_quiet)

        ```

        Returns false if there are bad guys around, projectiles in the air, etc.
  - slug: game_difficulty_get
    info:
      en: >-
        ```hsc

        (<game_difficulty> game_difficulty_get)

        ```

        Returns the current difficulty setting, but lies to you and will never return
        easy, instead returning normal
  - slug: game_difficulty_get_real
    info:
      en: |-
        ```hsc
        (<game_difficulty> game_difficulty_get_real)
        ```
        Returns the actual current difficulty setting without lying
  - slug: game_difficulty_set
    info:
      en: |-
        ```hsc
        (<void> game_difficulty_set <game_difficulty>)
        (game_difficulty_set easy)
        (game_difficulty_set normal)
        (game_difficulty_set hard)
        (game_difficulty_set impossible)
        ```
        Changes the difficulty setting for the next map to be loaded
  - slug: game_is_authoritative
    info:
      en: |
        ```hsc
        (<boolean> game_is_authoritative)
        ```
    context: H1A only
  - slug: game_is_cooperative
    info:
      en: |-
        ```hsc
        (<boolean> game_is_cooperative)
        ```
        Returns true if the game is cooperative
  - slug: game_lost
    info:
      en: |-
        ```hsc
        (<void> game_lost)
        ```
        Causes the player to revert to their previous saved checkpoint. For
        example, this is used when Keyes dies in _Truth and Reconciliation_.
  - slug: game_revert
    info:
      en: >-
        ```hsc

        (<void> game_revert)

        ```

        Reverts to last saved game, if any (for testing, the first bastard that
        does this to me gets it in the head)
  - slug: game_reverted
    info:
      en: |-
        ```hsc
        (<boolean> game_reverted)
        ```
        Don't use this for anything, you black-hearted bastards
  - slug: game_safe_to_save
    info:
      en: >-
        ```hsc

        (<boolean> game_safe_to_save)

        ```

        Returns false if it would be a bad idea to save the player's game right
        now
  - slug: game_safe_to_speak
    info:
      en: >-
        ```hsc

        (<boolean> game_safe_to_speak)

        ```

        Returns false if it would be a bad idea to save the player's game right
        now
  - slug: game_save
    info:
      en: >-
        ```hsc

        (<void> game_save)

        ```

        Checks to see if it is safe to save game, then saves (gives up after 8 seconds)
  - slug: game_save_cancel
    info:
      en: |-
        ```hsc
        (<void> game_save_cancel)
        ```
        Cancels any pending `game_save`, timeout or not. This prevents a
        checkpoint from being created during a known loss situation.
  - slug: game_save_no_timeout
    info:
      en: >-
        ```hsc

        (<void> game_save_no_timeout)

        ```

        Checks to see if it is safe to save game, then saves (this version never
        gives up)
  - slug: game_save_totally_unsafe
    info:
      en: |-
        ```hsc
        (<void> game_save_totally_unsafe)
        ```
        Saves disregarding player's current situation
  - slug: game_saving
    info:
      en: |-
        ```hsc
        (<boolean> game_saving)
        ```
        Checks to see if the game is trying to save a checkpoint
  - slug: game_skip_ticks
    info:
      en: |-
        ```hsc
        (<void> game_skip_ticks <short>)
        (game_skip_ticks 5)
        ```
        Skips <short> amount of game ticks. ONLY USE IN CUTSCENES!!!
  - slug: game_speed
    info:
      en: |-
        ```hsc
        (<void> game_speed <real>)
        (game_speed 0.5)
        ```
        Changes the game speed. Values above 20 are likley to be uncontrollable.
        This function doesn't have an effect in H1A but you can now use the
        `game_paused` and `game_speed_value` globals instead.
  - slug: game_time
    info:
      en: |-
        ```hsc
        (<long> game_time)
        ```
        Gets ticks elapsed since the start of the game (when the map loaded).
        This is not authoritative game time in the case of multiplayer since
        clients can join at different times.
  - slug: game_variant
    info:
      en: |-
        ```hsc
        (<void> game_variant <string>)
        (game_variant ctf)
        (game_variant team_oddball)
        ```
        Sets the multiplayer game engine, which will take effect the next time
        the map is loaded with `map_name`. See [game modes](~game-modes)
        for available engines.
  - slug: game_won
    info:
      en: >-
        ```hsc

        (<void> game_won)

        ```

        Causes the player to successfully finish the current level and move on to
        the next
  - slug: garbage_collect_now
    info:
      en: |-
        ```hsc
        (<void> garbage_collect_now)
        ```
        Causes all non-visible garbage objects like dead [bipeds](~biped) and
        [garbage](~) to be garbage collected (removed) immediately rather than
        on a timer. You can enable `debug_object_garbage_collection` for statistics.
  - slug: get_digital_forward_throttle
    info:
      en: |-
        ```hsc
        (get_digital_forward_throttle <short>)
        ```
        Gets the amount of forward throttle applied by digital device stimuli
    context: Gearbox only
  - slug: get_digital_pitch_increment
    info:
      en: |-
        ```hsc
        (get_digital_pitch_increment <short>)
        ```
        Gets the increment in pitch applied by digital device stimuli
    context: Gearbox only
  - slug: get_digital_strafe_throttle
    info:
      en: |-
        ```hsc
        (get_digital_strafe_throttle <short>)
        ```
        Gets the amount of strafe throttle applied by digital device stimuli
    context: Gearbox only
  - slug: get_digital_yaw_increment
    info:
      en: |-
        ```hsc
        (get_digital_yaw_increment <short>)
        ```
        Gets the increment in yaw applied by digital device stimuli
    context: Gearbox only
  - slug: get_gamepad_forward_threshold
    info:
      en: >-
        ```hsc

        (get_gamepad_forward_threshold <short>)

        ```

        Gets the threshold beyond which gamepad movement is full forward
        throttle
    context: Gearbox only
  - slug: get_gamepad_pitch_scale
    info:
      en: |-
        ```hsc
        (get_gamepad_pitch_scale <short>)
        ```
        Gets the scale for gamepad control of pitch
    context: Gearbox only
  - slug: get_gamepad_strafe_threshold
    info:
      en: >-
        ```hsc

        (get_gamepad_strafe_threshold <short>)

        ```

        Gets the threshold beyond which gamepad movement is full strafe
        throttle
    context: Gearbox only
  - slug: get_gamepad_yaw_scale
    info:
      en: |-
        ```hsc
        (get_gamepad_yaw_scale <short>)
        ```
        Gets the scale for gamepad control of yaw
    context: Gearbox only
  - slug: get_mouse_forward_threshold
    info:
      en: >-
        ```hsc

        (get_mouse_forward_threshold <short>)

        ```

        Gets the threshold beyond which mouse movement is full forward
        throttle
    context: Gearbox only
  - slug: get_mouse_pitch_scale
    info:
      en: |-
        ```hsc
        (get_mouse_pitch_scale <short>)
        ```
        Gets the scale for mouse control of pitch
    context: Gearbox only
  - slug: get_mouse_strafe_threshold
    info:
      en: |-
        ```hsc
        (get_mouse_strafe_threshold <short>)
        ```
        Gets the threshold beyond which mouse movement is full strafe throttle
    context: Gearbox only
  - slug: get_mouse_yaw_scale
    info:
      en: |-
        ```hsc
        (get_mouse_yaw_scale <short>)
        ```
        Gets the scale for mouse control of yaw
    context: Gearbox only
  - slug: get_pitch_rate
    info:
      en: |-
        ```hsc
        (<real> get_pitch_rate <short>)
        ```
        Gets the yaw rate for the given player number
  - slug: get_yaw_rate
    info:
      en: |-
        ```hsc
        (<real> get_yaw_rate <short>)
        ```
        Gets the yaw rate for the given player number
  - slug: hammer_begin
    info:
      en: |-
        ```hsc
        (hammer_begin <string> <string> <long> <short> <short>)
        ```
        Hammers the server by connecting and disconnecting repeatedly
    context: Gearbox only
  - slug: hammer_stop
    info:
      en: |-
        ```hsc
        (hammer_stop)

        ```
        Stops hammering the server
    context: Gearbox only
  - slug: help
    info:
      en: |-
        ```hsc
        (<void> help <string>)
        (help cheats_load)
        ```
        Prints a description of the named function
    tags:
      - debug
  - slug: hud_blink_health
    info:
      en: |-
        ```hsc
        (<void> hud_blink_health <boolean>)
        (hud_blink_health true)
        (hud_blink_health false)
        ```
        Starts/stops manual blinking of the health panel
  - slug: hud_blink_motion_sensor
    info:
      en: |-
        ```hsc
        (<void> hud_blink_motion_sensor <boolean>)
        (hud_blink_motion_sensor true)
        (hud_blink_motion_sensor false)
        ```
        Starts/stops manual blinking of the motion sensor panel
  - slug: hud_blink_shield
    info:
      en: |-
        ```hsc
        (<void> hud_blink_shield <boolean>)
        (hud_blink_shield true)
        (hud_blink_shield false)
        ```
        Starts/stops manual blinking of the shield panel
  - slug: hud_clear_messages
    info:
      en: |-
        ```hsc
        (<void> hud_clear_messages)
        ```
        Clears all non-state messages on the hud
  - slug: hud_get_timer_ticks
    info:
      en: |-
        ```hsc
        (<short> hud_get_timer_ticks)
        ```
        Returns the ticks left on the hud timer
  - slug: hud_help_flash_restart
    info:
      en: |-
        ```hsc
        (<void> hud_help_flash_restart)
        ```
        Resets the timer for the help text flashing
  - slug: hud_set_help_text
    info:
      en: |-
        ```hsc
        (<void> hud_set_help_text <hud_message>)
        ```
        displays <message> as the help text
  - slug: hud_set_objective_text
    info:
      en: |-
        ```hsc
        (<void> hud_set_objective_text <hud_message>)
        ```
        sets <message> as the current objective
  - slug: hud_set_timer_position
    info:
      en: |-
        ```hsc
        (<void> hud_set_timer_position <short> <short> <hud_corner>)
        ```
        sets the timer upper left position to (x, y)=>(<short>, <short>)
  - slug: hud_set_timer_time
    info:
      en: |-
        ```hsc
        (<void> hud_set_timer_time <short> <short>)
        ```
        sets the time for the timer to <short> minutes and <short> seconds, and starts and displays timer
  - slug: hud_set_timer_warning_time
    info:
      en: |-
        ```hsc
        (<void> hud_set_timer_warning_time <short> <short>)
        ```
        sets the warning time for the timer to <short> minutes and <short> seconds
  - slug: hud_show_crosshair
    info:
      en: |-
        ```hsc
        (<void> hud_show_crosshair <boolean>)
        ```
        hides/shows the weapon crosshair
  - slug: hud_show_health
    info:
      en: |-
        ```hsc
        (<void> hud_show_health <boolean>)
        ```
        hides/shows the health panel
  - slug: hud_show_motion_sensor
    info:
      en: |-
        ```hsc
        (<void> hud_show_motion_sensor <boolean>)
        ```
        hides/shows the motion sensor panel
  - slug: hud_show_shield
    info:
      en: |-
        ```hsc
        (<void> hud_show_shield <boolean>)
        ```
        hides/shows the shield panel
  - slug: hud_team_background_set_pos
    info:
      en: |-
        ```hsc
        (hud_team_background_set_pos <long> <long>)
        ```
        shit
    context: Gearbox only
  - slug: hud_team_background_set_scale
    info:
      en: |-
        ```hsc
        (hud_team_background_set_scale <real> <real>)
        ```
        shit
    context: Gearbox only
  - slug: hud_team_icon_set_pos
    info:
      en: |-
        ```hsc
        (hud_team_icon_set_pos <long> <long>)
        ```
        shit
    context: Gearbox only
  - slug: hud_team_icon_set_scale
    info:
      en: |-
        ```hsc
        (hud_team_icon_set_scale <real> <real>)
        ```
        shit
    context: Gearbox only
  - slug: input_activate_joy
    info:
      en: |-
        ```hsc
        (input_activate_joy <short> <short>)
        ```
        Activates an enumerated joystick into a logical joystick slot
    context: Gearbox only
  - slug: input_deactivate_joy
    info:
      en: >-
        ```hsc

        (input_deactivate_joy <short>)

        ```

        Deactivates an enumerated joystick, freeing up the logical joystick
        slot
    context: Gearbox only
  - slug: input_find_default
    info:
      en: |-
        ```hsc
        (input_find_default <string>)
        ```
        Test function that looks up a default profile for a deviceid
    context: Gearbox only
  - slug: input_find_joystick
    info:
      en: |-
        ```hsc
        (input_find_joystick <string>)
        ```
        Test function to find a joystick by GUID (string representation)
    context: Gearbox only
  - slug: input_get_joy_count
    info:
      en: |-
        ```hsc
        (input_get_joy_count)

        ```
        Test function to return the number of joysticks enumerated
    context: Gearbox only
  - slug: input_is_joy_active
    info:
      en: >-
        ```hsc

        (input_is_joy_active <short>)

        ```

        Test function to determine if an enumerated joystick is activated or
        not
    context: Gearbox only
  - slug: input_show_joystick_info
    info:
      en: >-
        ```hsc

        (input_show_joystick_info)


        ```

        Test function to show the enumerated joystick information for all
        joystick
    context: Gearbox only
  - slug: list_count
    info:
      en: |-
        ```hsc
        (<short> list_count <object_list>)
        (list_count the_warthogs)
        ```
        Returns the number of objects in a list
  - slug: list_count_not_dead
    info:
      en: |-
        ```hsc
        (<short> list_count_not_dead <object_list>)
        ```
        returns the number of objects in a list that aren't dead
    context: H1A only
  - slug: list_get
    info:
      en: |-
        ```hsc
        (<object> list_get <object_list> <short>)
        (list_get the_warthogs 3)
        ```
        Returns an item in an object list
  - slug: local_players
    info:
      en: |-
        ```hsc
        (<object_list> local_players)
        ```
        returns a list of the living player units on the local machine
    context: H1A only
  - slug: log_print
    info:
      en: |-
        ```hsc
        (<void> log_print <string>)
        ```
        prints a string to the hs log file.
    context: H1A only
  - slug: magic_melee_attack
    info:
      en: |-
        ```hsc
        (<void> magic_melee_attack)
        ```
        Causes player's unit to start a melee attack
  - slug: magic_seat_name
    info:
      en: >-
        ```hsc

        (<void> magic_seat_name <string>)

        ```

        All units controlled by the player will assume the given seat name (valid
        values are 'asleep', 'alert', 'stand', 'crouch' and 'flee')
  - slug: map_name
    info:
      en: |-
        ```hsc
        (<void> map_name <string>)
        ; in cache builds:
        (map_name "a10")
        ; in tags builds:
        (map_name "levels\a10\a10")
        ```
        Loads a singleplayer map by scenario name. If using the
        [H1A standalone build](~h1-standalone-build), which directly loads
        tags instead of [cache files](~maps), use the scenario
        [tag path](~tags#tag-references-and-paths) instead.
  - slug: map_reset
    info:
      en: |-
        ```hsc
        (<void> map_reset)
        ```
        Starts the map from the beginning
  - slug: mcc_mission_segment
    info:
      en: |-
        ```hsc
        (<boolean> mcc_mission_segment <string>)
        (mcc_mission_segment "03_escape") ;from a10
        (mcc_mission_segment "04_first_shoot") ;from a10
        ```
        Signals a mission segment being reached to MCC. Usually done at the same time
        as a checkpoint (`game_save`). H1A MCC only.
    context: H1A only
  - slug: message_metrics_clear
    info:
      en: |-
        ```hsc
        (message_metrics_clear)
        ```
        Clears network messaging metrics
    context: Gearbox only
  - slug: message_metrics_dump
    info:
      en: |-
        ```hsc
        (message_metrics_dump <string>)
        (message_metrics_dump "")
        ```
        Dumps network messaging metrics to given file ("" for default)
    context: Gearbox only
  - slug: multiplayer_map_name
    info:
      en: |-
        ```hsc
        (<void> multiplayer_map_name <string>)
        (multiplayer_map_name "schwinnzno1_alpha01a")
        ```
        Changes the name of the multiplayer map
  - slug: net_graph_clear
    info:
      en: |-
        ```hsc
        (net_graph_clear)
        ```
        Clears the net_graph
    context: Gearbox only
  - slug: net_graph_show
    info:
      en: |-
        ```hsc
        (net_graph_show <string> <string>)
        ```
        Changes the net_graph display (bytes/packets, sent/received)
    context: Gearbox only
  - slug: network_client_dump
    info:
      en: |-
        ```hsc
        (network_client_dump)
        ```
        Dumps info on network client
    context: Gearbox only
  - slug: network_server_dump
    info:
      en: |-
        ```hsc
        (network_server_dump)
        ```
        Dumps info on network server
    context: Gearbox only
  - slug: numeric_countdown_timer_get
    info:
      en: |-
        ```hsc
        (<short> numeric_countdown_timer_get <short>)
        (numeric_countdown_timer_get 1)
        (numeric_countdown_timer_get -1)
        ```
        `<digit_index>`
  - slug: numeric_countdown_timer_restart
    info:
      en: |-
        ```hsc
        (<void> numeric_countdown_timer_restart)
        ```
        Reset the timer
  - slug: numeric_countdown_timer_set
    info:
      en: |-
        ```hsc
        (<void> numeric_countdown_timer_set <long> <boolean>)
        (numeric_countdown_timer_set 15500 false)
        (numeric_countdown_timer_set 10000 false)
        ```
        `<milliseconds>`, `<auto_start>`
  - slug: numeric_countdown_timer_stop
    info:
      en: |-
        ```hsc
        (<void> numeric_countdown_timer_stop)
        ```
        Stop the timer
  - slug: object_beautify
    info:
      en: |-
        ```hsc
        (<void> object_beautify <object> <boolean>)
        (object_beautify chief true)
        (object_beautify chief false)
        ```
        Makes an object use its highest quality [LOD](~gbxmodel#level-of-detail)
        for the remainder of the levels' cutscenes.
  - slug: object_can_take_damage
    info:
      en: |-
        ```hsc
        (<void> object_can_take_damage <object_list>)
        (object_can_take_damage (players))
        ```
        Allows an object to take damage again
  - slug: object_cannot_take_damage
    info:
      en: |-
        ```hsc
        (<void> object_cannot_take_damage <object_list>)
        (object_cannot_take_damage (players))
        ```
        Prevents an object from taking damage
  - slug: object_create
    info:
      en: |-
        ```hsc
        (<void> object_create <object_name>)
        (object_create warthog_mp_1)
        ```
        Creates an object from the scenario
  - slug: object_create_anew
    info:
      en: |-
        ```hsc
        (<void> object_create_anew <object_name>)
        (object_create_anew banshee_mp_1)
        ```
        Creates an object, destroying it first if it already exists
  - slug: object_create_anew_containing
    info:
      en: >-
        ```hsc

        (<void> object_create_anew_containing <string>)

        (object_create_anew_containing "pelican")

        ```

        Creates anew all objects from the scenario whose names contain the given
        substring
  - slug: object_create_containing
    info:
      en: >-
        ```hsc

        (<void> object_create_containing <string>)

        (object_create_containing "warthog")

        ```

        Creates all objects from the scenario whose names contain the given substring
  - slug: object_destroy
    info:
      en: |-
        ```hsc
        (<void> object_destroy <object>)
        ```
        Destroys an object
  - slug: object_destroy_all
    info:
      en: |-
        ```hsc
        (<void> object_destroy_all)
        ```
        Destroys all non player objects
  - slug: object_destroy_containing
    info:
      en: >-
        ```hsc

        (<void> object_destroy_containing <string>)

        (object_destroy_containing "pelican")

        ```

        Destroys all objects from the scenario whose names contain the given substring
  - slug: object_pvs_activate
    info:
      en: |-
        ```hsc
        (<void> object_pvs_activate <object>)
        ```
        Just another (old) name for object_pvs_set_object.
    tags:
      - portals
  - slug: object_pvs_clear
    info:
      en: |-
        ```hsc
        (<void> object_pvs_clear)
        ```
        Removes the special place that activates everything it sees.
    tags:
      - portals
  - slug: object_pvs_set_camera
    info:
      en: >-
        ```hsc

        (<void> object_pvs_set_camera <cutscene_camera_point>)

        ```

        Sets the specified cutscene camera point as the special place that activates
        everything it sees.
    tags:
      - portals
  - slug: object_pvs_set_object
    info:
      en: |-
        ```hsc
        (<void> object_pvs_set_object <object>)
        ```
        Sets the specified object as the special place that activates everything
        it sees. Make sure to use `object_pvs_clear` before switching BSPs or you'll trigger
        the assertion `EXCEPTION halt in c:\mcc\qfe1\h1\code\h1a2\sources\structures\structure_bsp_definitions.c,#39: cluster_index>=0 && cluster_index<structure_bsp->clusters.count`
    tags:
      - portals
  - slug: object_set_collideable
    info:
      en: |-
        ```hsc
        (<void> object_set_collideable <object> <boolean>)
        (object_set_collideable (player0) true)
        (object_set_collideable (player0) false)
        ```
        `false` prevents any object from colliding with the given object
  - slug: object_set_facing
    info:
      en: |-
        ```hsc
        (<void> object_set_facing <object> <cutscene_flag>)
        (object_set_facing (player0) blue_base_flag)
        ```
        Turns the specified object in the direction of the specified flag
  - slug: object_set_melee_attack_inhibited
    info:
      en: |-
        ```hsc
        (<void> object_set_melee_attack_inhibited <object> <boolean>)
        (object_set_melee_attack_inhibited (player0) true)
        (object_set_melee_attack_inhibited (player0) false)
        ```
        `false` prevents object from using melee attack
  - slug: object_set_permutation
    info:
      en: >-
        ```hsc

        (<void> object_set_permutation <object> <string> <string>)

        (object_set_permutation (player0) "right arm" ~damaged)

        ```

        Sets the desired region (use `""` for all regions) to the permutation with
        the given name
  - slug: object_set_ranged_attack_inhibited
    info:
      en: |-
        ```hsc
        (<void> object_set_ranged_attack_inhibited <object> <boolean>)
        (object_set_ranged_attack_inhibited (player0) true)
        (object_set_ranged_attack_inhibited (player0) false)
        ```
        `false` prevents object from using ranged attack
  - slug: object_set_scale
    info:
      en: >-
        ```hsc

        (<void> object_set_scale <object> <real> <short>)

        (object_set_scale (player0) 1.5 10)

        (object_set_scale insertion_pelican 0.25 30)

        ```

        sets the scale for a given object and interpolates over the given number
        of frames to achieve that scale
  - slug: object_set_shield
    info:
      en: |-
        ```hsc
        (<void> object_set_shield <object> <real>)
        (object_set_shield (player0) 1.0)
        ```
        Sets the shield vitality of the specified object (between 0 and 1)
  - slug: object_teleport
    info:
      en: |-
        ```hsc
        (<void> object_teleport <object> <cutscene_flag>)
        (object_teleport (player0) red_base_flag)
        ```
        Moves the specified object to the specified flag
  - slug: object_type_predict
    info:
      en: >-
        ```hsc

        (<void> object_type_predict <object_definition>)

        ```

        Loads textures necessary to draw an object that's about to come on-screen
  - slug: objects_attach
    info:
      en: |-
        ```hsc
        (<void> objects_attach <object> <string> <object> <string>)
        (objects_attach chief "right hand" ar1 "")
        ```
        Attaches the second object to the first; both strings can be empty
  - slug: objects_can_see_flag
    info:
      en: |-
        ```hsc
        (<boolean> objects_can_see_flag <object_list> <cutscene_flag> <real>)
        (objects_can_see_flag (players) tunnel_flag 45)
        ```
        Returns `true` if any of the specified units are looking within the specified
        number of degrees of the flag. This is a simple direction test; obstructions
        like scenery or the BSP are not considered blockers.
  - slug: objects_can_see_object
    info:
      en: |-
        ```hsc
        (<boolean> objects_can_see_object <object_list> <object> <real>)
        (objects_can_see_object (player0) the_warthog 90)
        ```
        Returns `true` if any of the specified units are looking within the specified
        number of degrees of the object. This is a simple direction test; obstructions
        like scenery or the BSP are not considered blockers.
  - slug: objects_delete_by_definition
    info:
      en: |-
        ```hsc
        (<void> objects_delete_by_definition <object_definition>)
        ```
        Deletes all objects of type `<definition>`
  - slug: objects_detach
    info:
      en: |-
        ```hsc
        (<void> objects_detach <object> <object>)
        (objects_detach chief ar1)
        ```
        Detaches from the given parent object the given child object
  - slug: objects_distance_to_flag
    info:
      en: |-
        ```hsc
        (<real> objects_distance_to_flag <object_list> <cutscene_flag>)
        ```
        returns minimum distance from any of the specified objects to the specified flag. (returns -1 if there are no objects, or no flag, to check)
    context: H1A only
  - slug: objects_distance_to_object
    info:
      en: |-
        ```hsc
        (<real> objects_distance_to_object <object_list> <object>)
        ```
        returns minimum distance from any of the specified objects to the specified destination object. (returns -1 if either of the objects does not exist)
    context: H1A only
  - slug: objects_dump_memory
    info:
      en: |-
        ```hsc
        (<void> objects_dump_memory)
        ```
        debugs object memory usage
  - slug: objects_predict
    info:
      en: >-
        ```hsc

        (<void> objects_predict <object_list>)

        (objects_predict the_bipeds)

        ```

        Loads textures necessary to draw objects that are about to come on-screen,
        using the object's [predicted resources](~object#tag-field-predicted-resources).
  - slug: pause_hud_timer
    info:
      en: |-
        ```hsc
        (<void> pause_hud_timer <boolean>)
        (pause_hud_timer true)
        (pause_hud_timer false)
        ```
        Pauses or unpauses the hud timer
  - slug: physics_constants_reset
    tags:
      - physics-engine
    info:
      en: |-
        ```hsc
        (<void> physics_constants_reset)
        ```
        Resets all physics constants to earthly values.
    context: H1A only
  - slug: physics_get_gravity
    tags:
      - physics-engine
    info:
      en: |-
        ```hsc
        (<real> physics_get_gravity)
        ```
        Get the current global gravity acceleration relative to Halo standard gravity.
    context: H1A only
  - slug: physics_set_gravity
    tags:
      - physics-engine
    info:
      en: |-
        ```hsc
        (<void> physics_set_gravity <real>)
        ```
        Set global gravity acceleration relative to Halo standard gravity. The
        change in gravity is NOT network synchronized.
    context: H1A only
  - slug: play_update_history
    info:
      en: >-
        ```hsc

        (play_update_history <long> <boolean>)

        ```

        Playback client input history starting from the specified last
        completed update id
    context: Gearbox only
  - slug: playback
    info:
      en: |-
        ```hsc
        (<void> playback)
        ```
        Starts game in film playback mode
  - slug: player0_joystick_set_is_normal
    info:
      en: |-
        ```hsc
        (<boolean> player0_joystick_set_is_normal)
        ```
        Returns `true` if (player0) is using the normal joystick set
  - slug: player0_look_invert_pitch
    info:
      en: |-
        ```hsc
        (<void> player0_look_invert_pitch <boolean>)
        ```
        Invert player0's look
  - slug: player0_look_pitch_is_inverted
    info:
      en: |-
        ```hsc
        (<boolean> player0_look_pitch_is_inverted)
        ```
        Returns `true` if (player0)'s look pitch is inverted
  - slug: player_action_test_accept
    info:
      en: >-
        ```hsc

        (<boolean> player_action_test_accept)

        ```

        Returns `true` if any player has hit accept since the last call to `(player_action_test_reset)`
  - slug: player_action_test_action
    info:
      en: >-
        ```hsc

        (<boolean> player_action_test_action)

        ```

        Returns `true` if any player has hit the action key since the last call
        to `(player_action_test_reset)`
  - slug: player_action_test_back
    info:
      en: >-
        ```hsc

        (<boolean> player_action_test_back)

        ```

        Returns `true` if any player has hit the back key since the last call to
        `(player_action_test_reset)`
  - slug: player_action_test_grenade_trigger
    info:
      en: >-
        ```hsc

        (<boolean> player_action_test_grenade_trigger)

        ```

        Returns `true` if any player has used grenade trigger since the last call
        to `(player_action_test_reset)`
  - slug: player_action_test_jump
    info:
      en: >-
        ```hsc

        (<boolean> player_action_test_jump)

        ```

        Returns `true` if any player has jumped since the last call to `(player_action_test_reset)`
  - slug: player_action_test_look_relative_all_directions
    info:
      en: >-
        ```hsc

        (<boolean> player_action_test_look_relative_all_directions)

        ```

        Returns `true` if any player has looked up, down, left, and right since
        the last call to `(player_action_test_reset)`
  - slug: player_action_test_look_relative_down
    info:
      en: >-
        ```hsc

        (<boolean> player_action_test_look_relative_down)

        ```

        Returns `true` if any player has looked down since the last call to `(player_action_test_reset)`
  - slug: player_action_test_look_relative_left
    info:
      en: >-
        ```hsc

        (<boolean> player_action_test_look_relative_left)

        ```

        Returns `true` if any player has looked left since the last call to `(player_action_test_reset)`
  - slug: player_action_test_look_relative_right
    info:
      en: >-
        ```hsc

        (<boolean> player_action_test_look_relative_right)

        ```

        Returns `true` if any player has looked right since the last call to `(player_action_test_reset)`
  - slug: player_action_test_look_relative_up
    info:
      en: >-
        ```hsc

        (<boolean> player_action_test_look_relative_up)

        ```

        Returns `true` if any player has looked up since the last call to `(player_action_test_reset)`
  - slug: player_action_test_move_relative_all_directions
    info:
      en: >-
        ```hsc

        (<boolean> player_action_test_move_relative_all_directions)

        ```

        Returns `true` if any player has moved forward, backward, left, and right
        since the last call to `(player_action_test_reset)`
  - slug: player_action_test_primary_trigger
    info:
      en: >-
        ```hsc

        (<boolean> player_action_test_primary_trigger)

        ```

        Returns `true` if any player has used primary trigger since the last call
        to `(player_action_test_reset)`
  - slug: player_action_test_reset
    info:
      en: >-
        ```hsc

        (<void> player_action_test_reset)

        ```

        Resets the player action test state so that all tests will return `false`
  - slug: player_action_test_zoom
    info:
      en: >-
        ```hsc

        (<boolean> player_action_test_zoom)

        ```

        Returns `true` if any player has hit the zoom button since the last call
        to `(player_action_test_reset)`
  - slug: player_add_equipment
    info:
      en: >-
        ```hsc

        (<void> player_add_equipment <unit> <starting_profile> <boolean>)

        ```

        Adds/resets the player's health, shield, and inventory (weapons and grenades)
        to the named profile. Resets if third parameter is `true`, adds if `false`.
  - slug: player_camera_control
    info:
      en: |-
        ```hsc
        (<boolean> player_camera_control <boolean>)
        (player_camera_control true)
        (player_camera_control false)
        ```
        Enables/disables camera control globally
  - slug: player_effect_set_max_rotation
    info:
      en: |-
        ```hsc
        (<void> player_effect_set_max_rotation <real> <real> <real>)
        ```
        `<yaw>` `<pitch>` `<roll>`
  - slug: player_effect_set_max_translation
    info:
      en: |-
        ```hsc
        (<void> player_effect_set_max_translation <real> <real> <real>)
        ```
        `<x>` `<y>` `<z>`
  - slug: player_effect_set_max_rumble
    info:
      en: |-
        ```hsc
        (<void> player_effect_set_max_rumble <real> <real>)
        ```
        **This is not a real HSC function**, but rather a hard-coded alias for
        `player_effect_set_max_vibrate` present in pre-H1A season 7 versions
        of Halo.
  - slug: player_effect_set_max_vibrate
    info:
      en: |-
        ```hsc
        (<void> player_effect_set_max_vibrate <real> <real>)
        ```
        `<left>` `<right>`
  - slug: player_effect_start
    info:
      en: |-
        ```hsc
        (<void> player_effect_start <real> <real>)
        ```
        `<max_intensity>` `<attack time>`
  - slug: player_effect_stop
    info:
      en: |-
        ```hsc
        (<void> player_effect_stop <real>)
        ```
        `<decay>`
  - slug: player_enable_input
    info:
      en: |-
        ```hsc
        (<void> player_enable_input <boolean>)
        (player_enable_input true)
        (player_enable_input false)
        ```
        Toggle player input. The player can still free-look, but nothing else.
        If the player unit has been attached to an AI encounter, the AI will
        "take over" control if this is disabled.
  - slug: players
    info:
      en: |-
        ```hsc
        (<object_list> players)
        ```
        returns a list of the players
  - slug: players_on_multiplayer_team
    info:
      en: |-
        ```hsc
        (<object_list> players_on_multiplayer_team <short>)
        ```
        returns a list of the living player units on the MP team
    context: H1A only
  - slug: players_unzoom_all
    info:
      en: |-
        ```hsc
        (<void> players_unzoom_all)
        ```
        Resets zoom levels on all players
  - slug: print
    info:
      en: >-
        ```hsc

        (<void> print <string>)

        (print "50 dollars for this?!")

        ```

        Prints a string to the console. Printed text will not appear in the console
        unless devmode is enabled (devmode 4). You can give a `print` call a [format](http://www.cplusplus.com/reference/cstdio/printf/)
        string in H1CE (e.g. `"I have %d apples"`), but **cannot** give it format arguments,
        meaning **a format string can cause the function to read invalid memory
        and crash the game!**. The string is no longer interpreted as a format
        string in H1A.
  - slug: print_binds
    info:
      en: |-
        ```hsc
        (<void> print_binds)
        ```
        Prints a list of all input bindings
  - slug: print_if
    info:
      en: |-
        ```hsc
        (<void> print_if <boolean> <string>)
        ```
        prints a string to the console if the condition is true.
    context: H1A only
  - slug: profile_activate
    info:
      en: |-
        ```hsc
        (profile_activate <string>)
        ```
        Activates profile sections based on a substring
    context: Test builds only
  - slug: profile_deactivate
    info:
      en: |-
        ```hsc
        (profile_deactivate <string>)
        ```
        Deactivates profile sections based on a substring
    context: Test builds only
  - slug: profile_dump
    info:
      en: |-
        ```hsc
        (profile_dump <string>)
        ```
        Dumps profile based on a substring
    context: Test builds only
  - slug: profile_graph_toggle
    info:
      en: |-
        ```hsc
        (profile_graph_toggle <string>)
        ```
        Enables or disables profile graph display of a particular value
    context: Test builds only
  - slug: profile_load
    info:
      en: |-
        ```hsc
        (<void> profile_load <string>)
        (profile_load "a hobo")
        ; loads the profile "a hobo"
        ```
        Load any included builtin profiles and create profiles on disk
  - slug: profile_reset
    info:
      en: |-
        ```hsc
        (profile_reset)

        ```
        Resets profiling data
    context: Test builds only
  - slug: profile_service_clear_timers
    info:
      en: |-
        ```hsc
        (profile_service_clear_timers)

        ```
        Clears the timers that are present in the profiling service
    context: Gearbox only
  - slug: profile_service_dump_timers
    info:
      en: |-
        ```hsc
        (profile_service_dump_timers)

        ```
        Dumps the profiling service timers
    context: Gearbox only
  - slug: profile_unlock_solo_levels
    info:
      en: |-
        ```hsc
        (profile_unlock_solo_levels)

        ```
        Unlocks all the solo player levels for player 1's profile
    context: Gearbox only
  - slug: quit
    info:
      en: |-
        ```hsc
        (<void> quit)
        ```
        Quits the game
  - slug: radiosity_debug_point
    info:
      en: |-
        ```hsc
        (<void> radiosity_debug_point)
        ```
        tests sun occlusion at a point.
  - slug: radiosity_save
    info:
      en: |-
        ```hsc
        (<void> radiosity_save)
        ```
        saves radiosity solution.
  - slug: radiosity_start
    info:
      en: |-
        ```hsc
        (<void> radiosity_start)
        ```
        starts radiosity computation.
  - slug: random_range
    info:
      en: |-
        ```hsc
        (<short> random_range <short> <short>)
        ```
        returns a random value in the range [lower bound, upper bound)
  - slug: rasterizer_decals_flush
    tags:
      - decal
    info:
      en: |-
        ```hsc
        (<void> rasterizer_decals_flush)
        ```
        Destroys all dynamic and permanent decals. You shouldn't use this to
        optimize your map's framerate because it doesn't preserve decorative
        environmental decals. Instead, set reasonable lifetimes for your dynamic
        decals and limit the number of decals created by custom effects.
  - slug: rasterizer_fixed_function_ambient
    info:
      en: |-
        ```hsc
        (<void> rasterizer_fixed_function_ambient <long>)
        (rasterizer_fixed_function_ambient 200)
        ```
        Set the ambient light value for fixed function. Removed in H1A since
        there is no longer a fixed function render pipeline.
  - slug: rasterizer_fps_accumulate
    info:
      en: |-
        ```hsc
        (<void> rasterizer_fps_accumulate)
        ```
        Average fps
  - slug: rasterizer_lights_reset_for_new_map
    info:
      en: |
        ```hsc
        (<void> rasterizer_lights_reset_for_new_map)
        ```
  - slug: rasterizer_model_ambient_reflection_tint
    info:
      en: |
        ```hsc
        (<void> rasterizer_model_ambient_reflection_tint <real> <real> <real> <real>)
        ```
  - slug: rasterizer_reload_effects
    info:
      en: |-
        ```hsc
        (<void> rasterizer_reload_effects)
        ```
        Check for shader changes
  - slug: rcon
    info:
      en: |-
        ```hsc
        (rcon [rcon password] [command])
        ```
        Sends a command for server to execute at console. Use \" to send quotes.
    context: Gearbox only
  - slug: real_random_range
    info:
      en: |-
        ```hsc
        (<real> real_random_range <real> <real>)
        ```
        returns a random value in the range [lower bound, upper bound)
  - slug: recording_kill
    info:
      en: |-
        ```hsc
        (<void> recording_kill <unit>)
        (recording_kill (player0))
        ```
        Kill the specified unit's cutscene recording
  - slug: recording_play
    info:
      en: |-
        ```hsc
        (<boolean> recording_play <unit> <cutscene_recording>)
        ```
        Make the specified unit run the specified cutscene recording
  - slug: recording_play_and_delete
    info:
      en: >-
        ```hsc

        (<boolean> recording_play_and_delete <unit> <cutscene_recording>)

        ```

        Make the specified unit run the specified cutscene recording, deletes the
        unit when the animation finishes
  - slug: recording_play_and_hover
    info:
      en: >-
        ```hsc

        (<boolean> recording_play_and_hover <vehicle> <cutscene_recording>)

        ```

        Make the specified vehicle run the specified cutscene recording, hovers
        the vehicle when the animation finishes
  - slug: recording_time
    info:
      en: |-
        ```hsc
        (<short> recording_time <unit>)
        (recording_time (player0))
        ```
        Return the time remaining in the specified unit's cutscene recording
  - slug: reload_shader_transparent_chicago
    tags:
      - shader_transparent_chicago
    info:
      en: |
        ```hsc
        (<void> reload_shader_transparent_chicago)
        ```
        Reloads all [shader_transparent_chicago](~) tags. Use this in Sapien or
        Standalone to see changes to their bitmaps or parameters without having
        to reload the scenario.
  - slug: remote_player_stats
    info:
      en: |-
        ```hsc
        (remote_player_stats <string>)
        ```
        Displays the prediction stats of the specified remote player.
    context: Gearbox only
  - slug: render_effects
    info:
      en: |-
        ```hsc
        (<void> render_effects <boolean>)
        (render_effects true)
        (render_effects false)
        ```
        Render game effects if `true`
  - slug: render_lights
    info:
      en: |-
        ```hsc
        (<boolean> render_lights <boolean>)
        (render_lights true)
        (render_lights false)
        ```
        Enables/disables dynamic lights
  - slug: scenery_animation_start
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_start <scenery> <animation_graph> <string>)
        (scenery_animation_start fighter_clouds "cinematics\animations\h_fighter\x70\x70" "x70_3")
        ```
        Starts a custom animation playing on a piece of scenery.
  - slug: scenery_animation_start_at_frame
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_start_at_frame <scenery> <animation_graph> <string> <short>)
        (scenery_animation_start_at_frame fighter_launch "cinematics\animations\h_fighter\x70\x70" "x70_2" 100)
        ```
        Starts a custom animation playing on a piece of scenery at a specific frame.
  - slug: scenery_get_animation_time
    info:
      en: |-
        ```hsc
        (<short> scenery_get_animation_time <scenery>)
        (scenery_get_animation_time fighter_launch)
        ```
        Returns the number of ticks/frames remaining in a custom animation
        (or zero, if the animation is over). This function intentionally returns
        a value **2 frames lower** than the actual remaining frame count so scripts
        waiting for the animation to end can do something before it's over.
  - slug: screenshot_cubemap
    info:
      en: |-
        ```hsc
        (<void> screenshot_cubemap <string>)
        ```
        Takes a cubemap screenshot from the camera's point of view and saves as `<name>.tif`.
        It can then be used to import a cubemap bitmap tag.
    tags:
      - added_in_mcc
  - slug: script_doc
    info:
      en: |-
        ```hsc
        (<void> script_doc)
        ```
        Saves a file called hs_doc.txt with parameters for all script commands.
        In the [H1A-EK](~h1-ek) this also includes external globals at the end of the file.
  - slug: script_recompile
    info:
      en: |-
        ```hsc
        (<void> script_recompile)
        ```
        Recompiles scripts
  - slug: script_screen_effect_set_value
    info:
      en: |-
        ```hsc
        (<void> script_screen_effect_set_value <short> <real>)
        ```
        Sets a screen effect script value
  - slug: set_digital_forward_throttle
    info:
      en: |-
        ```hsc
        (set_digital_forward_throttle <short> <real>)
        ```
        Sets the amount of forward throttle applied by digital device stimuli
    context: Gearbox only
  - slug: set_digital_pitch_increment
    info:
      en: |-
        ```hsc
        (set_digital_pitch_increment <short> <real>)
        ```
        Sets the increment in pitch applied by digital device stimuli
    context: Gearbox only
  - slug: set_digital_strafe_throttle
    info:
      en: |-
        ```hsc
        (set_digital_strafe_throttle <short> <real>)
        ```
        Sets the amount of strafe throttle applied by digital device stimuli
    context: Gearbox only
  - slug: set_digital_yaw_increment
    info:
      en: |-
        ```hsc
        (set_digital_yaw_increment <short> <real>)
        ```
        Sets the increment in yaw applied by digital device stimuli
    context: Gearbox only
  - slug: set_gamepad_forward_threshold
    info:
      en: >-
        ```hsc

        (set_gamepad_forward_threshold <short> <real>)

        ```

        Sets the threshold beyond which gamepad movement is full forward
        throttle
    context: Gearbox only
  - slug: set_gamepad_pitch_scale
    info:
      en: |-
        ```hsc
        (set_gamepad_pitch_scale <short> <real>)
        ```
        Sets the scale for gamepad control of pitch
    context: Gearbox only
  - slug: set_gamepad_strafe_threshold
    info:
      en: >-
        ```hsc

        (set_gamepad_strafe_threshold <short> <real>)

        ```

        Sets the threshold beyond which gamepad movement is full strafe
        throttle
    context: Gearbox only
  - slug: set_gamepad_yaw_scale
    info:
      en: |-
        ```hsc
        (set_gamepad_yaw_scale <short> <real>)
        ```
        Sets the scale for gamepad control of yaw
    context: Gearbox only
  - slug: set_gamma
    info:
      en: |-
        ```hsc
        (<void> set_gamma <long>)
        (set_gamma 200)
        ```
        Set the gamma. Removed in H1A.
  - slug: set_mouse_forward_threshold
    info:
      en: >-
        ```hsc

        (set_mouse_forward_threshold <short> <real>)

        ```

        Sets the threshold beyond which mouse movement is full forward
        throttle
    context: Gearbox only
  - slug: set_mouse_pitch_scale
    info:
      en: |-
        ```hsc
        (set_mouse_pitch_scale <short> <real>)
        ```
        Sets the scale for mouse control of pitch
    context: Gearbox only
  - slug: set_mouse_strafe_threshold
    info:
      en: |-
        ```hsc
        (set_mouse_strafe_threshold <short> <real>)
        ```
        Sets the threshold beyond which mouse movement is full strafe throttle
    context: Gearbox only
  - slug: set_mouse_yaw_scale
    info:
      en: |-
        ```hsc
        (set_mouse_yaw_scale <short> <real>)
        ```
        Sets the scale for mouse control of yaw
    context: Gearbox only
  - slug: set_pitch_rate
    info:
      en: |-
        ```hsc
        (<void> set_pitch_rate <short> <real>)
        ```
        Sets the yaw rate for the given player number
  - slug: set_yaw_rate
    info:
      en: |-
        ```hsc
        (<void> set_yaw_rate <short> <real>)
        ```
        Sets the yaw rate for the given player number
  - slug: show_hud
    info:
      en: |-
        ```hsc
        (<boolean> show_hud <boolean>)
        (show_hud true)
        (show_hud false)
        ```
        Shows or hides the hud
  - slug: show_hud_help_text
    info:
      en: |-
        ```hsc
        (<boolean> show_hud_help_text <boolean>)
        (show_hud_help_text true)
        (show_hud_help_text false)
        ```
        Shows or hides the hud help text
  - slug: show_hud_timer
    info:
      en: |-
        ```hsc
        (<void> show_hud_timer <boolean>)
        (show_hud_timer true)
        (show_hud_timer false)
        ```
        Displays the hud timer
  - slug: show_player_update_stats
    info:
      en: |-
        ```hsc
        (show_player_update_stats)

        ```
        Shows update history playback stats
    context: Gearbox only
  - slug: sound_cache_dump_to_file
    info:
      en: |
        ```hsc
        (<void> sound_cache_dump_to_file)
        ```
  - slug: sound_cache_flush
    info:
      en: |
        ```hsc
        (<void> sound_cache_flush)
        ```
  - slug: sound_class_set_gain
    info:
      en: >-
        ```hsc

        (<void> sound_class_set_gain <string> <real> <short>)

        ```

        Changes the gain on the specified sound class(es) to the specified game
        over the specified number of ticks.
  - slug: sound_eax_enabled
    info:
      en: |-
        ```hsc
        (<boolean> sound_eax_enabled)
        ```
        Returns true if EAX extensions are enabled
  - slug: sound_enable
    info:
      en: |-
        ```hsc
        (<void> sound_enable <boolean>)
        (sound_enable true)
        (sound_enable false)
        ```
        Enables or disables all sound
  - slug: sound_enable_eax
    info:
      en: |-
        ```hsc
        (<void> sound_enable_eax <boolean>)
        (sound_enable_eax true)
        (sound_enable_eax false)
        ```
        Enable or disable EAX extensions
  - slug: sound_enable_hardware
    info:
      en: |-
        ```hsc
        (<void> sound_enable_hardware <boolean> <boolean>)
        ```
        Enable or disable hardware sound buffers
  - slug: sound_get_effects_gain
    info:
      en: |-
        ```hsc
        (<real> sound_get_effects_gain)
        ```
        Returns the game's effects gain
  - slug: sound_get_gain
    info:
      en: |-
        ```hsc
        (<real> sound_get_gain <string>)
        ```
        Absolutely do not use this either
  - slug: sound_get_master_gain
    info:
      en: |-
        ```hsc
        (<real> sound_get_master_gain)
        ```
        Returns the game's master gain
  - slug: sound_get_music_gain
    info:
      en: |-
        ```hsc
        (<real> sound_get_music_gain)
        ```
        Returns the game's music gain
  - slug: sound_get_supplementary_buffers
    info:
      en: |-
        ```hsc
        (<short> sound_get_supplementary_buffers)
        ```
        Get the amount of supplementary buffers
  - slug: sound_impulse_predict
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_predict <sound> <boolean>)
        (sound_impulse_predict "sound\sfx\impulse\ting\ting" true)
        (sound_impulse_predict "sound\sfx\impulse\ting\ting" false)
        ```
        Loads an impulse sound into the sound cache ready for playback
  - slug: sound_impulse_start
    info:
      en: >-
        ```hsc

        (<void> sound_impulse_start <sound> <object> <real>)

        ```

        Plays an impulse sound from the specified source object (or "none"), with the specified scale. Note that the sound may
        not play under certain situations, like if its sound class
        is [_scripted_dialog_player_](~sound#tag-field-sound-class-scripted-dialog-player)
        and the player is dead.
  - slug: sound_impulse_stop
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_stop <sound>)
        ```
        Stops the specified impulse sound
  - slug: sound_impulse_time
    info:
      en: |-
        ```hsc
        (<long> sound_impulse_time <sound>)
        ```
        Returns the time remaining for the specified impulse sound
  - slug: sound_looping_predict
    info:
      en: |
        ```hsc
        (<void> sound_looping_predict <looping_sound>)
        ```
  - slug: sound_looping_set_alternate
    info:
      en: >-
        ```hsc

        (<void> sound_looping_set_alternate <looping_sound> <boolean>)

        ```

        Enables or disables the alternate loop/alternate end for a looping sound
  - slug: sound_looping_set_scale
    info:
      en: >-
        ```hsc

        (<void> sound_looping_set_scale <looping_sound> <real>)

        ```

        Changes the scale of the sound (which should affect the volume) within the
        range 0 to 1
  - slug: sound_looping_start
    info:
      en: >-
        ```hsc

        (<void> sound_looping_start <looping_sound> <object> <real>)

        ```

        Plays a looping sound from the specified source object (or "none"), with
        the specified scale
  - slug: sound_looping_stop
    info:
      en: |-
        ```hsc
        (<void> sound_looping_stop <looping_sound>)
        ```
        Stops the specified looping sound
  - slug: sound_set_effects_gain
    info:
      en: |-
        ```hsc
        (<void> sound_set_effects_gain <real>)
        (sound_set_effects_gain 2.0)
        ```
        Set the game's effects gain
  - slug: sound_set_env
    info:
      en: |-
        ```hsc
        (<void> sound_set_env <short>)
        (sound_set_env 1)
        ```
        Change environment preset
  - slug: sound_set_factor
    info:
      en: |-
        ```hsc
        (<void> sound_set_factor <real>)
        ```
        Set the DSound factor value
  - slug: sound_set_gain
    info:
      en: |-
        ```hsc
        (<void> sound_set_gain <string> <real>)
        ```
        Absolutely do not use this
  - slug: sound_set_master_gain
    info:
      en: |-
        ```hsc
        (<void> sound_set_master_gain <real>)
        (sound_set_master_gain 0.5)
        ```
        Set the game's master gain
  - slug: sound_set_music_gain
    info:
      en: |-
        ```hsc
        (<void> sound_set_music_gain <real>)
        (sound_set_music_gain 0.5)
        ```
        Set the game's music gain. This should be in the range 0-1. Setting it
        outside this range will crash Standalone.
  - slug: sound_set_rolloff
    info:
      en: |-
        ```hsc
        (<void> sound_set_rolloff <real>)
        ```
        Set the DSound rolloff value
  - slug: sound_set_supplementary_buffers
    info:
      en: |-
        ```hsc
        (<void> sound_set_supplementary_buffers <short> <boolean>)
        ```
        Set the amount of supplementary buffers
  - slug: structure_bsp_index
    info:
      en: |-
        ```hsc
        (<short> structure_bsp_index)
        ```
        Returns the current structure bsp index
  - slug: structure_lens_flares_place
    info:
      en: |-
        ```hsc
        (<void> structure_lens_flares_place)
        ```
        Places lens flares in the structure bsp
  - slug: sv_ban_penalty
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_ban_penalty [(#)(m,h,d), 0=infinite])
        ```
        Specify up to 4 ban times for repeat ban/TK offenders.
    context: Gearbox only
  - slug: sv_ban
    tags:
      - server
    info:
      en: >-
        ```hsc

        (sv_ban <player index or name> [duration(m,h,d)])

        ```

        **(Server Only)** The given player is kicked and added to
        `banned.txt`. Use `sv_players` to find the player's index. You can
        also specify an optional duration for timed ban. Use 0 to follow
        `sv_ban_penalty` rules.
    context: Gearbox only
  - slug: sv_banlist
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_banlist)

        ```
        Print a list of banned players
    context: Gearbox only
  - slug: sv_banlist_file
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_banlist_file [alphanumeric banlist file suffix])
        ```
        Sets and opens the file to be used for the player ban list.
    context: Gearbox only
  - slug: sv_ban
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_ban [player # or name] opt:[duration (#)(m,h,d)])
        ```
        <Server Only> Player is kicked and added to banned.txt.  Use sv_players to find the index.Specify optional duration for timed ban.  Use 0 to follow sv_ban_penalty rules.
    context: Gearbox only
  - slug: sv_end_game
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_end_game)

        ```
        End the current game
    context: Gearbox only
  - slug: sv_friendly_fire
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_friendly_fire ["0" = defaults, "1" = off, "2" = shields, "3" = on])
        ```
        Use to provide a global override for the gametype friendly fire setting.
    context: Gearbox only
  - slug: sv_gamelist
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_gamelist [substring])
        ```
        Display a list of game types, matching an optional substring.
    context: Gearbox only
  - slug: sv_get_player_action_queue_length
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_get_player_action_queue_length <string>)
        ```
        Displays the action queue length for the specified player.
    context: Gearbox only
  - slug: sv_kick
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_kick <player index or name>)
        (sv_kick "Micro$oft")
        ```
        **(Server Only)** Kicks the specified player from the server
    context: Gearbox only
  - slug: sv_log_echo_chat
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_log_echo_chat [preference])
        ```
        Enables or disbles chat echo to the console. Set the preference to 0to disable chat echo, or 1 to enable chat echo.If the preference is not specified, displays the current preference.
    context: Gearbox only
  - slug: sv_log_enabled
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_log_enabled ["1" to enable, "0" to disable])
        ```
        Enables or disables server logging. If 0/1 is not given, displays thecurrent logging status.
    context: Gearbox only
  - slug: sv_log_file
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_log_file [log file name])
        ```
        Sets the server log file name. If no name is given, displays thecurrent log file name.
    context: Gearbox only
  - slug: sv_log_note
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_log_note <string>)
        ```
        Leave a note in the server log
    context: Gearbox only
  - slug: sv_log_rotation_threshold
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_log_rotation_threshold [threshold in kilobytes])
        ```
        Sets the log rotation threshold. When a log file's size (in kilobytes) exceedsthis number, it will be rotated. Set to 0 to disable log rotation.If the threshold is not specified, displays the current threshold.
    context: Gearbox only
  - slug: sv_map
    tags:
      - server
    info:
      en: >-
        ```hsc

        (<void> sv_map <string> <string>)

        (sv_map bloodgulch slayer)

        ```

        **(Server Only)** Usage: `sv_map <mapname> <variantname>`
        
        Aborts the current game and playlist, and starts the specified game mode on the specified
        map.
    context: Gearbox only
  - slug: sv_map_next
    tags:
      - server
    info:
      en: >-
        ```hsc

        (sv_map_next)


        ```

        **(Server Only)** Abort the current game and begin the next game in
        the playlist
    context: Gearbox only
  - slug: sv_map_reset
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_map_reset)

        ```
        **(Server Only)** Reset the current game
    context: Gearbox only
  - slug: sv_mapcycle
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_mapcycle)

        ```
        Print the contents of the currently loaded mapcycle file
    context: Gearbox only
  - slug: sv_mapcycle_add
    tags:
      - server
    info:
      en: >-
        ```hsc

        (sv_mapcycle_add <string> <string>)

        ```

        Usage: `sv_mapcycle_add <mapname> <variantname>`
        
        Add a new game to the end of the mapcycle file
    context: Gearbox only
  - slug: sv_mapcycle_begin
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_mapcycle_begin)

        ```
        Restart or begin playing the currently loaded mapcycle file
    context: Gearbox only
  - slug: sv_mapcycle_del
    tags:
      - server
    info:
      en: >-
        ```hsc

        (sv_mapcycle_del <long>)

        ```

        Usage: `sv_mapcycle_del <index>`
        
        Removes the game at `<index>`. Will not affect running games.
    context: Gearbox only
  - slug: sv_maplist
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_maplist [substring])
        ```
        Display a list of maps, matching an optional substring.
    context: Gearbox only
  - slug: sv_maxplayers
    tags:
      - server
    info:
      en: >-
        ```hsc

        (sv_maxplayers [short])

        (sv_maxplayers 10)

        ```

        Sets the maximum number of players (between 1 and 16). If no value is
        given, displays the current value.
    context: Gearbox only
  - slug: sv_motd
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_motd [motd file name])
        ```
        Sets the server message of the day file name. If no name is given, displays thecurrent motd file name. Set to "" to turn motd off.
    context: Gearbox only
  - slug: sv_name
    tags:
      - server
    info:
      en: >-
        ```hsc

        (sv_name [name])

        (sv_name)

        (sv_name "yousuck")

        ```

        Sets the name of the server. If no name is given, displays the current
        name.
    context: Gearbox only
  - slug: sv_parameters_dump
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_parameters_dump)

        ```
        Dumps out the local parameter configuration to `parameters.cfg` file
    context: Gearbox only
  - slug: sv_parameters_reload
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_parameters_reload)

        ```
        **(Server Only)** Reloads the `parameters.cfg` file
    context: Gearbox only
  - slug: sv_password
    tags:
      - server
    info:
      en: >-
        ```hsc

        (sv_password [password])

        (sv_password)

        (sv_password "1234")

        ```

        Sets the server password. If no password is given, displays the
        current password.
    context: Gearbox only
  - slug: sv_players
    tags:
      - server
    info:
      en: >-
        ```hsc

        (sv_players)


        ```

        **(Server Only)** Prints (*not* returns) a list of players in the
        current game
    context: Gearbox only
  - slug: sv_rcon_password
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_rcon_password [remote console password])
        ```
        Sets the server remote console password. If no password is given, displays thecurrent password. Enter "" to disable rcon.
    context: Gearbox only
  - slug: sv_say
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_say <string>)
        ```
        <Server Only> Usage: "sv_say <message>"Send a message to users
    context: Gearbox only
  - slug: sv_single_flag_force_reset
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_single_flag_force_reset [boolean])
        ```
        Force the flag to reset in single flag CTF games when the timer expires, even if held by a player.If not specified, displays the current value.
    context: Gearbox only
  - slug: sv_status
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_status)

        ```
        Shows status of the server
    context: Gearbox only
  - slug: sv_timelimit
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_timelimit ["-1" = default, "0" = infinite, <time in minutes>])
        ```
        Use to provide a global override for the gametype timelimit setting.
    context: Gearbox only
  - slug: sv_tk_cooldown
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_tk_cooldown [time (#)(s,m)])
        ```
        Specify a TK point cooldown period, after which players lose a TK point.
    context: Gearbox only
  - slug: sv_tk_grace
    tags:
      - server
    info:
      en: |-
        ```hsc
        (sv_tk_grace [time (#)(s,m)])
        ```
        Specify the grace period for TK during which you don't get a TK point.
    context: Gearbox only
  - slug: sv_unban
    tags:
      - server
    info:
      en: >-
        ```hsc

        (sv_unban <long>)

        (sv_unban 1)

        ```

        **(Server Only)** Usage: `sv_unban <index>`
        
        Removes player at index in the banlist. Use `sv_banlist` to find the index.
    context: Gearbox only
  - slug: switch_bsp
    info:
      en: |-
        ```hsc
        (<void> switch_bsp <short>)
        (switch_bsp 0)
        ```
        Switches to a different structure bsp
  - slug: TestPrintBool
    info:
      en: |-
        ```hsc
        (<void> TestPrintBool <string> <boolean>)
        ```
        Prints the specified boolean with the format `<string> = <boolean>` to the Shell.
        Currently this does not work.
    context: H1A only
  - slug: TestPrintReal
    info:
      en: |-
        ```hsc
        (<void> TestPrintReal <string> <real>)
        ```
        Prints the specified real with the format `<string> = <real>` to the Shell.
        Currently this does not work.
    context: H1A only
  - slug: texture_cache_flush
    info:
      en: |-
        ```hsc
        (texture_cache_flush)

        ```
        Don't make me kick your ass
    context: Gearbox only
  - slug: thread_sleep
    info:
      en: |-
        ```hsc
        (thread_sleep <long>)
        ```
        Sleeps the calling thread for the specified number of ms.
    context: Gearbox only
  - slug: time_code_reset
    info:
      en: |-
        ```hsc
        (<void> time_code_reset)
        ```
        Resets the time code timer
  - slug: time_code_show
    info:
      en: |-
        ```hsc
        (<void> time_code_show <boolean>)
        (time_code_show true)
        (time_code_show false)
        ```
        Shows the time code timer
  - slug: time_code_start
    info:
      en: |-
        ```hsc
        (<void> time_code_start <boolean>)
        (time_code_start true)
        (time_code_start false)
        ```
        Starts/stops the time code timer
  - slug: track_remote_player_position_updates
    info:
      en: |-
        ```hsc
        (track_remote_player_position_updates <string>)
        ```
        Sets the name of the remote player whose position update are to be tracked.
    context: Gearbox only
  - slug: ui_widget_show_path
    info:
      en: |
        ```hsc
        (<void> ui_widget_show_path <boolean>)
        (ui_widget_show_path true)
        (ui_widget_show_path false)
        ```
  - slug: unbind
    info:
      en: |-
        ```hsc
        (<void> unbind <string> <string>)
        ```
        Unbinds an input device/button combination
  - slug: unit
    info:
      en: |-
        ```hsc
        (<unit> unit <object>)
        (unit (list_get (players) 0))
        ```
        Converts an object to a unit
  - slug: unit_aim_without_turning
    info:
      en: |-
        ```hsc
        (<void> unit_aim_without_turning <unit> <boolean>)
        ```
        Allows a unit to aim in place without turning
  - slug: unit_can_blink
    info:
      en: |-
        ```hsc
        (<void> unit_can_blink <unit> <boolean>)
        ```
        Allows a unit to blink or not (units never blink when they are dead)
  - slug: unit_close
    info:
      en: |-
        ```hsc
        (<void> unit_close <unit>)
        ```
        Closes the hatches on a given unit
  - slug: unit_custom_animation_at_frame
    info:
      en: >-
        ```hsc

        (<boolean> unit_custom_animation_at_frame <unit> <animation_graph> <string>
        <boolean> <short>)

        ```

        Starts a custom animation playing on a unit at a specific frame index (interpolates
        into animation if next to last parameter is `true`).
  - slug: unit_doesnt_drop_items
    info:
      en: >-
        ```hsc

        (<void> unit_doesnt_drop_items <object_list>)

        (unit_doesnt_drop_items (players))

        ```

        Prevents any of the given units from dropping weapons or grenades when they
        die
  - slug: unit_enter_vehicle
    info:
      en: |-
        ```hsc
        (<void> unit_enter_vehicle <unit> <vehicle> <string>)
        (unit_enter_vehicle (player0) warthog_mp_2 "gunner")
        ```
        Puts the specified unit in the specified vehicle (in the named seat)
  - slug: unit_exit_vehicle
    info:
      en: |-
        ```hsc
        (<void> unit_exit_vehicle <unit>)
        ```
        Makes a unit exit its vehicle
  - slug: unit_get_current_flashlight_state
    info:
      en: |-
        ```hsc
        (<boolean> unit_get_current_flashlight_state <unit>)
        (unit_get_current_flashlight_state (player0))
        ```
        Gets the unit's current flashlight state
  - slug: unit_get_custom_animation_time
    info:
      en: |-
        ```hsc
        (<short> unit_get_custom_animation_time <unit>)
        (unit_get_custom_animation_time chief_insertion)
        ```
        Returns the number of ticks remaining in a unit's custom animation
        (or zero, if the animation is over). This function intentionally returns
        a value **2 frames lower** than the actual remaining frame count so scripts
        waiting for the animation to end can do something before it's over.
  - slug: unit_get_health
    info:
      en: >-
        ```hsc

        (<real> unit_get_health <unit>)

        (unit_get_health (player0))

        ```

        Returns the health of the given unit as a `real` between 0 and 1]. Returns
        -1 if the unit does not exist.
  - slug: unit_get_shield
    info:
      en: >-
        ```hsc

        (<real> unit_get_shield <unit>)

        (unit_get_shield (player0))

        ```

        Returns the shield of the given unit as a `real` between 0 and 1. Returns
        -1 if the unit does not exist.
  - slug: unit_get_total_grenade_count
    info:
      en: >-
        ```hsc

        (<short> unit_get_total_grenade_count <unit>)

        (unit_get_total_grenade_count (player0))

        ```

        Returns the total number of grenades for the given unit, or 0 if the unit
        does not exist.
  - slug: unit_has_weapon
    info:
      en: >-
        ```hsc

        (<boolean> unit_has_weapon <unit> <object_definition>)

        (unit_has_weapon (player0) plasma_cannon)

        ```

        Returns `true` if the <unit> has <object> as a weapon, `false` otherwise
  - slug: unit_has_weapon_readied
    info:
      en: >-
        ```hsc

        (<boolean> unit_has_weapon_readied <unit> <object_definition>)

        (unit_has_weapon_readied (player0) plasma_cannon)

        ```

        Returns `true` if the <unit> has <object> as the primary weapon, `false`
        otherwise
  - slug: unit_impervious
    info:
      en: >-
        ```hsc

        (<void> unit_impervious <object_list> <boolean>)

        (unit_impervious (players) true)

        (unit_impervious (players) false)

        ```

        Prevents any of the given units from being knocked around or playing ping
        animations
  - slug: unit_is_playing_custom_animation
    info:
      en: |-
        ```hsc
        (<boolean> unit_is_playing_custom_animation <unit>)
        ```
        Returns `true` if the given unit is still playing a custom animation
  - slug: unit_kill
    info:
      en: |-
        ```hsc
        (<void> unit_kill <unit>)
        ```
        Kills a given unit, no saving throw. This will crash pre-H1A MCC versions
        of the game if the unit doesn't exist.
  - slug: unit_kill_silent
    info:
      en: >-
        ```hsc

        (<void> unit_kill_silent <unit>)

        ```

        Kills a given unit silently (doesn't make them play their normal death animation
        or sound). This will crash pre-H1A MCC versions of the game if the unit doesn't exist.
  - slug: unit_open
    info:
      en: |-
        ```hsc
        (<void> unit_open <unit>)
        ```
        Opens the hatches on the given unit
  - slug: unit_set_current_vitality
    info:
      en: |-
        ```hsc
        (<void> unit_set_current_vitality <unit> <real> <real>)
        ```
        Sets a unit's current body and shield vitality
  - slug: unit_set_desired_flashlight_state
    info:
      en: |-
        ```hsc
        (<void> unit_set_desired_flashlight_state <unit> <boolean>)
        (unit_set_desired_flashlight_state (player0) true)
        (unit_set_desired_flashlight_state (player0) false)
        ```
        Turns the unit's flashlight on or off
  - slug: unit_set_emotion
    info:
      en: >-
        ```hsc

        (<void> unit_set_emotion <unit> <short>)

        ```

        Sets a unit's facial expression (-1 is none, other values depend on unit)
  - slug: unit_set_emotion_animation
    info:
      en: |-
        ```hsc
        (<void> unit_set_emotion_animation <unit> <string>)
        ```
        Sets the emotion animation to be used for the given unit
  - slug: unit_set_enterable_by_player
    info:
      en: |-
        ```hsc
        (<void> unit_set_enterable_by_player <unit> <boolean>)
        (unit_set_enterable_by_player warthog_mp_3 true)
        (unit_set_enterable_by_player warthog_mp_3 false)
        ```
        Can be used to prevent the player from entering a vehicle
  - slug: unit_set_maximum_vitality
    info:
      en: |-
        ```hsc
        (<void> unit_set_maximum_vitality <unit> <real> <real>)
        ```
        Sets a unit's maximum body and shield vitality
  - slug: unit_set_seat
    info:
      en: |-
        ```hsc
        (<void> unit_set_seat <unit> <string>)
        (unit_set_seat (player0) "driver")
        ```
        This unit will assume the named seat
  - slug: unit_solo_player_integrated_night_vision_is_active
    info:
      en: >-
        ```hsc

        (<boolean> unit_solo_player_integrated_night_vision_is_active)

        ```

        Returns whether the night-vision mode could be activated via the flashlight
        button
  - slug: unit_stop_custom_animation
    info:
      en: |-
        ```hsc
        (<void> unit_stop_custom_animation <unit>)
        ```
        Stops the custom animation running on the given unit
  - slug: unit_suspended
    info:
      en: |-
        ```hsc
        (<void> unit_suspended <unit> <boolean>)
        (unit_suspended (player0) true)
        (unit_suspended (player0) false)
        ```
        Stops gravity from working on the given unit
  - slug: units_set_current_vitality
    info:
      en: |-
        ```hsc
        (<void> units_set_current_vitality <object_list> <real> <real>)
        (units_set_current_vitality (players) 75 75)
        ```
        Sets a group of units' current body and shield vitality
  - slug: units_set_desired_flashlight_state
    info:
      en: |-
        ```hsc
        (<void> units_set_desired_flashlight_state <object_list> <boolean>)
        (units_set_desired_flashlight_state (players) true)
        (units_set_desired_flashlight_state (players) false)
        ```
        Sets the units' desired flashlight state
  - slug: units_set_maximum_vitality
    info:
      en: |-
        ```hsc
        (<void> units_set_maximum_vitality <object_list> <real> <real>)
        (units_set_maximum_vitality (players) 75 75)
        ```
        Sets a group of units' maximum body and shield vitality
  - slug: vehicle_driver
    info:
      en: |-
        ```hsc
        (<unit> vehicle_driver <unit>)
        (vehicle_driver the_ghost)
        ```
        Returns the driver of a vehicle
  - slug: vehicle_gunner
    info:
      en: |-
        ```hsc
        (<unit> vehicle_gunner <unit>)
        (vehicle_gunner the_warthog)
        ```
        Returns the gunner of a vehicle
  - slug: vehicle_hover
    tags:
      - physics-engine
    info:
      en: >-
        ```hsc

        (<void> vehicle_hover <vehicle> <boolean>)

        (vehicle_hover "vehicles\warthog\warthog" true)

        (vehicle_hover "vehicles\warthog\warthog" false)

        ```

        Stops the vehicle from running real physics and runs fake hovering physics
        instead
  - slug: vehicle_load_magic
    info:
      en: >-
        ```hsc

        (<short> vehicle_load_magic <unit> <string> <object_list>)

        (vehicle_load_magic pelican_1 "" (players))

        ```

        Makes a list of units (named or by encounter) magically get into a vehicle,
        in the substring-specified seats (e.g. "CD-passenger". Empty string matches
        all seats).
  - slug: vehicle_riders
    info:
      en: |-
        ```hsc
        (<object_list> vehicle_riders <unit>)
        (vehicle_riders the_tanks)
        ```
        Returns a list of all riders in a vehicle
  - slug: vehicle_test_seat
    info:
      en: |-
        ```hsc
        (<boolean> vehicle_test_seat <vehicle> <string> <unit>)
        (vehicle_test_seat example_ghost "G-driver" (player0))
        ```
        Tests whether the named seat has a specified unit in it.
        This accepts a seat label which is not case sensitive.
  - slug: vehicle_test_seat_list
    info:
      en: |-
        ```hsc
        (<boolean> vehicle_test_seat_list <vehicle> <string> <object_list>)
        (vehicle_test_seat_list warthog5 "W-driver" (players))
        ```
        Tests whether the named seat has an object in the object list.
        This accepts a seat label which is not case sensitive.
  - slug: vehicle_unload
    info:
      en: >-
        ```hsc

        (<short> vehicle_unload <unit> <string>)

        (vehicle_unload hog "W-driver")

        ```

        Makes units get out of a vehicle from the substring-specified seats (e.g.
        "CD-passenger". Empty string matches all seats). The seat label is not
        case sensitive.
  - slug: version
    info:
      en: |-
        ```hsc
        (<void> version)
        ```
        Prints the build version
  - slug: volume_teleport_players_not_inside
    info:
      en: >-
        ```hsc

        (<void> volume_teleport_players_not_inside <trigger_volume> <cutscene_flag>)

        (volume_teleport_players_not_inside hidden_trigger omgtelprot)

        ```

        Moves all players outside a specified trigger volume to a specified flag
  - slug: volume_test_object
    info:
      en: |-
        ```hsc
        (<boolean> volume_test_object <trigger_volume> <object>)
        (volume_test_object trig_volume1 (player0))
        ```
        Returns `true` if the specified object is within the specified volume
  - slug: volume_test_objects
    info:
      en: >-
        ```hsc

        (<boolean> volume_test_objects <trigger_volume> <object_list>)

        (volume_test_objects trig_volume2 (players))

        ```

        Returns `true` if any of the specified objects are within the specified
        volume
  - slug: volume_test_objects_all
    info:
      en: >-
        ```hsc

        (<boolean> volume_test_objects_all <trigger_volume> <object_list>)

        (volume_test_objects_all trig_volume2 (players))

        ```

        Returns `true` if all of the specified objects are within the specified
        volume

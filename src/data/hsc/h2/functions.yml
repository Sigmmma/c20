
functions:
  - slug: begin
    info:
      en: |-
        ```hsc
        (<passthrough> begin <expression(s)>)
        ```
        returns the last expression in a sequence after evaluating the sequence in order.
  - slug: begin_random
    info:
      en: |-
        ```hsc
        (<passthrough> begin_random <expression(s)>)
        ```
        evaluates the sequence of expressions in random order and returns the last value evaluated.
  - slug: if
    info:
      en: |-
        ```hsc
        (<passthrough> if <boolean> <then> [<else>])
        ```
        returns one of two values based on the value of a condition.
  - slug: cond
    info:
      en: |-
        ```hsc
        (<passthrough> cond (<boolean1> <result1>) [(<boolean2> <result2>) [...]])
        ```
        returns the value associated with the first true condition.
  - slug: set
    info:
      en: |-
        ```hsc
        (<passthrough> set <variable name> <expression>)
        ```
        set the value of a global variable.
  - slug: and
    info:
      en: |-
        ```hsc
        (<boolean> and <boolean(s)>)
        ```
        returns true if all specified expressions are true.
  - slug: or
    info:
      en: |-
        ```hsc
        (<boolean> or <boolean(s)>)
        ```
        returns true if any specified expressions are true.
  - slug: plus
    info:
      en: |-
        ```hsc
        (<real> + <number(s)>)
        ```
        returns the sum of all specified expressions.
  - slug: minus
    info:
      en: |-
        ```hsc
        (<real> - <number> <number>)
        ```
        returns the difference of two expressions.
  - slug: mult
    info:
      en: |-
        ```hsc
        (<real> * <number(s)>)
        ```
        returns the product of all specified expressions.
  - slug: div
    info:
      en: |-
        ```hsc
        (<real> / <number> <number>)
        ```
        returns the quotient of two expressions.
  - slug: min
    info:
      en: |-
        ```hsc
        (<real> min <number(s)>)
        ```
        returns the minimum of all specified expressions.
  - slug: max
    info:
      en: |-
        ```hsc
        (<real> max <number(s)>)
        ```
        returns the maximum of all specified expressions.
  - slug: eq
    info:
      en: |-
        ```hsc
        (<boolean> = <expression> <expression>)
        ```
        returns true if two expressions are equal
  - slug: ne
    info:
      en: |-
        ```hsc
        (<boolean> != <expression> <expression>)
        ```
        returns true if two expressions are not equal
  - slug: gt
    info:
      en: |-
        ```hsc
        (<boolean> > <number> <number>)
        ```
        returns true if the first number is larger than the second.
  - slug: lt
    info:
      en: |-
        ```hsc
        (<boolean> < <number> <number>)
        ```
        returns true if the first number is smaller than the second.
  - slug: ge
    info:
      en: |-
        ```hsc
        (<boolean> >= <number> <number>)
        ```
        returns true if the first number is larger than or equal to the second.
  - slug: le
    info:
      en: |-
        ```hsc
        (<boolean> <= <number> <number>)
        ```
        returns true if the first number is smaller than or equal to the second.
  - slug: sleep
    info:
      en: |-
        ```hsc
        (<void> sleep <short> [<script>])
        ```
        pauses execution of this script (or, optionally, another script) for the specified number of ticks.
  - slug: sleep_forever
    info:
      en: |-
        ```hsc
        (<void> sleep_forever [<script>])
        ```
        pauses execution of this script (or, optionally, another script) forever.
  - slug: sleep_until
    info:
      en: |-
        ```hsc
        (<void> sleep_until <boolean> [<short>])
        ```
        pauses execution of this script until the specified condition is true, checking once per second unless a different number of ticks is specified.
  - slug: wake
    info:
      en: |-
        ```hsc
        (<void> wake <script name>)
        ```
        wakes a sleeping script in the next update.
  - slug: inspect
    info:
      en: |-
        ```hsc
        (<void> inspect <expression>)
        ```
        prints the value of an expression to the screen for debugging purposes.
  - slug: unit
    info:
      en: |-
        ```hsc
        (<unit> unit <object>)
        ```
        converts an object to a unit.
  - slug: not
    info:
      en: |-
        ```hsc
        (<boolean> not <boolean>)
        ```
        returns the opposite of the expression.
  - slug: pin
    info:
      en: |-
        ```hsc
        (<real> pin <real> <real> <real>)
        ```
        returns the first value pinned between the second two
  - slug: print
    info:
      en: |-
        ```hsc
        (<void> print <string>)
        ```
        prints a string to the console.
  - slug: players
    info:
      en: |-
        ```hsc
        (<object_list> players)
        ```
        returns a list of the players
  - slug: kill_volume_enable
    info:
      en: |-
        ```hsc
        (<void> kill_volume_enable <trigger_volume>)
        ```
        enables a kill volume
  - slug: kill_volume_disable
    info:
      en: |-
        ```hsc
        (<void> kill_volume_disable <trigger_volume>)
        ```
        disables a kill volume
  - slug: volume_teleport_players_not_inside
    info:
      en: |-
        ```hsc
        (<void> volume_teleport_players_not_inside <trigger_volume> <cutscene_flag>)
        ```
        moves all players outside a specified trigger volume to a specified flag.
  - slug: volume_test_object
    info:
      en: |-
        ```hsc
        (<boolean> volume_test_object <trigger_volume> <object>)
        ```
        returns true if the specified object is within the specified volume.
  - slug: volume_test_objects
    info:
      en: |-
        ```hsc
        (<boolean> volume_test_objects <trigger_volume> <object_list>)
        ```
        returns true if any of the specified objects are within the specified volume. trigger volume must have been postprocessed
  - slug: volume_test_objects_all
    info:
      en: |-
        ```hsc
        (<boolean> volume_test_objects_all <trigger_volume> <object_list>)
        ```
        returns true if any of the specified objects are within the specified volume. trigger volume must have been postprocessed
  - slug: volume_return_objects
    info:
      en: |-
        ```hsc
        (<object_list> volume_return_objects <trigger_volume>)
        ```
        returns list of objects in volume or (max 128).
  - slug: volume_return_objects_by_type
    info:
      en: |-
        ```hsc
        (<object_list> volume_return_objects_by_type <trigger_volume> <long>)
        ```
        returns list of objects in volume or (max 128).
  - slug: list_get
    info:
      en: |-
        ```hsc
        (<object> list_get <object_list> <short>)
        ```
        returns an item in an object list.
  - slug: list_count
    info:
      en: |-
        ```hsc
        (<short> list_count <object_list>)
        ```
        returns the number of objects in a list
  - slug: list_count_not_dead
    info:
      en: |-
        ```hsc
        (<short> list_count_not_dead <object_list>)
        ```
        returns the number of objects in a list that aren't dead
  - slug: effect_new
    info:
      en: |-
        ```hsc
        (<void> effect_new <effect> <cutscene_flag>)
        ```
        starts the specified effect at the specified flag.
  - slug: effect_new_on_object_marker
    info:
      en: |-
        ```hsc
        (<void> effect_new_on_object_marker <effect> <object> <string_id>)
        ```
        starts the specified effect on the specified object at the specified marker.
  - slug: damage_new
    info:
      en: |-
        ```hsc
        (<void> damage_new <damage> <cutscene_flag>)
        ```
        causes the specified damage at the specified flag.
  - slug: damage_object
    info:
      en: |-
        ```hsc
        (<void> damage_object <damage> <object>)
        ```
        causes the specified damage at the specified object.
  - slug: damage_objects
    info:
      en: |-
        ```hsc
        (<void> damage_objects <damage> <object_list>)
        ```
        causes the specified damage at the specified object list.
  - slug: damage_players
    info:
      en: |-
        ```hsc
        (<void> damage_players <damage>)
        ```
        damages all players with the given damage effect
  - slug: object_create
    info:
      en: |-
        ```hsc
        (<void> object_create <object_name>)
        ```
        creates an object from the scenario.
  - slug: object_create_clone
    info:
      en: |-
        ```hsc
        (<void> object_create_clone <object_name>)
        ```
        creates an object, potentially resulting in multiple objects if it already exists.
  - slug: object_create_anew
    info:
      en: |-
        ```hsc
        (<void> object_create_anew <object_name>)
        ```
        creates an object, destroying it first if it already exists.
  - slug: object_create_containing
    info:
      en: |-
        ```hsc
        (<void> object_create_containing <string>)
        ```
        creates all objects from the scenario whose names contain the given substring.
  - slug: object_create_clone_containing
    info:
      en: |-
        ```hsc
        (<void> object_create_clone_containing <string>)
        ```
        creates clones for all objects from the scenario whose names contain the given substring.
  - slug: object_create_anew_containing
    info:
      en: |-
        ```hsc
        (<void> object_create_anew_containing <string>)
        ```
        creates anew all objects from the scenario whose names contain the given substring.
  - slug: object_destroy
    info:
      en: |-
        ```hsc
        (<void> object_destroy <object>)
        ```
        destroys an object.
  - slug: object_destroy_containing
    info:
      en: |-
        ```hsc
        (<void> object_destroy_containing <string>)
        ```
        destroys all objects from the scenario whose names contain the given substring.
  - slug: object_destroy_all
    info:
      en: |-
        ```hsc
        (<void> object_destroy_all)
        ```
        destroys all non player objects.
  - slug: object_destroy_type_mask
    info:
      en: |-
        ```hsc
        (<void> object_destroy_type_mask <long>)
        ```
        destroys all objects matching the type mask
  - slug: objects_delete_by_definition
    info:
      en: |-
        ```hsc
        (<void> objects_delete_by_definition <object_definition>)
        ```
        deletes all objects of type <definition>
  - slug: object_hide
    info:
      en: |-
        ```hsc
        (<void> object_hide <object> <boolean>)
        ```
        hides or shows the object passed in
  - slug: object_set_shadowless
    info:
      en: |-
        ```hsc
        (<void> object_set_shadowless <object> <boolean>)
        ```
        set/reset shadow castingness of object
  - slug: object_function_set
    info:
      en: |-
        ```hsc
        (<void> object_function_set <long> <real>)
        ```
        sets a global object function (0-3) to value
  - slug: object_set_function_variable
    info:
      en: |-
        ```hsc
        (<void> object_set_function_variable <object> <string_id> <real> <real>)
        ```
        sets funciton variable for sin-o-matic use
  - slug: object_clear_function_variable
    info:
      en: |-
        ```hsc
        (<void> object_clear_function_variable <object> <string_id>)
        ```
        clears one funciton variables for sin-o-matic use
  - slug: object_clear_all_function_variables
    info:
      en: |-
        ```hsc
        (<void> object_clear_all_function_variables <object>)
        ```
        clears all funciton variables for sin-o-matic use
  - slug: object_dynamic_simulation_disable
    info:
      en: |-
        ```hsc
        (<void> object_dynamic_simulation_disable <object> <boolean>)
        ```
        disabled dynamic simulation for this object (makes it fixed)
  - slug: object_set_phantom_power
    info:
      en: |-
        ```hsc
        (<void> object_set_phantom_power <object> <boolean>)
        ```
        sets phantom power to be latched at 1.0f or 0.0f
  - slug: object_wake_physics
    info:
      en: |-
        ```hsc
        (<void> object_wake_physics <object>)
        ```
        wakes physics of an object.  For example it would make an usupported crate fall
  - slug: object_set_ranged_attack_inhibited
    info:
      en: |-
        ```hsc
        (<void> object_set_ranged_attack_inhibited <object> <boolean>)
        ```
        FALSE prevents object from using ranged attack
  - slug: object_set_melee_attack_inhibited
    info:
      en: |-
        ```hsc
        (<void> object_set_melee_attack_inhibited <object> <boolean>)
        ```
        FALSE prevents object from using melee attack
  - slug: objects_dump_memory
    info:
      en: |-
        ```hsc
        (<void> objects_dump_memory)
        ```
        debugs object memory usage
  - slug: object_get_health
    info:
      en: |-
        ```hsc
        (<real> object_get_health <object>)
        ```
        returns the health \[0,1\] of the object, returns -1 if the object does not exist
  - slug: object_get_shield
    info:
      en: |-
        ```hsc
        (<real> object_get_shield <object>)
        ```
        returns the shield \[0,1\] of the object, returns -1 if the object does not exist
  - slug: object_set_shield_effect
    info:
      en: |-
        ```hsc
        (<void> object_set_shield_effect <object> <real> <real>)
        ```
        sets the shield response effect (not current shield amount) to a given value over the given number of seconds (cinematic use only, remember to call (object_set_shield_effect 0 0) after use!)
  - slug: object_set_physics
    info:
      en: |-
        ```hsc
        (<void> object_set_physics <object> <boolean>)
        ```
        prevents an object from running physics or colliding with any other objects
  - slug: object_get_parent
    info:
      en: |-
        ```hsc
        (<object> object_get_parent <object>)
        ```
        returns the parent of the given object
  - slug: objects_attach
    info:
      en: |-
        ```hsc
        (<void> objects_attach <object> <string_id> <object> <string_id>)
        ```
        attaches the second object to the first both strings can be empty
  - slug: object_at_marker
    info:
      en: |-
        ```hsc
        (<object> object_at_marker <object> <string_id>)
        ```
        returns the object attached to the marker of the given parent object
  - slug: objects_detach
    info:
      en: |-
        ```hsc
        (<void> objects_detach <object> <object>)
        ```
        detaches from the given parent object the given child object
  - slug: object_set_scale
    info:
      en: |-
        ```hsc
        (<void> object_set_scale <object> <real> <short>)
        ```
        sets the scale for a given object and interpolates over the given number of frames to achieve that scale
  - slug: object_set_velocity
    info:
      en: |-
        ```hsc
        (<void> object_set_velocity <object> <real>)
        ```
        Sets the (object-relative) forward velocity of the given object
  - slug: object_set_velocity
    info:
      en: |-
        ```hsc
        (<void> object_set_velocity <object> <real> <real> <real>)
        ```
        Sets the (object-relative) velocity of the given object
  - slug: object_set_deleted_when_deactivated
    info:
      en: |-
        ```hsc
        (<void> object_set_deleted_when_deactivated <object>)
        ```
        when this object deactivates it will be deleted
  - slug: object_copy_player_appearance
    info:
      en: |-
        ```hsc
        (<void> object_copy_player_appearance <object> <long>)
        ```
        copy appearance into object from player n (starts counting from 0)
  - slug: object_model_target_destroyed
    info:
      en: |-
        ```hsc
        (<boolean> object_model_target_destroyed <object> <string_id>)
        ```
        returns TRUE if the specified model target is destroyed
  - slug: object_model_targets_destroyed
    info:
      en: |-
        ```hsc
        (<short> object_model_targets_destroyed <object> <string_id>)
        ```
        returns TRUE if the specified model target is destroyed
  - slug: object_damage_damage_section
    info:
      en: |-
        ```hsc
        (<void> object_damage_damage_section <object> <string_id> <real>)
        ```
        applies damage to a damage section, causing all manner of effects/constraint breakage to occur
  - slug: object_cannot_die
    info:
      en: |-
        ```hsc
        (<void> object_cannot_die <object> <boolean>)
        ```
        Set whether the object can die from damage or not (as opposed to by scripting)
  - slug: object_vitality_pinned
    info:
      en: |-
        ```hsc
        (<boolean> object_vitality_pinned <object>)
        ```
        returns TRUE if the object's vitality is currently pinned at some minimum value because it cannot die.
  - slug: garbage_collect_now
    info:
      en: |-
        ```hsc
        (<void> garbage_collect_now)
        ```
        causes all garbage objects except those visible to a player to be collected immediately
  - slug: garbage_collect_unsafe
    info:
      en: |-
        ```hsc
        (<void> garbage_collect_unsafe)
        ```
        forces all garbage objects to be collected immediately, even those visible to a player (dangerous!)
  - slug: garbage_collect_multiplayer
    info:
      en: |-
        ```hsc
        (<void> garbage_collect_multiplayer)
        ```
        runs multiplayer garbage collection
  - slug: object_cannot_take_damage
    info:
      en: |-
        ```hsc
        (<void> object_cannot_take_damage <object_list>)
        ```
        prevents an object from taking damage
  - slug: object_can_take_damage
    info:
      en: |-
        ```hsc
        (<void> object_can_take_damage <object_list>)
        ```
        allows an object to take damage again
  - slug: object_cinematic_lod
    info:
      en: |-
        ```hsc
        (<void> object_cinematic_lod <object> <boolean>)
        ```
        makes an object use the highest lod for the remainder of the levels' cutscenes.
  - slug: object_cinematic_collision
    info:
      en: |-
        ```hsc
        (<void> object_cinematic_collision <object> <boolean>)
        ```
        makes an object not collide with other cinematic collision objects.
  - slug: object_cinematic_visibility
    info:
      en: |-
        ```hsc
        (<void> object_cinematic_visibility <object> <boolean>)
        ```
        makes an object bypass visibility and always render during cinematics.
  - slug: object_uses_cinematic_lighting
    info:
      en: |-
        ```hsc
        (<void> object_uses_cinematic_lighting <object> <boolean>)
        ```
        makes an object use the cinematic directional and ambient lights instead of sampling the lightmap.
  - slug: cinematic_lighting_set_primary_light
    info:
      en: |-
        ```hsc
        (<void> cinematic_lighting_set_primary_light <real> <real> <real> <real> <real>)
        ```
        sets the pitch, yaw, and color (red, green, blue) of the cinematic shadowing diffuse and specular directional light.
  - slug: cinematic_lighting_set_secondary_light
    info:
      en: |-
        ```hsc
        (<void> cinematic_lighting_set_secondary_light <real> <real> <real> <real> <real>)
        ```
        sets the pitch, yaw, and color (red, green, blue) of the cinematic non-shadowing diffuse directional light.
  - slug: cinematic_lighting_set_ambient_light
    info:
      en: |-
        ```hsc
        (<void> cinematic_lighting_set_ambient_light <real> <real> <real>)
        ```
        sets the color (red, green, blue) of the cinematic ambient light.
  - slug: objects_predict
    info:
      en: |-
        ```hsc
        (<void> objects_predict <object_list>)
        ```
        loads textures/geometry/sounds necessary to present objects that are about to come on-screen
  - slug: objects_predict_high
    info:
      en: |-
        ```hsc
        (<void> objects_predict_high <object_list>)
        ```
        loads textures/geometry/sounds necessary to present objects that are about to come on-screen
  - slug: objects_predict_low
    info:
      en: |-
        ```hsc
        (<void> objects_predict_low <object_list>)
        ```
        loads textures/geometry/sounds necessary to present objects that are about to come on-screen
  - slug: object_type_predict_high
    info:
      en: |-
        ```hsc
        (<void> object_type_predict_high <object_definition>)
        ```
        loads textures necessary to draw an object that's about to come on-screen.
  - slug: object_type_predict_low
    info:
      en: |-
        ```hsc
        (<void> object_type_predict_low <object_definition>)
        ```
        loads textures necessary to draw an object that's about to come on-screen.
  - slug: object_type_predict
    info:
      en: |-
        ```hsc
        (<void> object_type_predict <object_definition>)
        ```
        loads textures necessary to draw an object that's about to come on-screen.
  - slug: object_teleport
    info:
      en: |-
        ```hsc
        (<void> object_teleport <object> <cutscene_flag>)
        ```
        moves the specified object to the specified flag.
  - slug: object_set_facing
    info:
      en: |-
        ```hsc
        (<void> object_set_facing <object> <cutscene_flag>)
        ```
        turns the specified object in the direction of the specified flag.
  - slug: object_set_shield
    info:
      en: |-
        ```hsc
        (<void> object_set_shield <object> <real>)
        ```
        sets the shield vitality of the specified object (between 0 and 1).
  - slug: object_set_shield_stun
    info:
      en: |-
        ```hsc
        (<void> object_set_shield_stun <object> <real>)
        ```
        set how long the shield will be stunned for, 0 is unstunned
  - slug: object_set_shield_stun_infinite
    info:
      en: |-
        ```hsc
        (<void> object_set_shield_stun_infinite <object>)
        ```
        make this objects shield be stunned permanently
  - slug: object_set_permutation
    info:
      en: |-
        ```hsc
        (<void> object_set_permutation <object> <string_id> <string_id>)
        ```
        sets the desired region (use "" for all regions) to the permutation with the given name, e.g. (object_set_permutation flood "right arm" ~damaged)
  - slug: object_set_region_state
    info:
      en: |-
        ```hsc
        (<void> object_set_region_state <object> <string_id> <model_state>)
        ```
        sets the desired region (use "" for all regions) to the model state with the given name, e.g. (object_set_region_state marine head destroyed)
  - slug: objects_can_see_object
    info:
      en: |-
        ```hsc
        (<boolean> objects_can_see_object <object_list> <object> <real>)
        ```
        returns true if any of the specified units are looking within the specified number of degrees of the object.
  - slug: objects_can_see_flag
    info:
      en: |-
        ```hsc
        (<boolean> objects_can_see_flag <object_list> <cutscene_flag> <real>)
        ```
        returns true if any of the specified units are looking within the specified number of degrees of the flag.
  - slug: objects_distance_to_object
    info:
      en: |-
        ```hsc
        (<real> objects_distance_to_object <object_list> <object>)
        ```
        returns minimum distance from any of the specified objects to the specified destination object. (returns -1 if there are no objects to check)
  - slug: objects_distance_to_flag
    info:
      en: |-
        ```hsc
        (<real> objects_distance_to_flag <object_list> <cutscene_flag>)
        ```
        returns minimum distance from any of the specified objects to the specified flag. (returns -1 if there are no objects, or no flag, to check)
  - slug: map_info
    info:
      en: |-
        ```hsc
        (<void> map_info)
        ```
        prints the current map and bsp name and index
  - slug: position_predict
    info:
      en: |-
        ```hsc
        (<void> position_predict <real> <real> <real>)
        ```
        in: x, y, z position. loads textures/geometry/sounds necessary to present locations that are about to come on-screen.
  - slug: shader_predict
    info:
      en: |-
        ```hsc
        (<void> shader_predict <shader>)
        ```
        in: shader name. loads textures necessary for a shader.
  - slug: bitmap_predict
    info:
      en: |-
        ```hsc
        (<void> bitmap_predict <bitmap>)
        ```
        in: bitmap name. loads all the bitmaps in that bitmap group
  - slug: script_recompile
    info:
      en: |-
        ```hsc
        (<void> script_recompile)
        ```
        recompiles scripts.
  - slug: script_doc
    info:
      en: |-
        ```hsc
        (<void> script_doc)
        ```
        saves a file called hs_doc.txt with parameters for all script commands.
  - slug: help
    info:
      en: |-
        ```hsc
        (<void> help <string>)
        ```
        prints a description of the named function.
  - slug: game_engine_objects
    info:
      en: |-
        ```hsc
        (<object_list> game_engine_objects)
        ```
        returns a list of the special game engine objects
  - slug: random_range
    info:
      en: |-
        ```hsc
        (<short> random_range <short> <short>)
        ```
        returns a random value in the range \[lower bound, upper bound)
  - slug: real_random_range
    info:
      en: |-
        ```hsc
        (<real> real_random_range <real> <real>)
        ```
        returns a random value in the range \[lower bound, upper bound)
  - slug: physics_constants_reset
    info:
      en: |-
        ```hsc
        (<void> physics_constants_reset)
        ```
        resets all physics constants to earthly values
  - slug: physics_set_gravity
    info:
      en: |-
        ```hsc
        (<void> physics_set_gravity <real>)
        ```
        set global gravity acceleration relative to halo standard gravity
  - slug: physics_set_velocity_frame
    info:
      en: |-
        ```hsc
        (<void> physics_set_velocity_frame <real> <real> <real>)
        ```
        sets a local frame of motion for updating physics of things that wish to respect it
  - slug: physics_disable_character_ground_adhesion_forces
    info:
      en: |-
        ```hsc
        (<void> physics_disable_character_ground_adhesion_forces <real>)
        ```
        turn off ground adhesion forces so you can play tricks with gravity
  - slug: havok_debug_start
    info:
      en: |-
        ```hsc
        (<void> havok_debug_start)
        ```
        start up the havok visual debugger
  - slug: havok_dump_world
    info:
      en: |-
        ```hsc
        (<void> havok_dump_world <string> <boolean>)
        ```
        dump the state of the havok world, with our without a movie
  - slug: havok_dump_world_close_movie
    info:
      en: |-
        ```hsc
        (<void> havok_dump_world_close_movie)
        ```
        end the capture of a havok dump movie
  - slug: havok_profile_start
    info:
      en: |-
        ```hsc
        (<void> havok_profile_start)
        ```
        start profiling havok
  - slug: havok_profile_end
    info:
      en: |-
        ```hsc
        (<void> havok_profile_end)
        ```
        start profiling havok
  - slug: havok_reset_allocated_state
    info:
      en: |-
        ```hsc
        (<void> havok_reset_allocated_state)
        ```
        strips down and builds back up all allocated havok memory
  - slug: breakable_surfaces_enable
    info:
      en: |-
        ```hsc
        (<void> breakable_surfaces_enable <boolean>)
        ```
        enables or disables breakability of all breakable surfaces on level
  - slug: breakable_surfaces_reset
    info:
      en: |-
        ```hsc
        (<void> breakable_surfaces_reset)
        ```
        restores all breakable surfaces
  - slug: recording_play
    info:
      en: |-
        ```hsc
        (<boolean> recording_play <unit> <cutscene_recording>)
        ```
        make the specified unit run the specified cutscene recording.
  - slug: recording_play_and_delete
    info:
      en: |-
        ```hsc
        (<boolean> recording_play_and_delete <unit> <cutscene_recording>)
        ```
        make the specified unit run the specified cutscene recording, deletes the unit when the animation finishes.
  - slug: recording_play_and_hover
    info:
      en: |-
        ```hsc
        (<boolean> recording_play_and_hover <vehicle> <cutscene_recording>)
        ```
        make the specified vehicle run the specified cutscene recording, hovers the vehicle when the animation finishes.
  - slug: recording_kill
    info:
      en: |-
        ```hsc
        (<void> recording_kill <unit>)
        ```
        kill the specified unit's cutscene recording.
  - slug: recording_time
    info:
      en: |-
        ```hsc
        (<short> recording_time <unit>)
        ```
        return the time remaining in the specified unit's cutscene recording.
  - slug: render_lights
    info:
      en: |-
        ```hsc
        (<boolean> render_lights <boolean>)
        ```
        enables/disables dynamic lights
  - slug: texture_camera_set_object_marker
    info:
      en: |-
        ```hsc
        (<void> texture_camera_set_object_marker <object> <string_id> <real>)
        ```
        sets the render texture camera to a given object marker
  - slug: texture_camera_off
    info:
      en: |-
        ```hsc
        (<void> texture_camera_off)
        ```
        turns off the render texture camera
  - slug: render_lights_enable_cinematic_shadow
    info:
      en: |-
        ```hsc
        (<void> render_lights_enable_cinematic_shadow <boolean> <object> <string_id> <real>)
        ```
        enable/disable the specified unit to receive cinematic shadows where the shadow is focused about a radius around a marker name
  - slug: fog_report
    info:
      en: |-
        ```hsc
        (<void> fog_report)
        ```
  - slug: fog_report_summary
    info:
      en: |-
        ```hsc
        (<void> fog_report_summary)
        ```
  - slug: fog_report_verbose
    info:
      en: |-
        ```hsc
        (<void> fog_report_verbose)
        ```
  - slug: fog_mode_control
    info:
      en: |-
        ```hsc
        (<void> fog_mode_control <boolean> <boolean> <boolean> <boolean>)
        ```
  - slug: fog_override_off
    info:
      en: |-
        ```hsc
        (<void> fog_override_off)
        ```
  - slug: fog_override_mode
    info:
      en: |-
        ```hsc
        (<void> fog_override_mode <long>)
        ```
  - slug: fog_override_mode_off
    info:
      en: |-
        ```hsc
        (<void> fog_override_mode_off)
        ```
  - slug: fog_override_atmospheric_fog
    info:
      en: |-
        ```hsc
        (<void> fog_override_atmospheric_fog <real> <string> <real> <real>)
        ```
  - slug: fog_override_atmospheric_fog_off
    info:
      en: |-
        ```hsc
        (<void> fog_override_atmospheric_fog_off)
        ```
  - slug: fog_override_secondary_fog
    info:
      en: |-
        ```hsc
        (<void> fog_override_secondary_fog <real> <string> <real> <real>)
        ```
  - slug: fog_override_secondary_fog_off
    info:
      en: |-
        ```hsc
        (<void> fog_override_secondary_fog_off)
        ```
  - slug: fog_override_sky_fog
    info:
      en: |-
        ```hsc
        (<void> fog_override_sky_fog <real> <string>)
        ```
  - slug: fog_override_sky_fog_off
    info:
      en: |-
        ```hsc
        (<void> fog_override_sky_fog_off)
        ```
  - slug: fog_override_planar_fog
    info:
      en: |-
        ```hsc
        (<void> fog_override_planar_fog <real> <string> <real> <real> <real>)
        ```
  - slug: fog_override_planar_fog_off
    info:
      en: |-
        ```hsc
        (<void> fog_override_planar_fog_off)
        ```
  - slug: fog_override_planar_fog_plane
    info:
      en: |-
        ```hsc
        (<void> fog_override_planar_fog_plane <real> <real> <real>)
        ```
  - slug: fog_override_planar_fog_plane_off
    info:
      en: |-
        ```hsc
        (<void> fog_override_planar_fog_plane_off)
        ```
  - slug: fog_override_planar_max_atmospheric_depth
    info:
      en: |-
        ```hsc
        (<void> fog_override_planar_max_atmospheric_depth <real>)
        ```
  - slug: fog_override_planar_max_atmospheric_depth_off
    info:
      en: |-
        ```hsc
        (<void> fog_override_planar_max_atmospheric_depth_off)
        ```
  - slug: fog_override_planar_planar_eye_density
    info:
      en: |-
        ```hsc
        (<void> fog_override_planar_planar_eye_density <real>)
        ```
  - slug: fog_override_planar_planar_eye_density_off
    info:
      en: |-
        ```hsc
        (<void> fog_override_planar_planar_eye_density_off)
        ```
  - slug: fog_override_atmospheric_secondary_blend
    info:
      en: |-
        ```hsc
        (<void> fog_override_atmospheric_secondary_blend <real>)
        ```
  - slug: fog_override_atmospheric_secondary_blend_off
    info:
      en: |-
        ```hsc
        (<void> fog_override_atmospheric_secondary_blend_off)
        ```
  - slug: fog_override_atmospheric_planar_blend
    info:
      en: |-
        ```hsc
        (<void> fog_override_atmospheric_planar_blend <real>)
        ```
  - slug: fog_override_atmospheric_planar_blend_off
    info:
      en: |-
        ```hsc
        (<void> fog_override_atmospheric_planar_blend_off)
        ```
  - slug: render_debug_structure_cluster_visibility
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_cluster_visibility <long>)
        ```
        enables cluster visibility debugging
  - slug: render_debug_structure_cluster_fog
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_cluster_fog <long>)
        ```
        enables cluster fog debugging
  - slug: render_debug_structure_fog_plane
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_fog_plane <long>)
        ```
        enables fog plane debugging
  - slug: render_debug_structure_fog_plane_infinite_extent
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_fog_plane_infinite_extent <long>)
        ```
        enables fog plane debugging
  - slug: render_debug_structure_fog_zone
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_fog_zone <long>)
        ```
        enabled fog zone debugging
  - slug: render_debug_structure_fog_zone_floodfill
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_fog_zone_floodfill <long>)
        ```
        enables fog zone debugging
  - slug: render_debug_structure_all_fog_planes
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_all_fog_planes <boolean>)
        ```
        enables fog plane debugging (all)
  - slug: render_debug_structure_all_cluster_errors
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_all_cluster_errors <boolean>)
        ```
        enables cluster error debugging (all)
  - slug: render_debug_structure_line_opacity
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_line_opacity <real> <real> <real> <real>)
        ```
        sets the opacity (0 is default)
  - slug: render_debug_structure_text_opacity
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_text_opacity <real> <real> <real> <real>)
        ```
        sets the opacity (0 is default)
  - slug: render_debug_structure_opacity
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_opacity <real> <real> <real> <real>)
        ```
        sets the opacity (0 is default)
  - slug: render_debug_structure_non_occluded_fog_planes
    info:
      en: |-
        ```hsc
        (<void> render_debug_structure_non_occluded_fog_planes <boolean>)
        ```
        controls non-occluded fog plane debugging
  - slug: scenery_animation_start
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_start <scenery> <animation_graph> <string_id>)
        ```
        starts a custom animation playing on a piece of scenery
  - slug: scenery_animation_start_loop
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_start_loop <scenery> <animation_graph> <string_id>)
        ```
        starts a custom looping animation playing on a piece of scenery
  - slug: scenery_animation_start_relative
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_start_relative <scenery> <animation_graph> <string_id> <object>)
        ```
        starts a custom animation playing on a piece of scenery relative to a parent object
  - slug: scenery_animation_start_relative_loop
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_start_relative_loop <scenery> <animation_graph> <string_id> <object>)
        ```
        starts a custom looping animation playing on a piece of scenery relative to a parent object
  - slug: scenery_animation_start_at_frame
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_start_at_frame <scenery> <animation_graph> <string_id> <short>)
        ```
        starts a custom animation playing on a piece of scenery at a specific frame
  - slug: scenery_animation_idle
    info:
      en: |-
        ```hsc
        (<void> scenery_animation_idle <scenery>)
        ```
        starts the idle animation (if any) for a piece of scenery
  - slug: scenery_get_animation_time
    info:
      en: |-
        ```hsc
        (<short> scenery_get_animation_time <scenery>)
        ```
        returns the number of ticks remaining in a custom animation (or zero, if the animation is over).
  - slug: unit_can_blink
    info:
      en: |-
        ```hsc
        (<void> unit_can_blink <unit> <boolean>)
        ```
        allows a unit to blink or not (units never blink when they are dead)
  - slug: unit_set_active_camo
    info:
      en: |-
        ```hsc
        (<void> unit_set_active_camo <unit> <boolean> <real>)
        ```
        enable or disable active camo for the given unit over the specified number of seconds
  - slug: unit_open
    info:
      en: |-
        ```hsc
        (<void> unit_open <unit>)
        ```
        opens the hatches on the given unit
  - slug: unit_close
    info:
      en: |-
        ```hsc
        (<void> unit_close <unit>)
        ```
        closes the hatches on a given unit
  - slug: unit_kill
    info:
      en: |-
        ```hsc
        (<void> unit_kill <unit>)
        ```
        kills a given unit, no saving throw
  - slug: unit_kill_silent
    info:
      en: |-
        ```hsc
        (<void> unit_kill_silent <unit>)
        ```
        kills a given unit silently (doesn't make them play their normal death animation or sound)
  - slug: unit_is_emitting
    info:
      en: |-
        ```hsc
        (<boolean> unit_is_emitting <unit>)
        ```
        returns whether or not the given unit is current emitting an ai
  - slug: unit_get_custom_animation_time
    info:
      en: |-
        ```hsc
        (<short> unit_get_custom_animation_time <unit>)
        ```
        returns the number of ticks remaining in a unit's custom animation (or zero, if the animation is over).
  - slug: unit_stop_custom_animation
    info:
      en: |-
        ```hsc
        (<void> unit_stop_custom_animation <unit>)
        ```
        stops the custom animation running on the given unit.
  - slug: custom_animation
    info:
      en: |-
        ```hsc
        (<boolean> custom_animation <unit> <animation_graph> <string_id> <boolean>)
        ```
        starts a custom animation playing on a unit (interpolates into animation if last parameter is TRUE)
  - slug: custom_animation_loop
    info:
      en: |-
        ```hsc
        (<boolean> custom_animation_loop <unit> <animation_graph> <string_id> <boolean>)
        ```
        starts a custom animation playing on a unit (interpolates into animation if last parameter is TRUE)
  - slug: custom_animation_relative
    info:
      en: |-
        ```hsc
        (<boolean> custom_animation_relative <unit> <animation_graph> <string_id> <boolean> <object>)
        ```
        starts a custom animation relative to some other object (interpolates into animation if last parameter is TRUE)
  - slug: custom_animation_relative_loop
    info:
      en: |-
        ```hsc
        (<boolean> custom_animation_relative_loop <unit> <animation_graph> <string_id> <boolean> <object>)
        ```
        starts a custom animation relative to some other object (interpolates into animation if last parameter is TRUE)
  - slug: custom_animation_list
    info:
      en: |-
        ```hsc
        (<boolean> custom_animation_list <object_list> <animation_graph> <string_id> <boolean>)
        ```
        starts a custom animation playing on a unit list (interpolates into animation if last parameter is TRUE)
  - slug: unit_custom_animation_at_frame
    info:
      en: |-
        ```hsc
        (<boolean> unit_custom_animation_at_frame <unit> <animation_graph> <string_id> <boolean> <short>)
        ```
        starts a custom animation playing on a unit at a specific frame index(interpolates into animation if next to last parameter is TRUE)
  - slug: unit_is_playing_custom_animation
    info:
      en: |-
        ```hsc
        (<boolean> unit_is_playing_custom_animation <unit>)
        ```
        returns TRUE if the given unit is still playing a custom animation
  - slug: object_set_custom_animations_hold_on_last_frame
    info:
      en: |-
        ```hsc
        (<void> object_set_custom_animations_hold_on_last_frame <boolean>)
        ```
        changes the default behavior for custom animations
  - slug: object_set_custom_animations_prevent_lipsync_head_movement
    info:
      en: |-
        ```hsc
        (<void> object_set_custom_animations_prevent_lipsync_head_movement <boolean>)
        ```
        when true, prevents lipsync from bobbing the head during custom animations. default is true.
  - slug: unit_set_actively_controlled
    info:
      en: |-
        ```hsc
        (<void> unit_set_actively_controlled <unit> <boolean>)
        ```
        sets unit's actively controlled flag
  - slug: unit_get_team_index
    info:
      en: |-
        ```hsc
        (<short> unit_get_team_index <unit>)
        ```
        returns the team index of the unit, returns -1 if the unit does not have a team
  - slug: unit_aim_without_turning
    info:
      en: |-
        ```hsc
        (<void> unit_aim_without_turning <unit> <boolean>)
        ```
        allows a unit to aim in place without turning
  - slug: unit_set_enterable_by_player
    info:
      en: |-
        ```hsc
        (<void> unit_set_enterable_by_player <unit> <boolean>)
        ```
        can be used to prevent the player from entering a vehicle
  - slug: unit_get_enterable_by_player
    info:
      en: |-
        ```hsc
        (<boolean> unit_get_enterable_by_player <unit>)
        ```
        returns true if a player may enter the vehicle
  - slug: unit_only_takes_damage_from_players_team
    info:
      en: |-
        ```hsc
        (<void> unit_only_takes_damage_from_players_team <unit> <boolean>)
        ```
        used for the tartarus boss fight
  - slug: unit_enter_vehicle
    info:
      en: |-
        ```hsc
        (<void> unit_enter_vehicle <unit> <vehicle> <string_id>)
        ```
        puts the specified unit in the specified vehicle (in the named seat)
  - slug: unit_board_vehicle
    info:
      en: |-
        ```hsc
        (<void> unit_board_vehicle <unit> <string_id>)
        ```
        Causes the given unit to attempt to board the named seat
  - slug: unit_set_emotion
    info:
      en: |-
        ```hsc
        (<void> unit_set_emotion <unit> <short>)
        ```
        sets a unit's facial expression (-1 is none, other values depend on unit)
  - slug: unit_set_emotion_animation
    info:
      en: |-
        ```hsc
        (<void> unit_set_emotion_animation <unit> <string_id>)
        ```
        sets the emotion animation to be used for the given unit
  - slug: unit_set_emotional_state
    info:
      en: |-
        ```hsc
        (<void> unit_set_emotional_state <unit> <string_id> <real> <short>)
        ```
        sets a unit's facial expression by name with weight and transition time
  - slug: unit_enable_eye_tracking
    info:
      en: |-
        ```hsc
        (<void> unit_enable_eye_tracking <unit> <boolean>)
        ```
        enable/disable eye aiming on a unit
  - slug: unit_in_vehicle
    info:
      en: |-
        ```hsc
        (<boolean> unit_in_vehicle <unit>)
        ```
        returns true if the given unit is seated on a parent unit
  - slug: vehicle_test_seat_list
    info:
      en: |-
        ```hsc
        (<boolean> vehicle_test_seat_list <vehicle> <string_id> <object_list>)
        ```
        tests whether the named seat has an object in the object list (use "" to test all seats for any unit in the list)
  - slug: vehicle_test_seat
    info:
      en: |-
        ```hsc
        (<boolean> vehicle_test_seat <vehicle> <string_id> <unit>)
        ```
        tests whether the named seat has a specified unit in it (use "" to test all seats for this unit)
  - slug: unit_set_prefer_tight_camera_track
    info:
      en: |-
        ```hsc
        (<void> unit_set_prefer_tight_camera_track <unit> <boolean>)
        ```
        sets the unit to prefer a tight camera track
  - slug: unit_exit_vehicle
    info:
      en: |-
        ```hsc
        (<void> unit_exit_vehicle <unit>)
        ```
        makes a unit exit its vehicle
  - slug: unit_exit_vehicle
    info:
      en: |-
        ```hsc
        (<void> unit_exit_vehicle <unit> <short>)
        ```
        makes a unit exit its vehicle (0 = normal exit to airborne, 1 = ejection, 2 = ejection + death, 3 = exit to ground)
  - slug: unit_set_maximum_vitality
    info:
      en: |-
        ```hsc
        (<void> unit_set_maximum_vitality <unit> <real> <real>)
        ```
        sets a unit's maximum body and shield vitality
  - slug: units_set_maximum_vitality
    info:
      en: |-
        ```hsc
        (<void> units_set_maximum_vitality <object_list> <real> <real>)
        ```
        sets a group of units' maximum body and shield vitality
  - slug: unit_set_current_vitality
    info:
      en: |-
        ```hsc
        (<void> unit_set_current_vitality <unit> <real> <real>)
        ```
        sets a unit's current body and shield vitality
  - slug: units_set_current_vitality
    info:
      en: |-
        ```hsc
        (<void> units_set_current_vitality <object_list> <real> <real>)
        ```
        sets a group of units' current body and shield vitality
  - slug: vehicle_load_magic
    info:
      en: |-
        ```hsc
        (<short> vehicle_load_magic <object> <unit_seat_mapping> <object_list>)
        ```
        makes a list of units (named or by encounter) magically get into a vehicle, in the substring-specified seats (e.g. CD-passenger... empty string matches all seats)
  - slug: vehicle_unload
    info:
      en: |-
        ```hsc
        (<short> vehicle_unload <object> <unit_seat_mapping>)
        ```
        makes units get out of an object from the substring-specified seats (e.g. CD-passenger... empty string matches all seats)
  - slug: unit_set_animation_mode
    info:
      en: |-
        ```hsc
        (<void> unit_set_animation_mode <unit> <string_id>)
        ```
        this unit will assume the named animation mode
  - slug: magic_melee_attack
    info:
      en: |-
        ```hsc
        (<void> magic_melee_attack)
        ```
        causes player's unit to start a melee attack
  - slug: vehicle_riders
    info:
      en: |-
        ```hsc
        (<object_list> vehicle_riders <unit>)
        ```
        returns a list of all riders in a vehicle
  - slug: vehicle_driver
    info:
      en: |-
        ```hsc
        (<unit> vehicle_driver <unit>)
        ```
        returns the driver of a vehicle
  - slug: vehicle_gunner
    info:
      en: |-
        ```hsc
        (<unit> vehicle_gunner <unit>)
        ```
        returns the gunner of a vehicle
  - slug: unit_get_health
    info:
      en: |-
        ```hsc
        (<real> unit_get_health <unit>)
        ```
        returns the health \[0,1] of the unit, returns -1 if the unit does not exist
  - slug: unit_get_shield
    info:
      en: |-
        ```hsc
        (<real> unit_get_shield <unit>)
        ```
        returns the shield \[0,1] of the unit, returns -1 if the unit does not exist
  - slug: unit_get_total_grenade_count
    info:
      en: |-
        ```hsc
        (<short> unit_get_total_grenade_count <unit>)
        ```
        returns the total number of grenades for the given unit, 0 if it does not exist
  - slug: unit_has_weapon
    info:
      en: |-
        ```hsc
        (<boolean> unit_has_weapon <unit> <object_definition>)
        ```
        returns TRUE if the <unit> has <object> as a weapon, FALSE otherwise
  - slug: unit_has_weapon_readied
    info:
      en: |-
        ```hsc
        (<boolean> unit_has_weapon_readied <unit> <object_definition>)
        ```
        returns TRUE if the <unit> has <object> as the primary weapon, FALSE otherwise
  - slug: unit_lower_weapon
    info:
      en: |-
        ```hsc
        (<void> unit_lower_weapon <unit> <short>)
        ```
        lower the units weapon over x ticks
  - slug: unit_raise_weapon
    info:
      en: |-
        ```hsc
        (<void> unit_raise_weapon <unit> <short>)
        ```
        raises the units weapon over x ticks
  - slug: unit_animation_forced_seat
    info:
      en: |-
        ```hsc
        (<void> unit_animation_forced_seat <string_id>)
        ```
        all units controlled by the player will assume the given seat name (valid values are 'asleep', 'alert', 'stand', 'crouch' and 'flee')
  - slug: unit_doesnt_drop_items
    info:
      en: |-
        ```hsc
        (<void> unit_doesnt_drop_items <object_list>)
        ```
        prevents any of the given units from dropping weapons or grenades when they die
  - slug: unit_impervious
    info:
      en: |-
        ```hsc
        (<void> unit_impervious <object_list> <boolean>)
        ```
        prevents any of the given units from being knocked around or playing ping animations
  - slug: unit_suspended
    info:
      en: |-
        ```hsc
        (<void> unit_suspended <unit> <boolean>)
        ```
        stops gravity from working on the given unit
  - slug: unit_add_equipment
    info:
      en: |-
        ```hsc
        (<void> unit_add_equipment <unit> <starting_profile> <boolean> <boolean>)
        ```
        adds/resets the unit's health, shield, and inventory (weapons and grenades) to the named profile. resets if third parameter is true, adds if false. weapons will be marked as garbage if fourth parameter is true (for respawning equipment).
  - slug: weapon_hold_trigger
    info:
      en: |-
        ```hsc
        (<void> weapon_hold_trigger <weapon> <long> <boolean>)
        ```
        turns the trigger for a weapon  on/off
  - slug: weapon_enable_warthog_chaingun_light
    info:
      en: |-
        ```hsc
        (<void> weapon_enable_warthog_chaingun_light <boolean>)
        ```
        turns the trigger for a weapon  on/off
  - slug: device_set_never_appears_locked
    info:
      en: |-
        ```hsc
        (<void> device_set_never_appears_locked <device> <boolean>)
        ```
        changes a machine's never_appears_locked flag, but only if paul is a bastard
  - slug: device_set_power
    info:
      en: |-
        ```hsc
        (<void> device_set_power <device> <real>)
        ```
        immediately sets the power of a named device to the given value
  - slug: device_get_power
    info:
      en: |-
        ```hsc
        (<real> device_get_power <device>)
        ```
        gets the current power of a named device
  - slug: device_set_position
    info:
      en: |-
        ```hsc
        (<boolean> device_set_position <device> <real>)
        ```
        set the desired position of the given device (used for devices without explicit device groups)
  - slug: device_get_position
    info:
      en: |-
        ```hsc
        (<real> device_get_position <device>)
        ```
        gets the current position of the given device (used for devices without explicit device groups)
  - slug: device_set_position_immediate
    info:
      en: |-
        ```hsc
        (<void> device_set_position_immediate <device> <real>)
        ```
        instantaneously changes the position of the given device (used for devices without explicit device groups
  - slug: device_group_get
    info:
      en: |-
        ```hsc
        (<real> device_group_get <device_group>)
        ```
        returns the desired value of the specified device group.
  - slug: device_group_set
    info:
      en: |-
        ```hsc
        (<boolean> device_group_set <device> <device_group> <real>)
        ```
        changes the desired value of the specified device group.
  - slug: device_group_set_immediate
    info:
      en: |-
        ```hsc
        (<void> device_group_set_immediate <device_group> <real>)
        ```
        instantaneously changes the value of the specified device group.
  - slug: device_one_sided_set
    info:
      en: |-
        ```hsc
        (<void> device_one_sided_set <device> <boolean>)
        ```
        TRUE makes the given device one-sided (only able to be opened from one direction), FALSE makes it two-sided
  - slug: device_operates_automatically_set
    info:
      en: |-
        ```hsc
        (<void> device_operates_automatically_set <device> <boolean>)
        ```
        TRUE makes the given device open automatically when any biped is nearby, FALSE makes it not
  - slug: device_closes_automatically_set
    info:
      en: |-
        ```hsc
        (<void> device_closes_automatically_set <device> <boolean>)
        ```
        TRUE makes the given device close automatically after it has opened, FALSE makes it not
  - slug: device_group_change_only_once_more_set
    info:
      en: |-
        ```hsc
        (<void> device_group_change_only_once_more_set <device_group> <boolean>)
        ```
        TRUE allows a device to change states only once
  - slug: device_set_position_track
    info:
      en: |-
        ```hsc
        (<boolean> device_set_position_track <device> <string_id> <real>)
        ```
        set the desired position track animation to use (optional interpolation time onto track)
  - slug: device_set_overlay_track
    info:
      en: |-
        ```hsc
        (<boolean> device_set_overlay_track <device> <string_id>)
        ```
        set the desired overlay animation to use
  - slug: device_animate_position
    info:
      en: |-
        ```hsc
        (<void> device_animate_position <device> <real> <real> <real> <real> <boolean>)
        ```
        animate the position over time
  - slug: device_animate_overlay
    info:
      en: |-
        ```hsc
        (<void> device_animate_overlay <device> <real> <real> <real> <real>)
        ```
        animate the overlay over time
  - slug: cheat_all_powerups
    info:
      en: |-
        ```hsc
        (<void> cheat_all_powerups)
        ```
        drops all powerups near player
  - slug: cheat_all_weapons
    info:
      en: |-
        ```hsc
        (<void> cheat_all_weapons)
        ```
        drops all weapons near player
  - slug: cheat_all_vehicles
    info:
      en: |-
        ```hsc
        (<void> cheat_all_vehicles)
        ```
        drops all vehicles on player
  - slug: cheat_teleport_to_camera
    info:
      en: |-
        ```hsc
        (<void> cheat_teleport_to_camera)
        ```
        teleports player to camera location
  - slug: cheat_active_camouflage
    info:
      en: |-
        ```hsc
        (<void> cheat_active_camouflage <boolean>)
        ```
        gives the player active camouflage
  - slug: cheat_active_camouflage_by_player
    info:
      en: |-
        ```hsc
        (<void> cheat_active_camouflage_by_player <short> <boolean>)
        ```
        gives a specific player active camouflage
  - slug: cheats_load
    info:
      en: |-
        ```hsc
        (<void> cheats_load)
        ```
        reloads the cheats.txt file
  - slug: drop
    info:
      en: |-
        ```hsc
        (<void> drop <string>)
        ```
        drops the named tag e.g. objects\vehicles\banshee\banshee.vehicle
  - slug: ai_enable
    info:
      en: |-
        ```hsc
        (<void> ai_enable <boolean>)
        ```
        turns all AI on or off.
  - slug: ai_enabled
    info:
      en: |-
        ```hsc
        (<boolean> ai_enabled)
        ```
        returns whether AI is turned on or off.
  - slug: ai_grenades
    info:
      en: |-
        ```hsc
        (<void> ai_grenades <boolean>)
        ```
        turns grenade inventory on or off.
  - slug: ai_dialogue_enable
    info:
      en: |-
        ```hsc
        (<void> ai_dialogue_enable <boolean>)
        ```
        turn combat dialogue on/off
  - slug: ai_dialogue_log_reset
    info:
      en: |-
        ```hsc
        (<void> ai_dialogue_log_reset)
        ```
        reset the dialogue log
  - slug: ai_dialogue_log_dump
    info:
      en: |-
        ```hsc
        (<void> ai_dialogue_log_dump <string>)
        ```
        dump a file of the given name with csv statistics on vocalizations
  - slug: ai_get_object
    info:
      en: |-
        ```hsc
        (<object> ai_get_object <ai>)
        ```
        returns the unit/object corresponding to the given actor
  - slug: ai_get_unit
    info:
      en: |-
        ```hsc
        (<unit> ai_get_unit <ai>)
        ```
        returns the unit/object corresponding to the given actor
  - slug: ai_attach
    info:
      en: |-
        ```hsc
        (<void> ai_attach <unit> <ai>)
        ```
        attaches the specified unit to the specified encounter.
  - slug: ai_attach_units
    info:
      en: |-
        ```hsc
        (<void> ai_attach_units <object_list> <ai>)
        ```
        attaches the specified list of units to the specified encounter.
  - slug: ai_detach
    info:
      en: |-
        ```hsc
        (<void> ai_detach <unit>)
        ```
        detaches the specified unit from all AI.
  - slug: ai_detach_units
    info:
      en: |-
        ```hsc
        (<void> ai_detach_units <object_list>)
        ```
        detaches the specified list of units from all AI.
  - slug: ai_place
    info:
      en: |-
        ```hsc
        (<void> ai_place <ai>)
        ```
        places the specified squad on the map.
  - slug: ai_place
    info:
      en: |-
        ```hsc
        (<void> ai_place <ai> <short>)
        ```
        places the given number of members of the specified squad.
  - slug: ai_place_in_vehicle
    info:
      en: |-
        ```hsc
        (<void> ai_place_in_vehicle <ai> <ai>)
        ```
        places the specified squad (1st arg) on the map in the vehicles belonging to the specified vehicle squad (2nd arg).
  - slug: ai_cannot_die
    info:
      en: |-
        ```hsc
        (<void> ai_cannot_die <ai> <boolean>)
        ```
        AI cannot die from damage (as opposed to by scripting)
  - slug: ai_vitality_pinned
    info:
      en: |-
        ```hsc
        (<boolean> ai_vitality_pinned <ai>)
        ```
        Returns true if the ai's units are ALL vitality pinned (see object_vitality_pinned)
  - slug: ai_overcomes_oversteer
    info:
      en: |-
        ```hsc
        (<void> ai_overcomes_oversteer <ai> <boolean>)
        ```
        Don't use this for anything other than bug 3926.  AI magically cancels vehicle oversteer.
  - slug: ai_kill
    info:
      en: |-
        ```hsc
        (<void> ai_kill <ai>)
        ```
        instantly kills the specified encounter and/or squad.
  - slug: ai_kill_silent
    info:
      en: |-
        ```hsc
        (<void> ai_kill_silent <ai>)
        ```
        instantly and silently (no animation or sound played) kills the specified encounter and/or squad.
  - slug: ai_erase
    info:
      en: |-
        ```hsc
        (<void> ai_erase <ai>)
        ```
        erases the specified encounter and/or squad.
  - slug: ai_erase_all
    info:
      en: |-
        ```hsc
        (<void> ai_erase_all)
        ```
        erases all AI.
  - slug: ai_disposable
    info:
      en: |-
        ```hsc
        (<void> ai_disposable <ai> <boolean>)
        ```
        enables or disables automatic garbage collection for actors in the specified encounter and/or squad.
  - slug: ai_select
    info:
      en: |-
        ```hsc
        (<void> ai_select <ai>)
        ```
        selects the specified squad.
  - slug: ai_deselect
    info:
      en: |-
        ```hsc
        (<void> ai_deselect)
        ```
        clears the selected encounter.
  - slug: ai_set_deaf
    info:
      en: |-
        ```hsc
        (<void> ai_set_deaf <ai> <boolean>)
        ```
        enables or disables hearing for actors in the specified encounter.
  - slug: ai_set_blind
    info:
      en: |-
        ```hsc
        (<void> ai_set_blind <ai> <boolean>)
        ```
        enables or disables sight for actors in the specified encounter.
  - slug: ai_magically_see
    info:
      en: |-
        ```hsc
        (<void> ai_magically_see <ai> <ai>)
        ```
        Make one squad magically aware of another.
  - slug: ai_magically_see_object
    info:
      en: |-
        ```hsc
        (<void> ai_magically_see_object <ai> <object>)
        ```
        Make a squad magically aware of a particular object.
  - slug: ai_set_active_camo
    info:
      en: |-
        ```hsc
        (<void> ai_set_active_camo <ai> <boolean>)
        ```
        Turn on active camoflage on actor/squad/squad-group
  - slug: ai_suppress_combat
    info:
      en: |-
        ```hsc
        (<void> ai_suppress_combat <ai> <boolean>)
        ```
        Turn on/off combat suppression on actor/squad/squad-group
  - slug: ai_migrate
    info:
      en: |-
        ```hsc
        (<void> ai_migrate <ai> <ai>)
        ```
        makes all or part of an encounter move to another encounter.
  - slug: ai_allegiance
    info:
      en: |-
        ```hsc
        (<void> ai_allegiance <team> <team>)
        ```
        creates an allegiance between two teams.
  - slug: ai_allegiance_remove
    info:
      en: |-
        ```hsc
        (<void> ai_allegiance_remove <team> <team>)
        ```
        destroys an allegiance between two teams.
  - slug: ai_braindead
    info:
      en: |-
        ```hsc
        (<void> ai_braindead <ai> <boolean>)
        ```
        makes a group of actors braindead, or restores them to life (in their initial state)
  - slug: ai_braindead_by_unit
    info:
      en: |-
        ```hsc
        (<void> ai_braindead_by_unit <object_list> <boolean>)
        ```
        makes a list of objects braindead, or restores them to life. if you pass in a vehicle index, it makes all actors in that vehicle braindead (including any built-in guns)
  - slug: ai_disregard
    info:
      en: |-
        ```hsc
        (<void> ai_disregard <object_list> <boolean>)
        ```
        if TRUE, forces all actors to completely disregard the specified units, otherwise lets them acknowledge the units again
  - slug: ai_prefer_target
    info:
      en: |-
        ```hsc
        (<void> ai_prefer_target <object_list> <boolean>)
        ```
        if TRUE, *ALL* enemies will prefer to attack the specified units. if FALSE, removes the preference.
  - slug: ai_teleport_to_starting_location_if_outside_bsp
    info:
      en: |-
        ```hsc
        (<void> ai_teleport_to_starting_location_if_outside_bsp <ai>)
        ```
        teleports a group of actors to the starting locations of their current squad(s) if they are currently outside the world.
  - slug: ai_renew
    info:
      en: |-
        ```hsc
        (<void> ai_renew <ai>)
        ```
        refreshes the health and grenade count of a group of actors, so they are as good as new
  - slug: ai_force_active
    info:
      en: |-
        ```hsc
        (<void> ai_force_active <ai> <boolean>)
        ```
        forces an encounter to remain active (i.e. not freeze in place) even if there are no players nearby
  - slug: ai_force_active_by_unit
    info:
      en: |-
        ```hsc
        (<void> ai_force_active_by_unit <unit> <boolean>)
        ```
        forces a named actor that is NOT in an encounter to remain active (i.e. not freeze in place) even if there are no players nearby
  - slug: ai_playfight
    info:
      en: |-
        ```hsc
        (<void> ai_playfight <ai> <boolean>)
        ```
        sets an encounter to be playfighting or not
  - slug: ai_reconnect
    info:
      en: |-
        ```hsc
        (<void> ai_reconnect)
        ```
        reconnects all AI information to the current structure bsp (use this after you create encounters or command lists in sapien, or place new firing points or command list points)
  - slug: ai_berserk
    info:
      en: |-
        ```hsc
        (<void> ai_berserk <ai> <boolean>)
        ```
        forces a group of actors to start or stop berserking
  - slug: ai_set_team
    info:
      en: |-
        ```hsc
        (<void> ai_set_team <ai> <team>)
        ```
        makes an encounter change to a new team
  - slug: ai_allow_dormant
    info:
      en: |-
        ```hsc
        (<void> ai_allow_dormant <ai> <boolean>)
        ```
        either enables or disables automatic dormancy for a group of actors
  - slug: ai_is_attacking
    info:
      en: |-
        ```hsc
        (<boolean> ai_is_attacking <ai>)
        ```
        returns whether a platoon is in the attacking mode (or if an encounter is specified, returns whether any platoon in that encounter is attacking)
  - slug: ai_fighting_count
    info:
      en: |-
        ```hsc
        (<short> ai_fighting_count <ai>)
        ```
        return the number of actors that are fighting in a squad or squad_group
  - slug: ai_living_count
    info:
      en: |-
        ```hsc
        (<short> ai_living_count <ai>)
        ```
        return the number of living actors in the specified encounter and/or squad.
  - slug: ai_living_fraction
    info:
      en: |-
        ```hsc
        (<real> ai_living_fraction <ai>)
        ```
        return the fraction \[0-1\] of living actors in the specified encounter and/or squad.
  - slug: ai_strength
    info:
      en: |-
        ```hsc
        (<real> ai_strength <ai>)
        ```
        return the current strength (average body vitality from 0-1) of the specified encounter and/or squad.
  - slug: ai_swarm_count
    info:
      en: |-
        ```hsc
        (<short> ai_swarm_count <ai>)
        ```
        return the number of swarm actors in the specified encounter and/or squad.
  - slug: ai_nonswarm_count
    info:
      en: |-
        ```hsc
        (<short> ai_nonswarm_count <ai>)
        ```
        return the number of non-swarm actors in the specified encounter and/or squad.
  - slug: ai_actors
    info:
      en: |-
        ```hsc
        (<object_list> ai_actors <ai>)
        ```
        converts an ai reference to an object list.
  - slug: ai_allegiance_broken
    info:
      en: |-
        ```hsc
        (<boolean> ai_allegiance_broken <team> <team>)
        ```
        returns whether two teams have an allegiance that is currently broken by traitorous behavior
  - slug: ai_set_orders
    info:
      en: |-
        ```hsc
        (<void> ai_set_orders <ai> <ai_orders>)
        ```
        Takes the squad or squad group (arg1) and gives it the order (arg3) in zone (arg2). Use the zone_name/order_name format
  - slug: ai_spawn_count
    info:
      en: |-
        ```hsc
        (<short> ai_spawn_count <ai>)
        ```
        returns the number of actors spawned in the given squad or squad group
  - slug: object_get_ai
    info:
      en: |-
        ```hsc
        (<ai> object_get_ai <object>)
        ```
        returns the ai attached to this object, if any
  - slug: ai_trigger_test
    info:
      en: |-
        ```hsc
        (<boolean> ai_trigger_test <string> <ai>)
        ```
        Tests the named trigger on the named squad
  - slug: generate_pathfinding
    info:
      en: |-
        ```hsc
        (<boolean> generate_pathfinding)
        ```
        Generate pathfinding info for all structure bsps in the current scenario
  - slug: ai_render_paths_all
    info:
      en: |-
        ```hsc
        (<void> ai_render_paths_all)
        ```
        Turns on raw, smoothed, avoided paths and avoidance obstacles
  - slug: ai_vehicle_get
    info:
      en: |-
        ```hsc
        (<vehicle> ai_vehicle_get <ai>)
        ```
        Returns the vehicle that the given actor is in.
  - slug: ai_vehicle_get_from_starting_location
    info:
      en: |-
        ```hsc
        (<vehicle> ai_vehicle_get_from_starting_location <ai>)
        ```
        Returns the vehicle that was spawned at the given starting location.
  - slug: ai_vehicle_reserve_seat
    info:
      en: |-
        ```hsc
        (<boolean> ai_vehicle_reserve_seat <vehicle> <string_id> <boolean>)
        ```
        Reserves the given seat on the given vehicle (so that AI may not enter it
  - slug: ai_vehicle_reserve
    info:
      en: |-
        ```hsc
        (<boolean> ai_vehicle_reserve <vehicle> <boolean>)
        ```
        Reserves the given vehicle (so that AI may not enter it
  - slug: ai_vehicle_enter
    info:
      en: |-
        ```hsc
        (<void> ai_vehicle_enter <ai> <unit> <unit_seat_mapping>)
        ```
        tells a group of actors to get into a vehicle, in the substring-specified seats (e.g. passenger for pelican)... does not interrupt any actors who are already going to vehicles
  - slug: ai_vehicle_enter
    info:
      en: |-
        ```hsc
        (<void> ai_vehicle_enter <ai> <unit>)
        ```
        tells a group of actors to get into a vehicle... does not interrupt any actors who are already going to vehicles
  - slug: ai_vehicle_enter_immediate
    info:
      en: |-
        ```hsc
        (<void> ai_vehicle_enter_immediate <ai> <unit> <unit_seat_mapping>)
        ```
        the given group of actors is snapped into a vehicle, in the substring-specified seats (e.g. passenger for pelican)... does not interrupt any actors who are already going to vehicles
  - slug: ai_vehicle_enter_immediate
    info:
      en: |-
        ```hsc
        (<void> ai_vehicle_enter_immediate <ai> <unit>)
        ```
        the given group of actors is snapped into a vehicle
  - slug: ai_enter_squad_vehicles
    info:
      en: |-
        ```hsc
        (<short> ai_enter_squad_vehicles <ai>)
        ```
        Instructs the ai in the given squad to get in all their vehicles
  - slug: ai_vehicle_exit
    info:
      en: |-
        ```hsc
        (<void> ai_vehicle_exit <ai> <unit_seat_mapping>)
        ```
        tells a group of actors to get out of any vehicles that they are in (if their seat matches the substring)
  - slug: ai_vehicle_exit
    info:
      en: |-
        ```hsc
        (<void> ai_vehicle_exit <ai>)
        ```
        tells a group of actors to get out of any vehicles that they are in
  - slug: vehicle_overturned
    info:
      en: |-
        ```hsc
        (<boolean> vehicle_overturned <vehicle>)
        ```
        Returns true if the vehicle is overturned
  - slug: vehicle_flip
    info:
      en: |-
        ```hsc
        (<void> vehicle_flip <vehicle>)
        ```
        Flips an overturned vehicle
  - slug: ai_combat_status
    info:
      en: |-
        ```hsc
        (<short> ai_combat_status <ai>)
        ```
        Returns the highest integer combat status in the given squad-group/squad/actor
  - slug: flock_start
    info:
      en: |-
        ```hsc
        (<boolean> flock_start <string_id>)
        ```
        The flock starts producing boids
  - slug: flock_stop
    info:
      en: |-
        ```hsc
        (<boolean> flock_stop <string_id>)
        ```
        The flock stops producing boids
  - slug: flock_create
    info:
      en: |-
        ```hsc
        (<boolean> flock_create <string_id>)
        ```
        Create the given flock
  - slug: flock_delete
    info:
      en: |-
        ```hsc
        (<boolean> flock_delete <string_id>)
        ```
        Delete the given flock
  - slug: ai_verify_tags
    info:
      en: |-
        ```hsc
        (<void> ai_verify_tags)
        ```
        Verifies state of ai-related tags (e.g. orders, squads, zones, etc.)
  - slug: ai_wall_lean
    info:
      en: |-
        ```hsc
        (<boolean> ai_wall_lean <ai>)
        ```
        Makes the actor lean against a wall RIGHT NOW
  - slug: ai_play_line
    info:
      en: |-
        ```hsc
        (<real> ai_play_line <ai> <string_id>)
        ```
        Play the given mission dialogue line on the given ai
  - slug: ai_play_line_at_player
    info:
      en: |-
        ```hsc
        (<real> ai_play_line_at_player <ai> <string_id>)
        ```
        Play the given mission dialogue line on the given ai, directing the ai's gaze at the nearest visible player
  - slug: ai_play_line_on_object
    info:
      en: |-
        ```hsc
        (<real> ai_play_line_on_object <object> <string_id>)
        ```
        Play the given mission dialogue line on the given object (uses first available variant)
  - slug: ai_scene
    info:
      en: |-
        ```hsc
        (<boolean> ai_scene <string_id> <ai_command_script> <ai>)
        ```
        Start the named scene, with the named command script on the named squad
  - slug: ai_scene
    info:
      en: |-
        ```hsc
        (<boolean> ai_scene <string_id> <ai_command_script> <ai> <ai>)
        ```
        Start the named scene, with the named command script on the named set of squads
  - slug: ai_scene
    info:
      en: |-
        ```hsc
        (<boolean> ai_scene <string_id> <ai_command_script> <ai> <ai> <ai>)
        ```
        Start the named scene, with the named command script on the named set of squads
  - slug: cs_run_command_script
    info:
      en: |-
        ```hsc
        (<void> cs_run_command_script <ai> <ai_command_script>)
        ```
        Causes the specified actor(s) to start executing a command script immediately (discarding any other command scripts in the queue)
  - slug: cs_queue_command_script
    info:
      en: |-
        ```hsc
        (<void> cs_queue_command_script <ai> <ai_command_script>)
        ```
        Add a command script onto the end of an actor's command script queue
  - slug: cs_stack_command_script
    info:
      en: |-
        ```hsc
        (<void> cs_stack_command_script <ai> <ai_command_script>)
        ```
        Push a command script to the top of the actor's command script queue
  - slug: cs_run_joint_command_script
    info:
      en: |-
        ```hsc
        (<void> cs_run_joint_command_script <ai_command_script> <ai> <ai>)
        ```
        Causes the specified actor(s) to start executing a command script immediately (discarding any other command scripts in the queue)
  - slug: cs_run_joint_command_script
    info:
      en: |-
        ```hsc
        (<void> cs_run_joint_command_script <ai_command_script> <ai> <ai> <ai>)
        ```
        Causes the specified actor(s) to start executing a command script immediately (discarding any other command scripts in the queue)
  - slug: cs_command_script_running
    info:
      en: |-
        ```hsc
        (<boolean> cs_command_script_running <ai> <ai_command_script>)
        ```
        Returns true if the ai is running the command script in question
  - slug: cs_command_script_queued
    info:
      en: |-
        ```hsc
        (<boolean> cs_command_script_queued <ai> <ai_command_script>)
        ```
        Returns true if the command script is in the ai's cs queue
  - slug: cs_number_queued
    info:
      en: |-
        ```hsc
        (<short> cs_number_queued <ai>)
        ```
        Returns the number of queued command scripts
  - slug: cs_switch
    info:
      en: |-
        ```hsc
        (<void> cs_switch <string_id>)
        ```
        Switch control of the joint command script to the given member
  - slug: cs_switch_index
    info:
      en: |-
        ```hsc
        (<void> cs_switch_index <short>)
        ```
        Switch control of the joint command script to the given member
  - slug: cs_transfer
    info:
      en: |-
        ```hsc
        (<void> cs_transfer <ai>)
        ```
        Transfer control of the command script to the given actor (replacing what he has)
  - slug: cs_transfer_stack
    info:
      en: |-
        ```hsc
        (<void> cs_transfer_stack <ai>)
        ```
        Transfer control of the command script to the given actor (stacking it)
  - slug: cs_transfer_queue
    info:
      en: |-
        ```hsc
        (<void> cs_transfer_queue <ai>)
        ```
        Transfer control of the command script to the given actor (queueing it)
  - slug: cs_fly_to
    info:
      en: |-
        ```hsc
        (<void> cs_fly_to <point reference>)
        ```
        Flies the actor to the given point
  - slug: cs_fly_to
    info:
      en: |-
        ```hsc
        (<void> cs_fly_to <point reference> <real>)
        ```
        Flies the actor to the given point (within the given tolerance)
  - slug: cs_fly_to_and_face
    info:
      en: |-
        ```hsc
        (<void> cs_fly_to_and_face <point reference> <point reference>)
        ```
        Flies the actor to the given point and orients him in the appropriate direction
  - slug: cs_fly_to_and_face
    info:
      en: |-
        ```hsc
        (<void> cs_fly_to_and_face <point reference> <point reference> <real>)
        ```
        Flies the actor to the given point and orients him in the appropriate direction (within the given tolerance)
  - slug: cs_fly_by
    info:
      en: |-
        ```hsc
        (<void> cs_fly_by <point reference>)
        ```
        Flies the actor through the given point
  - slug: cs_fly_by
    info:
      en: |-
        ```hsc
        (<void> cs_fly_by <point reference> <real>)
        ```
        Flies the actor through the given point (within the given tolerance)
  - slug: cs_go_to
    info:
      en: |-
        ```hsc
        (<void> cs_go_to <point reference>)
        ```
        Moves the actor to a specified point
  - slug: cs_go_to
    info:
      en: |-
        ```hsc
        (<void> cs_go_to <point reference> <real>)
        ```
        Moves the actor to a specified point, attenuating throttle by the given amount when near the goal
  - slug: cs_go_by
    info:
      en: |-
        ```hsc
        (<void> cs_go_by <point reference> <point reference>)
        ```
        Actor moves toward the point, and considers it hit when it breaks the indicated plane
  - slug: cs_go_by
    info:
      en: |-
        ```hsc
        (<void> cs_go_by <point reference> <point reference> <real>)
        ```
        Actor moves toward the point, and considers it hit when it breaks the indicated plane, attenuating throttle by the given amount when near the goal
  - slug: cs_go_to_and_face
    info:
      en: |-
        ```hsc
        (<void> cs_go_to_and_face <point reference> <point reference>)
        ```
        Moves the actor to a specified point and has him face the second point
  - slug: cs_start_to
    info:
      en: |-
        ```hsc
        (<void> cs_start_to <point reference>)
        ```
        Moves the actor to a specified point. DOES NOT BLOCK SCRIPT EXECUTION.
  - slug: cs_go_to_nearest
    info:
      en: |-
        ```hsc
        (<void> cs_go_to_nearest <point reference>)
        ```
        Given a point set, AI goes toward the nearest point
  - slug: cs_moving
    info:
      en: |-
        ```hsc
        (<boolean> cs_moving)
        ```
        Returns TRUE if the actor is currently following a path
  - slug: cs_look
    info:
      en: |-
        ```hsc
        (<void> cs_look <boolean> <point reference>)
        ```
        Actor looks at the point for the remainder of the cs, or until overridden
  - slug: cs_look_player
    info:
      en: |-
        ```hsc
        (<void> cs_look_player <boolean>)
        ```
        Actor looks at nearest player for the duration of the cs, or until overridden
  - slug: cs_look_object
    info:
      en: |-
        ```hsc
        (<void> cs_look_object <boolean> <object>)
        ```
        Actor looks at the object for the duration of the cs, or until overridden
  - slug: cs_aim
    info:
      en: |-
        ```hsc
        (<void> cs_aim <boolean> <point reference>)
        ```
        Actor aims at the point for the remainder of the cs, or until overridden (overrides look)
  - slug: cs_aim_player
    info:
      en: |-
        ```hsc
        (<void> cs_aim_player <boolean>)
        ```
        Actor aims at nearest player for the duration of the cs, or until overridden (overrides look)
  - slug: cs_aim_object
    info:
      en: |-
        ```hsc
        (<void> cs_aim_object <boolean> <object>)
        ```
        Actor aims at the object for the duration of the cs, or until overridden (overrides look)
  - slug: cs_face
    info:
      en: |-
        ```hsc
        (<void> cs_face <boolean> <point reference>)
        ```
        Actor faces exactly the point for the remainder of the cs, or until overridden (overrides aim, look)
  - slug: cs_face_player
    info:
      en: |-
        ```hsc
        (<void> cs_face_player <boolean>)
        ```
        Actor faces exactly the nearest player for the duration of the cs, or until overridden (overrides aim, look)
  - slug: cs_face_object
    info:
      en: |-
        ```hsc
        (<void> cs_face_object <boolean> <object>)
        ```
        Actor faces exactly the given object for the duration of the cs, or until overridden (overrides aim, look)
  - slug: cs_move_in_direction
    info:
      en: |-
        ```hsc
        (<void> cs_move_in_direction <real> <real> <real>)
        ```
        Actor moves at given angle, for the given distance, optionally with the given facing (angle, distance, facing)
  - slug: cs_pause
    info:
      en: |-
        ```hsc
        (<void> cs_pause <real>)
        ```
        The actor does nothing for the given number of seconds
  - slug: cs_shoot
    info:
      en: |-
        ```hsc
        (<void> cs_shoot <boolean>)
        ```
        Actor is allowed to shoot at its target or not
  - slug: cs_shoot
    info:
      en: |-
        ```hsc
        (<void> cs_shoot <boolean> <object>)
        ```
        Actor shoots at given target
  - slug: cs_shoot_point
    info:
      en: |-
        ```hsc
        (<void> cs_shoot_point <boolean> <point reference>)
        ```
        Actor shoots at given point
  - slug: cs_vehicle_speed
    info:
      en: |-
        ```hsc
        (<void> cs_vehicle_speed <real>)
        ```
        Set the speed at which the actor will drive a vehicle, expressed as a multiplier 0-1
  - slug: cs_grenade
    info:
      en: |-
        ```hsc
        (<void> cs_grenade <point reference> <short>)
        ```
        Actor throws a grenade, either by tossing (arg2=0), lobbing (1) or bouncing (2)
  - slug: cs_jump
    info:
      en: |-
        ```hsc
        (<void> cs_jump <real> <real>)
        ```
        Actor jumps in direction of angle at the given velocity (angle, velocity)
  - slug: cs_jump_to_point
    info:
      en: |-
        ```hsc
        (<void> cs_jump_to_point <real> <real>)
        ```
        Actor jumps with given horizontal and vertical velocity
  - slug: cs_vocalize
    info:
      en: |-
        ```hsc
        (<void> cs_vocalize <short>)
        ```
        Actor emits vocalization of given type
  - slug: cs_play_sound
    info:
      en: |-
        ```hsc
        (<void> cs_play_sound <sound>)
        ```
        Actor plays an impulse sound and the atom blocks until it is complete
  - slug: cs_play_sound
    info:
      en: |-
        ```hsc
        (<void> cs_play_sound <sound> <real>)
        ```
        Actor plays an impulse sound and the atom blocks for the given percentage of the sound's total length
  - slug: cs_play_sound
    info:
      en: |-
        ```hsc
        (<void> cs_play_sound <sound> <real> <real>)
        ```
        Actor plays an impulse sound and the atom blocks for the given percentage of the sound's total length, at the given volume (0..1)
  - slug: cs_stop_sound
    info:
      en: |-
        ```hsc
        (<void> cs_stop_sound <sound>)
        ```
        Stops the specified impulse sound.
  - slug: cs_custom_animation
    info:
      en: |-
        ```hsc
        (<void> cs_custom_animation <animation_graph> <string_id> <real> <boolean>)
        ```
        starts a custom animation playing on the unit (interpolates into animation if last parameter is TRUE)
  - slug: cs_stop_custom_animation
    info:
      en: |-
        ```hsc
        (<void> cs_stop_custom_animation)
        ```
        Stop running a custom animation
  - slug: cs_play_line
    info:
      en: |-
        ```hsc
        (<void> cs_play_line <string_id>)
        ```
        Play the named line in the current scene
  - slug: cs_die
    info:
      en: |-
        ```hsc
        (<void> cs_die <short>)
        ```
        Actor dies in specified manner
  - slug: cs_teleport
    info:
      en: |-
        ```hsc
        (<void> cs_teleport <point reference> <point reference>)
        ```
        Actor teleports to point1 facing point2
  - slug: cs_animate
    info:
      en: |-
        ```hsc
        (<void> cs_animate <long> <short>)
        ```
        Actor performs animation with given modifier (anim-ref, modifier)
  - slug: cs_movement_mode
    info:
      en: |-
        ```hsc
        (<void> cs_movement_mode <short>)
        ```
        Actor switches to given animation mode
  - slug: cs_crouch
    info:
      en: |-
        ```hsc
        (<void> cs_crouch <boolean>)
        ```
        Actor crouches for the remainder of the command script, or until overridden
  - slug: cs_crouch
    info:
      en: |-
        ```hsc
        (<void> cs_crouch <boolean> <real>)
        ```
        Actor crouches / uncrouches, transitioning over the given number of seconds
  - slug: cs_set_pathfinding_radius
    info:
      en: |-
        ```hsc
        (<void> cs_set_pathfinding_radius <real>)
        ```
        Sets the actor's pathfinding radius (this distance at which a destination is considered to have been reached) for the remainder of the command script
  - slug: cs_go_to_vehicle
    info:
      en: |-
        ```hsc
        (<void> cs_go_to_vehicle <vehicle>)
        ```
        Actor gets in the appropriate vehicle
  - slug: cs_set_behavior
    info:
      en: |-
        ```hsc
        (<void> cs_set_behavior <ai_behavior>)
        ```
        Actor performs the indicated behavior
  - slug: cs_formation
    info:
      en: |-
        ```hsc
        (<void> cs_formation <short> <ai> <point reference> <point reference>)
        ```
        Actor initiates a formation of the given type at the given point, facing (initially) at the given other point. Formation types are (0) 1x column (1) 2x column ... (4) wall (5) wedge.
  - slug: cs_deploy_turret
    info:
      en: |-
        ```hsc
        (<void> cs_deploy_turret <point reference>)
        ```
        Deploy a turret at the given script point
  - slug: cs_approach
    info:
      en: |-
        ```hsc
        (<void> cs_approach <object> <real> <real> <real>)
        ```
        (approach <object> <distance> <max-distance> <follow-distance>)
  - slug: cs_start_approach
    info:
      en: |-
        ```hsc
        (<void> cs_start_approach <object> <real> <real> <real>)
        ```
        (approach <object> <distance> <max-distance> <follow-distance>) NON-BLOCKING
  - slug: cs_approach_player
    info:
      en: |-
        ```hsc
        (<void> cs_approach_player <real> <real> <real>)
        ```
        (approach player <distance> <max-distance> <follow-distance>)
  - slug: cs_start_approach_player
    info:
      en: |-
        ```hsc
        (<void> cs_start_approach_player <real> <real> <real>)
        ```
        (approach <distance> <max-distance> <follow-distance>) NON-BLOCKING
  - slug: cs_approach_stop
    info:
      en: |-
        ```hsc
        (<void> cs_approach_stop)
        ```
        Actor stops approaching
  - slug: cs_ignore_obstacles
    info:
      en: |-
        ```hsc
        (<void> cs_ignore_obstacles <boolean>)
        ```
        Actor does not avoid obstacles when true
  - slug: cs_turn_sharpness
    info:
      en: |-
        ```hsc
        (<void> cs_turn_sharpness <boolean> <real>)
        ```
        Set the sharpness of a vehicle turn (values 0 -> 1). Only applicable to nondirectional flying vehicles (e.g. dropships)
  - slug: cs_vehicle_speed_instantaneous
    info:
      en: |-
        ```hsc
        (<void> cs_vehicle_speed_instantaneous <real>)
        ```
        Set the instantaneous speed of the vehicle we're driving
  - slug: cs_vehicle_boost
    info:
      en: |-
        ```hsc
        (<void> cs_vehicle_boost <boolean>)
        ```
        Enables or disables boost
  - slug: cs_abort_on_alert
    info:
      en: |-
        ```hsc
        (<void> cs_abort_on_alert <boolean>)
        ```
        Command script ends prematurely when actor's combat status raises to 'alert' or higher
  - slug: cs_abort_on_damage
    info:
      en: |-
        ```hsc
        (<void> cs_abort_on_damage <boolean>)
        ```
        Command script ends prematurely when actor is damaged
  - slug: cs_abort_on_combat_status
    info:
      en: |-
        ```hsc
        (<void> cs_abort_on_combat_status <short>)
        ```
        Command script ends prematurely when actor's combat status rises to given level
  - slug: cs_enable_targeting
    info:
      en: |-
        ```hsc
        (<void> cs_enable_targeting <boolean>)
        ```
        Actor autonomous target selection enabled/disabled.
  - slug: cs_enable_looking
    info:
      en: |-
        ```hsc
        (<void> cs_enable_looking <boolean>)
        ```
        Actor autonomous looking enabled/disabled.
  - slug: cs_enable_moving
    info:
      en: |-
        ```hsc
        (<void> cs_enable_moving <boolean>)
        ```
        Actor autonomous moving enabled/disabled.
  - slug: cs_enable_dialogue
    info:
      en: |-
        ```hsc
        (<void> cs_enable_dialogue <boolean>)
        ```
        Actor combat dialogue enabled/disabled.
  - slug: cs_suppress_dialogue_global
    info:
      en: |-
        ```hsc
        (<void> cs_suppress_dialogue_global <boolean>)
        ```
        Combat dialogue is suppressed for the remainder of the command script
  - slug: cs_set_style
    info:
      en: |-
        ```hsc
        (<void> cs_set_style <style>)
        ```
        Override the actor's style
  - slug: cs_force_combat_status
    info:
      en: |-
        ```hsc
        (<void> cs_force_combat_status <short>)
        ```
        Force the actor's combat status (0= no override, 1= asleep, 2=idle, 3= alert, 4= active)
  - slug: cs_enable_pathfinding_failsafe
    info:
      en: |-
        ```hsc
        (<void> cs_enable_pathfinding_failsafe <boolean>)
        ```
        Actor blocks until pathfinding calls succeed
  - slug: camera_control
    info:
      en: |-
        ```hsc
        (<void> camera_control <boolean>)
        ```
        toggles script control of the camera.
  - slug: camera_set
    info:
      en: |-
        ```hsc
        (<void> camera_set <cutscene_camera_point> <short>)
        ```
        moves the camera to the specified camera point over the specified number of ticks.
  - slug: camera_set_relative
    info:
      en: |-
        ```hsc
        (<void> camera_set_relative <cutscene_camera_point> <short> <object>)
        ```
        moves the camera to the specified camera point over the specified number of ticks (position is relative to the specified object).
  - slug: camera_set_animation
    info:
      en: |-
        ```hsc
        (<void> camera_set_animation <animation_graph> <string_id>)
        ```
        begins a prerecorded camera animation.
  - slug: camera_set_animation_relative
    info:
      en: |-
        ```hsc
        (<void> camera_set_animation_relative <animation_graph> <string_id> <unit> <cutscene_flag>)
        ```
        begins a prerecorded camera animation synchronized to unit relative to cutscene flag.
  - slug: camera_predict_resources_at_frame
    info:
      en: |-
        ```hsc
        (<void> camera_predict_resources_at_frame <animation_graph> <string_id> <unit> <cutscene_flag> <long>)
        ```
        predict resources at a frame in camera animation.
  - slug: camera_predict_resources_at_point
    info:
      en: |-
        ```hsc
        (<void> camera_predict_resources_at_point <cutscene_camera_point>)
        ```
        predict resources given a camera point
  - slug: camera_set_first_person
    info:
      en: |-
        ```hsc
        (<void> camera_set_first_person <unit>)
        ```
        makes the scripted camera follow a unit.
  - slug: camera_place_relative
    info:
      en: |-
        ```hsc
        (<void> camera_place_relative <object>)
        ```
        all subsequent camera placement in sapien be marked as relative to this object
  - slug: camera_place_worldspace
    info:
      en: |-
        ```hsc
        (<void> camera_place_worldspace)
        ```
        all subsequent camera placement in sapien will be marked as worldspace
  - slug: camera_time
    info:
      en: |-
        ```hsc
        (<short> camera_time)
        ```
        returns the number of ticks remaining in the current camera interpolation.
  - slug: camera_set_field_of_view
    info:
      en: |-
        ```hsc
        (<void> camera_set_field_of_view <real> <short>)
        ```
        sets the field of view
  - slug: camera_set_pan
    info:
      en: |-
        ```hsc
        (<void> camera_set_pan <cutscene_camera_point> <short>)
        ```
        moves the camera to the specified camera point over the specified number of ticks with a constant speed.
  - slug: camera_pan
    info:
      en: |-
        ```hsc
        (<void> camera_pan <cutscene_camera_point> <cutscene_camera_point> <short> <short> <real> <short> <real>)
        ```
        camera_pan <start point> <end point> <ticks> <ease-in ticks> <start velocity scale> <ease-out ticks> <end velocity scale>
  - slug: debug_camera_save
    info:
      en: |-
        ```hsc
        (<void> debug_camera_save)
        ```
        saves the camera position and facing.
  - slug: debug_camera_load
    info:
      en: |-
        ```hsc
        (<void> debug_camera_load)
        ```
        loads the saved camera position and facing.
  - slug: debug_camera_save_name
    info:
      en: |-
        ```hsc
        (<void> debug_camera_save_name <string>)
        ```
        saves the camera position and facing to filename
  - slug: debug_camera_load_name
    info:
      en: |-
        ```hsc
        (<void> debug_camera_load_name <string>)
        ```
        loads the camera position and facing from filename
  - slug: director_debug_camera
    info:
      en: |-
        ```hsc
        (<void> director_debug_camera <boolean>)
        ```
        enable/disable camera debugging
  - slug: game_difficulty_get
    info:
      en: |-
        ```hsc
        (<game_difficulty> game_difficulty_get)
        ```
        returns the current difficulty setting, but lies to you and will never return easy, instead returning normal
  - slug: game_difficulty_get_real
    info:
      en: |-
        ```hsc
        (<game_difficulty> game_difficulty_get_real)
        ```
        returns the actual current difficulty setting without lying
  - slug: pvs_set_object
    info:
      en: |-
        ```hsc
        (<void> pvs_set_object <object>)
        ```
        sets the specified object as the special place that activates everything it sees.
  - slug: pvs_set_camera
    info:
      en: |-
        ```hsc
        (<void> pvs_set_camera <cutscene_camera_point>)
        ```
        sets the specified cutscene camera point as the special place that activates everything it sees.
  - slug: pvs_clear
    info:
      en: |-
        ```hsc
        (<void> pvs_clear)
        ```
        removes the special place that activates everything it sees.
  - slug: players_unzoom_all
    info:
      en: |-
        ```hsc
        (<void> players_unzoom_all)
        ```
        resets zoom levels on all players
  - slug: player_enable_input
    info:
      en: |-
        ```hsc
        (<void> player_enable_input <boolean>)
        ```
        toggle player input. the player can still free-look, but nothing else.
  - slug: player_disable_movement
    info:
      en: |-
        ```hsc
        (<void> player_disable_movement <boolean>)
        ```
        toggle player input. the look stick works, but nothing else.
  - slug: player_flashlight_on
    info:
      en: |-
        ```hsc
        (<boolean> player_flashlight_on)
        ```
        returns true if any player has a flashlight on
  - slug: player_active_camouflage_on
    info:
      en: |-
        ```hsc
        (<boolean> player_active_camouflage_on)
        ```
        returns true if any player is active camouflaged
  - slug: player_camera_control
    info:
      en: |-
        ```hsc
        (<boolean> player_camera_control <boolean>)
        ```
        enables/disables camera control globally
  - slug: player_action_test_reset
    info:
      en: |-
        ```hsc
        (<void> player_action_test_reset)
        ```
        resets the player action test state so that all tests will return false.
  - slug: player_action_test_jump
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_jump)
        ```
        returns true if any player has jumped since the last call to (player_action_test_reset).
  - slug: player_action_test_primary_trigger
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_primary_trigger)
        ```
        returns true if any player has used primary trigger since the last call to (player_action_test_reset).
  - slug: player_action_test_grenade_trigger
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_grenade_trigger)
        ```
        returns true if any player has used grenade trigger since the last call to (player_action_test_reset).
  - slug: player_action_test_vision_trigger
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_vision_trigger)
        ```
        returns true if any player has used vision trigger since the last call to (player_action_test_reset).
  - slug: player_action_test_zoom
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_zoom)
        ```
        returns true if any player has hit the zoom button since the last call to (player_action_test_reset).
  - slug: player_action_test_rotate_weapons
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_rotate_weapons)
        ```
        returns true if any player has hit the rotate-weapon button since the last call to (player_action_test_reset).
  - slug: player_action_test_rotate_grenades
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_rotate_grenades)
        ```
        returns true if any player has hit the rotate-grenades button since the last call to (player_action_test_reset).
  - slug: player_action_test_melee
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_melee)
        ```
        returns true if any player has hit the melee button since the last call to (player_action_test_reset).
  - slug: player_action_test_action
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_action)
        ```
        returns true if any player has hit the action key since the last call to (player_action_test_reset).
  - slug: player_action_test_accept
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_accept)
        ```
        returns true if any player has hit accept since the last call to (player_action_test_reset).
  - slug: player_action_test_cancel
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_cancel)
        ```
        returns true if any player has hit cancel key since the last call to (player_action_test_reset).
  - slug: player_action_test_look_relative_up
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_look_relative_up)
        ```
        returns true if any player has looked up since the last call to (player_action_test_reset).
  - slug: player_action_test_look_relative_down
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_look_relative_down)
        ```
        returns true if any player has looked down since the last call to (player_action_test_reset).
  - slug: player_action_test_look_relative_left
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_look_relative_left)
        ```
        returns true if any player has looked left since the last call to (player_action_test_reset).
  - slug: player_action_test_look_relative_right
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_look_relative_right)
        ```
        returns true if any player has looked right since the last call to (player_action_test_reset).
  - slug: player_action_test_look_relative_all_directions
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_look_relative_all_directions)
        ```
        returns true if any player has looked up, down, left, and right since the last call to (player_action_test_reset).
  - slug: player_action_test_move_relative_all_directions
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_move_relative_all_directions)
        ```
        returns true if any player has moved forward, backward, left, and right since the last call to (player_action_test_reset).
  - slug: player_action_test_start
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_start)
        ```
        returns true if any player has pressed the start button since the last call to (player_action_test_reset).
  - slug: player_action_test_back
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_back)
        ```
        returns true if any player has pressed the back button since the last call to (player_action_test_reset).
  - slug: player0_looking_up
    info:
      en: |-
        ```hsc
        (<boolean> player0_looking_up)
        ```
        true if the first player is looking up
  - slug: player0_looking_down
    info:
      en: |-
        ```hsc
        (<boolean> player0_looking_down)
        ```
        true if the first player is looking down
  - slug: player_action_test_look_up_begin
    info:
      en: |-
        ```hsc
        (<void> player_action_test_look_up_begin)
        ```
        sets up player look up test
  - slug: player_action_test_look_down_begin
    info:
      en: |-
        ```hsc
        (<void> player_action_test_look_down_begin)
        ```
        sets down player look down test
  - slug: player_action_test_look_pitch_end
    info:
      en: |-
        ```hsc
        (<void> player_action_test_look_pitch_end)
        ```
        ends the look pitch testing
  - slug: player_action_test_lookstick_forward
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_lookstick_forward)
        ```
        true if the first player pushed forward on lookstick
  - slug: player_action_test_lookstick_backward
    info:
      en: |-
        ```hsc
        (<boolean> player_action_test_lookstick_backward)
        ```
        true if the first player pushed backward on lookstick
  - slug: debug_teleport_player
    info:
      en: |-
        ```hsc
        (<void> debug_teleport_player <long> <long>)
        ```
        for testing: teleports one player to another's location
  - slug: map_reset
    info:
      en: |-
        ```hsc
        (<void> map_reset)
        ```
        starts the map from the beginning.
  - slug: switch_bsp
    info:
      en: |-
        ```hsc
        (<void> switch_bsp <short>)
        ```
        takes off your condom and changes to a different structure bsp
  - slug: switch_bsp_by_name
    info:
      en: |-
        ```hsc
        (<void> switch_bsp_by_name <structure_bsp>)
        ```
        leaves your condom on and changes to a different structure bsp by name
  - slug: structure_bsp_index
    info:
      en: |-
        ```hsc
        (<short> structure_bsp_index)
        ```
        returns the current structure bsp index
  - slug: crash
    info:
      en: |-
        ```hsc
        (<void> crash <string>)
        ```
        crashes (for debugging).
  - slug: version
    info:
      en: |-
        ```hsc
        (<void> version)
        ```
        prints the build version.
  - slug: record_movie
    info:
      en: |-
        ```hsc
        (<void> record_movie <short> <long> <short>)
        ```
        <frame rate> <seconds> <screen size>
  - slug: record_movie_distributed
    info:
      en: |-
        ```hsc
        (<void> record_movie_distributed <short> <long> <short> <long> <long>)
        ```
        <frame rate> <seconds> <screen size> <mod count> <mod index>
  - slug: screenshot
    info:
      en: |-
        ```hsc
        (<void> screenshot <string>)
        ```
        takes a screenshot and saves as <name>.tif
  - slug: screenshot_big
    info:
      en: |-
        ```hsc
        (<void> screenshot_big <short> <string>)
        ```
        takes an NxN multiple-page screenshot and saves as <name>.tif
  - slug: screenshot_big_jittered
    info:
      en: |-
        ```hsc
        (<void> screenshot_big_jittered <short> <string>)
        ```
        takes an NxN subpixel sampled 640x480 screenshot and saves as <name>.tif
  - slug: screenshot_cubemap
    info:
      en: |-
        ```hsc
        (<void> screenshot_cubemap <string>)
        ```
        takes a cubemap screenshot and saves as <name>.tif
  - slug: main_menu
    info:
      en: |-
        ```hsc
        (<void> main_menu)
        ```
        goes back to the main menu
  - slug: main_halt
    info:
      en: |-
        ```hsc
        (<void> main_halt)
        ```
        goes to a halted pregame state
  - slug: map_name
    info:
      en: |-
        ```hsc
        (<void> map_name <string>)
        ```
        the same as game_start: launches a game for debugging purposes
  - slug: game_multiplayer
    info:
      en: |-
        ```hsc
        (<void> game_multiplayer <string>)
        ```
        debug map launching: sets the multiplayer variant for the next map.
  - slug: game_splitscreen
    info:
      en: |-
        ```hsc
        (<void> game_splitscreen <long>)
        ```
        debug map launching: sets the number of multiplayer splitscreen players for the next map.
  - slug: game_difficulty
    info:
      en: |-
        ```hsc
        (<void> game_difficulty <game_difficulty>)
        ```
        debug map launching: sets the difficulty of the next map.
  - slug: game_coop_players
    info:
      en: |-
        ```hsc
        (<void> game_coop_players <long>)
        ```
        debug map launching: sets the number of coop players for the next map.
  - slug: game_initial_bsp
    info:
      en: |-
        ```hsc
        (<void> game_initial_bsp <long>)
        ```
        debug map launching: sets the initial bsp for the next map.
  - slug: game_tick_rate
    info:
      en: |-
        ```hsc
        (<void> game_tick_rate <long>)
        ```
        debug map launching: sets the tick rate for the next map.
  - slug: game_start
    info:
      en: |-
        ```hsc
        (<void> game_start <string>)
        ```
        debug map launching: starts a game on the specified map.
  - slug: game_rate
    info:
      en: |-
        ```hsc
        (<void> game_rate <real> <real> <real>)
        ```
        changes game update rate (DANGER: only use if you know what you're doing!)
  - slug: debug_memory
    info:
      en: |-
        ```hsc
        (<void> debug_memory)
        ```
        dumps memory leaks.
  - slug: debug_memory_by_file
    info:
      en: |-
        ```hsc
        (<void> debug_memory_by_file)
        ```
        dumps memory leaks by source file.
  - slug: debug_memory_for_file
    info:
      en: |-
        ```hsc
        (<void> debug_memory_for_file <string>)
        ```
        dumps memory leaks from the specified source file.
  - slug: debug_tags
    info:
      en: |-
        ```hsc
        (<void> debug_tags)
        ```
        writes all memory being used by tag files into tag_dump.txt
  - slug: tags_verify_all
    info:
      en: |-
        ```hsc
        (<void> tags_verify_all)
        ```
        verifies usage of infidel fields is correct
  - slug: damage_control_get
    info:
      en: |-
        ```hsc
        (<void> damage_control_get <string>)
        ```
        gets a damage control setting by string
  - slug: damage_control_set
    info:
      en: |-
        ```hsc
        (<void> damage_control_set <string> <boolean>)
        ```
        sets a damage control setting by string
  - slug: ai_debug_sound_point_set
    info:
      en: |-
        ```hsc
        (<void> ai_debug_sound_point_set)
        ```
        drops the AI debugging sound point at the camera location
  - slug: ai_dialogue_break_on_vocalization
    info:
      en: |-
        ```hsc
        (<void> ai_dialogue_break_on_vocalization <string_id>)
        ```
        break when the following vocalization is chosen for utterance
  - slug: fade_in
    info:
      en: |-
        ```hsc
        (<void> fade_in <real> <real> <real> <short>)
        ```
        does a screen fade in from a particular color
  - slug: fade_out
    info:
      en: |-
        ```hsc
        (<void> fade_out <real> <real> <real> <short>)
        ```
        does a screen fade out to a particular color
  - slug: cinematic_start
    info:
      en: |-
        ```hsc
        (<void> cinematic_start)
        ```
        initializes game to start a cinematic (interruptive) cutscene
  - slug: cinematic_stop
    info:
      en: |-
        ```hsc
        (<void> cinematic_stop)
        ```
        initializes the game to end a cinematic (interruptive) cutscene
  - slug: cinematic_skip_start_internal
    info:
      en: |-
        ```hsc
        (<void> cinematic_skip_start_internal)
        ```
  - slug: cinematic_skip_stop_internal
    info:
      en: |-
        ```hsc
        (<void> cinematic_skip_stop_internal)
        ```
  - slug: cinematic_show_letterbox
    info:
      en: |-
        ```hsc
        (<void> cinematic_show_letterbox <boolean>)
        ```
        sets or removes the letterbox bars
  - slug: cinematic_show_letterbox_immediate
    info:
      en: |-
        ```hsc
        (<void> cinematic_show_letterbox_immediate <boolean>)
        ```
        sets or removes the letterbox bars
  - slug: cinematic_set_title
    info:
      en: |-
        ```hsc
        (<void> cinematic_set_title <cutscene_title>)
        ```
        activates the chapter title
  - slug: cinematic_set_title_delayed
    info:
      en: |-
        ```hsc
        (<void> cinematic_set_title_delayed <cutscene_title> <real>)
        ```
        activates the chapter title, delayed by <real> seconds
  - slug: cinematic_suppress_bsp_object_creation
    info:
      en: |-
        ```hsc
        (<void> cinematic_suppress_bsp_object_creation <boolean>)
        ```
        suppresses or enables the automatic creation of objects during cutscenes due to a bsp switch
  - slug: cinematic_subtitle
    info:
      en: |-
        ```hsc
        (<void> cinematic_subtitle <string_id> <real>)
        ```
        displays the named subtitle for <real> seconds
  - slug: attract_mode_start
    info:
      en: |-
        ```hsc
        (<void> attract_mode_start)
        ```
        starts an attract mode movie
  - slug: attract_mode_set_seconds
    info:
      en: |-
        ```hsc
        (<void> attract_mode_set_seconds <long>)
        ```
        sets number of seconds of the attract mode countdown timer.
  - slug: game_won
    info:
      en: |-
        ```hsc
        (<void> game_won)
        ```
        causes the player to successfully finish the current level and move to the next
  - slug: game_lost
    info:
      en: |-
        ```hsc
        (<void> game_lost <boolean>)
        ```
        marks the game as lost or not lost
  - slug: game_revert
    info:
      en: |-
        ```hsc
        (<void> game_revert)
        ```
        causes the player to revert to his previous saved game (for testing, the first bastard that does this to me gets it in the head)
  - slug: game_is_cooperative
    info:
      en: |-
        ```hsc
        (<boolean> game_is_cooperative)
        ```
        returns TRUE if the game is cooperative
  - slug: game_is_playtest
    info:
      en: |-
        ```hsc
        (<boolean> game_is_playtest)
        ```
        returns the hs global boolean 'global_playtest_mode' which can be set in your init.txt
  - slug: game_can_use_flashlights
    info:
      en: |-
        ```hsc
        (<void> game_can_use_flashlights <boolean>)
        ```
        allows or disallows the user of player flashlights
  - slug: game_save_and_quit
    info:
      en: |-
        ```hsc
        (<void> game_save_and_quit)
        ```
        save & quit to the main menu
  - slug: game_save_unsafe
    info:
      en: |-
        ```hsc
        (<void> game_save_unsafe)
        ```
        saves right now, even if the game is in an immediate-loss state (NEVER USE THIS! EVER!)
  - slug: debug_spawning
    info:
      en: |-
        ```hsc
        (<void> debug_spawning <string> <boolean>)
        ```
        debugs spawn points for the inputted player
  - slug: king_set_hill
    info:
      en: |-
        ```hsc
        (<void> king_set_hill <long>)
        ```
        sets which index the active hill should be
  - slug: core_load
    info:
      en: |-
        ```hsc
        (<void> core_load)
        ```
        loads debug game state from core\core.bin
  - slug: core_load_name
    info:
      en: |-
        ```hsc
        (<void> core_load_name <string>)
        ```
        loads debug game state from core\<path>
  - slug: core_save
    info:
      en: |-
        ```hsc
        (<void> core_save)
        ```
        saves debug game state to core\core.bin
  - slug: core_save_name
    info:
      en: |-
        ```hsc
        (<void> core_save_name <string>)
        ```
        saves debug game state to core\<path>
  - slug: core_load_game
    info:
      en: |-
        ```hsc
        (<void> core_load_game)
        ```
        loads level and game state from core\core.bin
  - slug: core_load_game_name
    info:
      en: |-
        ```hsc
        (<void> core_load_game_name <string>)
        ```
        loads level and game state from core\<path>
  - slug: core_regular_upload_to_debug_server
    info:
      en: |-
        ```hsc
        (<void> core_regular_upload_to_debug_server <boolean>)
        ```
        toggle periodic core uploading to debug server
  - slug: core_set_upload_option
    info:
      en: |-
        ```hsc
        (<void> core_set_upload_option <string>)
        ```
        sets options for game state uploading (current options are 'default', 'repro', and 'stress'
  - slug: game_safe_to_save
    info:
      en: |-
        ```hsc
        (<boolean> game_safe_to_save)
        ```
        returns FALSE if it would be a bad idea to save the player's game right now
  - slug: game_safe_to_speak
    info:
      en: |-
        ```hsc
        (<boolean> game_safe_to_speak)
        ```
        returns FALSE if it would be a bad idea to play mission dialog right now
  - slug: game_all_quiet
    info:
      en: |-
        ```hsc
        (<boolean> game_all_quiet)
        ```
        returns FALSE if there are bad guys around, projectiles in the air, etc.
  - slug: game_save
    info:
      en: |-
        ```hsc
        (<void> game_save)
        ```
        checks to see if it is safe to save game, then saves (gives up after 8 seconds)
  - slug: game_save_cancel
    info:
      en: |-
        ```hsc
        (<void> game_save_cancel)
        ```
        cancels any pending game_save, timeout or not
  - slug: game_save_no_timeout
    info:
      en: |-
        ```hsc
        (<void> game_save_no_timeout)
        ```
        checks to see if it is safe to save game, then saves (this version never gives up)
  - slug: game_save_immediate
    info:
      en: |-
        ```hsc
        (<void> game_save_immediate)
        ```
        disregards player's current situation and saves (BE VERY CAREFUL!)
  - slug: game_saving
    info:
      en: |-
        ```hsc
        (<boolean> game_saving)
        ```
        checks to see if the game is trying to save the map.
  - slug: game_reverted
    info:
      en: |-
        ```hsc
        (<boolean> game_reverted)
        ```
        don't use this for anything, you black-hearted bastards.
  - slug: sound_set_tag_parameter_unsafe
    info:
      en: |-
        ```hsc
        (<void> sound_set_tag_parameter_unsafe <string> <string> <long> <long> <long> <real> <real> <real>)
        ```
        this is the second sign of the coming of the antichrist
  - slug: sound_impulse_predict
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_predict <sound>)
        ```
        your mom part 2.
  - slug: sound_impulse_trigger
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_trigger <sound> <object> <real> <long>)
        ```
        plays an impulse sound from the specified source object (or "none"), with the specified scale.
  - slug: sound_impulse_start
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_start <sound> <object> <real>)
        ```
        plays an impulse sound from the specified source object (or "none"), with the specified scale.
  - slug: sound_impulse_start_cinematic
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_start_cinematic <sound> <object> <real> <real> <real>)
        ```
        <sound> <object> <scale> <3d gain> <first person gain> plays an impulse sound from the specified source object.
  - slug: sound_impulse_start_effect
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_start_effect <sound> <object> <real> <string_id>)
        ```
        plays an impulse sound from the specified source object (or "none"), with the specified scale and effect.
  - slug: sound_impulse_time
    info:
      en: |-
        ```hsc
        (<long> sound_impulse_time <sound>)
        ```
        returns the time remaining for the specified impulse sound.
  - slug: sound_impulse_time
    info:
      en: |-
        ```hsc
        (<long> sound_impulse_time <sound> <long>)
        ```
        <sound> <total playing time> returns the time remaining for the specified impulse sound based on <total playing time>.
  - slug: sound_impulse_language_time
    info:
      en: |-
        ```hsc
        (<long> sound_impulse_language_time <sound>)
        ```
        returns the time remaining for the specified impulse sound. DO NOT CALL IN CUTSCENES.
  - slug: sound_impulse_stop
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_stop <sound>)
        ```
        stops the specified impulse sound.
  - slug: sound_impulse_start_3d
    info:
      en: |-
        ```hsc
        (<void> sound_impulse_start_3d <sound> <real> <real>)
        ```
        <sound> <azimuth> <scale> at the sound's minimum distance
  - slug: sound_looping_predict
    info:
      en: |-
        ```hsc
        (<void> sound_looping_predict <looping_sound>)
        ```
        your mom.
  - slug: sound_looping_start
    info:
      en: |-
        ```hsc
        (<void> sound_looping_start <looping_sound> <object> <real>)
        ```
        plays a looping sound from the specified source object (or "none"), with the specified scale.
  - slug: sound_looping_stop
    info:
      en: |-
        ```hsc
        (<void> sound_looping_stop <looping_sound>)
        ```
        stops the specified looping sound.
  - slug: sound_looping_stop_immediately
    info:
      en: |-
        ```hsc
        (<void> sound_looping_stop_immediately <looping_sound>)
        ```
        stops the specified looping sound immediately.
  - slug: sound_looping_set_scale
    info:
      en: |-
        ```hsc
        (<void> sound_looping_set_scale <looping_sound> <real>)
        ```
        changes the scale of the sound (which should affect the volume) within the range 0 to 1.
  - slug: sound_looping_set_alternate
    info:
      en: |-
        ```hsc
        (<void> sound_looping_set_alternate <looping_sound> <boolean>)
        ```
        enables or disables the alternate loop/alternate end for a looping sound.
  - slug: sound_loop_spam
    info:
      en: |-
        ```hsc
        (<void> sound_loop_spam)
        ```
        start all loaded looping sounds
  - slug: sound_class_show_channel
    info:
      en: |-
        ```hsc
        (<void> sound_class_show_channel <string> <boolean>)
        ```
        shows/hides sound classes w/ substring in debug_sound_channels view
  - slug: sound_class_debug_sound_start
    info:
      en: |-
        ```hsc
        (<void> sound_class_debug_sound_start <string> <boolean>)
        ```
        shows/hides when sounds of sound classes w/ substring start
  - slug: debug_sounds_enable
    info:
      en: |-
        ```hsc
        (<void> debug_sounds_enable <string> <boolean>)
        ```
        enables or disables all sound classes matching the substring.
  - slug: sound_class_set_gain
    info:
      en: |-
        ```hsc
        (<void> sound_class_set_gain <string> <real> <short>)
        ```
        changes the gain on the specified sound class(es) to the specified gain over the specified number of ticks.
  - slug: sound_class_set_gain_db
    info:
      en: |-
        ```hsc
        (<void> sound_class_set_gain_db <string> <real> <short>)
        ```
        changes the gain on the specified sound class(es) to the specified gain(dB) over the specified number of ticks.
  - slug: sound_class_enable_ducker
    info:
      en: |-
        ```hsc
        (<void> sound_class_enable_ducker <string> <boolean>)
        ```
        enables or disables the ducker on all sound classes matching the substring.
  - slug: debug_sound_environment_parameter
    info:
      en: |-
        ```hsc
        (<void> debug_sound_environment_parameter <long> <real>)
        ```
  - slug: sound_set_global_effect
    info:
      en: |-
        ```hsc
        (<void> sound_set_global_effect <string_id> <real>)
        ```
        bleh
  - slug: sound_set_global_effect_scale
    info:
      en: |-
        ```hsc
        (<void> sound_set_global_effect_scale <string_id> <real>)
        ```
        more bleh
  - slug: sound_set_trace_callback_level
    info:
      en: |-
        ```hsc
        (<void> sound_set_trace_callback_level <long>)
        ```
        set Miles tracing callback depth
  - slug: sound_dump_miles_debug
    info:
      en: |-
        ```hsc
        (<void> sound_dump_miles_debug)
        ```
        dump Miles timing info and other goodies
  - slug: vehicle_hover
    info:
      en: |-
        ```hsc
        (<void> vehicle_hover <vehicle> <boolean>)
        ```
        stops the vehicle from running real physics and runs fake hovering physics instead.
  - slug: vehicle_count_bipeds_killed
    info:
      en: |-
        ```hsc
        (<long> vehicle_count_bipeds_killed <vehicle>)
        ```
        returns how many people this vehicle has killed
  - slug: biped_ragdoll
    info:
      en: |-
        ```hsc
        (<void> biped_ragdoll <unit>)
        ```
        given a dead biped, turns on ragdoll
  - slug: hud_cinematic_fade
    info:
      en: |-
        ```hsc
        (<void> hud_cinematic_fade <real> <real>)
        ```
        parameter 1 is how, parameter 2 is when
  - slug: show_hud
    info:
      en: |-
        ```hsc
        (<boolean> show_hud <boolean>)
        ```
        shows or hides the hud
  - slug: show_hud_help_text
    info:
      en: |-
        ```hsc
        (<boolean> show_hud_help_text <boolean>)
        ```
        shows or hides the hud help text
  - slug: show_hud_messages
    info:
      en: |-
        ```hsc
        (<boolean> show_hud_messages <boolean>)
        ```
        shows or hides the hud messages
  - slug: enable_hud_help_flash
    info:
      en: |-
        ```hsc
        (<void> enable_hud_help_flash <boolean>)
        ```
        starts/stops the help text flashing
  - slug: hud_help_flash_restart
    info:
      en: |-
        ```hsc
        (<void> hud_help_flash_restart)
        ```
        resets the timer for the help text flashing
  - slug: hud_show_training_text
    info:
      en: |-
        ```hsc
        (<void> hud_show_training_text <boolean>)
        ```
        true turns on scripted training text
  - slug: hud_set_training_text
    info:
      en: |-
        ```hsc
        (<void> hud_set_training_text <string_id>)
        ```
        sets the string id fo the scripted training text
  - slug: hud_enable_training
    info:
      en: |-
        ```hsc
        (<void> hud_enable_training <boolean>)
        ```
        true turns training on, false turns it off.
  - slug: player_training_activate_flashlight
    info:
      en: |-
        ```hsc
        (<void> player_training_activate_flashlight)
        ```
        guess
  - slug: player_training_activate_crouch
    info:
      en: |-
        ```hsc
        (<void> player_training_activate_crouch)
        ```
        guess
  - slug: player_training_activate_stealth
    info:
      en: |-
        ```hsc
        (<void> player_training_activate_stealth)
        ```
        guess
  - slug: activate_nav_point_flag
    info:
      en: |-
        ```hsc
        (<void> activate_nav_point_flag <navpoint> <unit> <cutscene_flag> <real>)
        ```
        activates a nav point type <string> attached to (local) player <unit> anchored to a flag with a vertical offset <real>. If the player is not local to the machine, this will fail
  - slug: activate_nav_point_object
    info:
      en: |-
        ```hsc
        (<void> activate_nav_point_object <navpoint> <unit> <object> <real>)
        ```
        activates a nav point type <string> attached to (local) player <unit> anchored to an object with a vertical offset <real>. If the player is not local to the machine, this will fail
  - slug: activate_team_nav_point_flag
    info:
      en: |-
        ```hsc
        (<void> activate_team_nav_point_flag <navpoint> <team> <cutscene_flag> <real>)
        ```
        activates a nav point type <string> attached to a team anchored to a flag with a vertical offset <real>. If the player is not local to the machine, this will fail
  - slug: activate_team_nav_point_object
    info:
      en: |-
        ```hsc
        (<void> activate_team_nav_point_object <navpoint> <team> <object> <real>)
        ```
        activates a nav point type <string> attached to a team anchored to an object with a vertical offset <real>. If the player is not local to the machine, this will fail
  - slug: deactivate_nav_point_flag
    info:
      en: |-
        ```hsc
        (<void> deactivate_nav_point_flag <unit> <cutscene_flag>)
        ```
        deactivates a nav point type attached to a player <unit> anchored to a flag
  - slug: deactivate_nav_point_object
    info:
      en: |-
        ```hsc
        (<void> deactivate_nav_point_object <unit> <object>)
        ```
        deactivates a nav point type attached to a player <unit> anchored to an object
  - slug: deactivate_team_nav_point_flag
    info:
      en: |-
        ```hsc
        (<void> deactivate_team_nav_point_flag <team> <cutscene_flag>)
        ```
        deactivates a nav point type attached to a team anchored to a flag
  - slug: deactivate_team_nav_point_object
    info:
      en: |-
        ```hsc
        (<void> deactivate_team_nav_point_object <team> <object>)
        ```
        deactivates a nav point type attached to a team anchored to an object
  - slug: cls
    info:
      en: |-
        ```hsc
        (<void> cls)
        ```
        clears console text from the screen
  - slug: error_overflow_suppression
    info:
      en: |-
        ```hsc
        (<void> error_overflow_suppression <boolean>)
        ```
        enables or disables the suppression of error spamming
  - slug: player_effect_set_max_translation
    info:
      en: |-
        ```hsc
        (<void> player_effect_set_max_translation <real> <real> <real>)
        ```
        <x> <y> <z>
  - slug: player_effect_set_max_rotation
    info:
      en: |-
        ```hsc
        (<void> player_effect_set_max_rotation <real> <real> <real>)
        ```
        <yaw> <pitch> <roll>
  - slug: player_effect_set_max_vibration
    info:
      en: |-
        ```hsc
        (<void> player_effect_set_max_vibration <real> <real>)
        ```
        <left> <right>
  - slug: player_effect_start
    info:
      en: |-
        ```hsc
        (<void> player_effect_start <real> <real>)
        ```
        <max_intensity> <attack time>
  - slug: player_effect_stop
    info:
      en: |-
        ```hsc
        (<void> player_effect_stop <real>)
        ```
        <decay>
  - slug: hud_clear_messages
    info:
      en: |-
        ```hsc
        (<void> hud_clear_messages)
        ```
        clears all non-state messages on the hud
  - slug: hud_set_help_text
    info:
      en: |-
        ```hsc
        (<void> hud_set_help_text <hud_message>)
        ```
        displays <message> as the help text
  - slug: hud_set_objective_text
    info:
      en: |-
        ```hsc
        (<void> hud_set_objective_text <hud_message>)
        ```
        sets <message> as the current objective
  - slug: hud_set_timer_time
    info:
      en: |-
        ```hsc
        (<void> hud_set_timer_time <short> <short>)
        ```
        sets the time for the timer to <short> minutes and <short> seconds, and starts and displays timer
  - slug: hud_set_timer_warning_time
    info:
      en: |-
        ```hsc
        (<void> hud_set_timer_warning_time <short> <short>)
        ```
        sets the warning time for the timer to <short> minutes and <short> seconds
  - slug: hud_set_timer_position
    info:
      en: |-
        ```hsc
        (<void> hud_set_timer_position <short> <short> <hud_corner>)
        ```
        sets the timer upper left position to (x, y)=>(<short>, <short>)
  - slug: show_hud_timer
    info:
      en: |-
        ```hsc
        (<void> show_hud_timer <boolean>)
        ```
        displays the hud timer
  - slug: pause_hud_timer
    info:
      en: |-
        ```hsc
        (<void> pause_hud_timer <boolean>)
        ```
        pauses or unpauses the hud timer
  - slug: hud_get_timer_ticks
    info:
      en: |-
        ```hsc
        (<short> hud_get_timer_ticks)
        ```
        returns the ticks left on the hud timer
  - slug: rasterizer_debug_display_bitmap
    info:
      en: |-
        ```hsc
        (<void> rasterizer_debug_display_bitmap <string>)
        ```
        displays a bitmap
  - slug: rasterizer_decals_flush
    info:
      en: |-
        ```hsc
        (<void> rasterizer_decals_flush)
        ```
        flush all decals
  - slug: rasterizer_lens_flares_clear_for_frame
    info:
      en: |-
        ```hsc
        (<void> rasterizer_lens_flares_clear_for_frame)
        ```
  - slug: rasterizer_test_screen
    info:
      en: |-
        ```hsc
        (<void> rasterizer_test_screen <long> <real> <real>)
        ```
  - slug: rasterizer_test_screen_supablur
    info:
      en: |-
        ```hsc
        (<void> rasterizer_test_screen_supablur <real> <real> <real> <real> <real>)
        ```
  - slug: rasterizer_test_screen_off
    info:
      en: |-
        ```hsc
        (<void> rasterizer_test_screen_off)
        ```
  - slug: rasterizer_f2
    info:
      en: |-
        ```hsc
        (<void> rasterizer_f2 <real> <real>)
        ```
  - slug: rasterizer_f3
    info:
      en: |-
        ```hsc
        (<void> rasterizer_f3 <real> <real> <real>)
        ```
  - slug: rasterizer_f4
    info:
      en: |-
        ```hsc
        (<void> rasterizer_f4 <real> <real> <real> <real>)
        ```
  - slug: rasterizer_f5
    info:
      en: |-
        ```hsc
        (<void> rasterizer_f5 <real> <real> <real> <real> <real>)
        ```
  - slug: rasterizer_f6
    info:
      en: |-
        ```hsc
        (<void> rasterizer_f6 <real> <real> <real> <real> <real> <real>)
        ```
  - slug: rasterizer_decal_depth_bias
    info:
      en: |-
        ```hsc
        (<void> rasterizer_decal_depth_bias <real>)
        ```
        sets the depth bias offset for decals
  - slug: rasterizer_decal_depth_bias_slope_scale
    info:
      en: |-
        ```hsc
        (<void> rasterizer_decal_depth_bias_slope_scale <real>)
        ```
        sets the depth bias slope scale for decals
  - slug: rasterizer_hud_ten_foot
    info:
      en: |-
        ```hsc
        (<void> rasterizer_hud_ten_foot <short>)
        ```
        sets the 10 foot HUD experience implementation
  - slug: rasterizer_blur
    info:
      en: |-
        ```hsc
        (<void> rasterizer_blur <short>)
        ```
        sets the blur (0=disabled, 1=4x, 2=16x)
  - slug: rasterizer_solid_model_color
    info:
      en: |-
        ```hsc
        (<void> rasterizer_solid_model_color <real> <real> <real> <real>)
        ```
  - slug: rasterizer_solid_structure_color
    info:
      en: |-
        ```hsc
        (<void> rasterizer_solid_structure_color <real> <real> <real> <real>)
        ```
  - slug: rasterizer_solid_structure_instanced_geometry_color
    info:
      en: |-
        ```hsc
        (<void> rasterizer_solid_structure_instanced_geometry_color <real> <real> <real> <real>)
        ```
  - slug: rasterizer_solid_sky_color
    info:
      en: |-
        ```hsc
        (<void> rasterizer_solid_sky_color <real> <real> <real> <real>)
        ```
  - slug: rasterizer_solid_decorator_color
    info:
      en: |-
        ```hsc
        (<void> rasterizer_solid_decorator_color <real> <real> <real> <real>)
        ```
  - slug: rasterizer_solid_decorator_model_color
    info:
      en: |-
        ```hsc
        (<void> rasterizer_solid_decorator_model_color <real> <real> <real> <real>)
        ```
  - slug: rasterizer_solid_decorator_decal_color
    info:
      en: |-
        ```hsc
        (<void> rasterizer_solid_decorator_decal_color <real> <real> <real> <real>)
        ```
  - slug: rasterizer_solid_decorator_sprite_color
    info:
      en: |-
        ```hsc
        (<void> rasterizer_solid_decorator_sprite_color <real> <real> <real> <real>)
        ```
  - slug: decorator_rebuild_all
    info:
      en: |-
        ```hsc
        (<void> decorator_rebuild_all)
        ```
  - slug: script_screen_effect_set_value
    info:
      en: |-
        ```hsc
        (<void> script_screen_effect_set_value <short> <real>)
        ```
        sets a screen effect script value
  - slug: cinematic_screen_effect_start
    info:
      en: |-
        ```hsc
        (<void> cinematic_screen_effect_start <boolean>)
        ```
        starts screen effect pass TRUE to clear
  - slug: cinematic_screen_effect_set_depth_of_field
    info:
      en: |-
        ```hsc
        (<void> cinematic_screen_effect_set_depth_of_field <real> <real> <real> <real> <real> <real> <real>)
        ```
        sets dof: <seperation dist>, <near blur lower bound> <upper bound> <time> <far blur lower bound> <upper bound> <time>
  - slug: cinematic_screen_effect_set_crossfade
    info:
      en: |-
        ```hsc
        (<void> cinematic_screen_effect_set_crossfade <real>)
        ```
        transition-time
  - slug: cinematic_screen_effect_set_crossfade2
    info:
      en: |-
        ```hsc
        (<void> cinematic_screen_effect_set_crossfade2 <real> <real>)
        ```
        transition-time, exponent
  - slug: cinematic_screen_effect_stop
    info:
      en: |-
        ```hsc
        (<void> cinematic_screen_effect_stop)
        ```
        returns control of the screen effects to the rest of the game
  - slug: cinematic_set_near_clip_distance
    info:
      en: |-
        ```hsc
        (<void> cinematic_set_near_clip_distance <real>)
        ```
  - slug: cinematic_set_far_clip_distance
    info:
      en: |-
        ```hsc
        (<void> cinematic_set_far_clip_distance <real>)
        ```
  - slug: cinematic_set_environment_map_attenuation
    info:
      en: |-
        ```hsc
        (<void> cinematic_set_environment_map_attenuation <real> <real> <real>)
        ```
        interpolates environment-map attenuation (on flagged shaders) from <low> to <high> over <time>
  - slug: cinematic_set_environment_map_bitmap
    info:
      en: |-
        ```hsc
        (<void> cinematic_set_environment_map_bitmap <bitmap>)
        ```
        sets environment-map bitmap (on flagged shaders) instantly
  - slug: cinematic_reset_environment_map_bitmap
    info:
      en: |-
        ```hsc
        (<void> cinematic_reset_environment_map_bitmap)
        ```
        resets environment-map bitmap (on flagged shaders) to default instantly
  - slug: cinematic_set_environment_map_tint
    info:
      en: |-
        ```hsc
        (<void> cinematic_set_environment_map_tint <real> <real> <real> <real> <real> <real> <real> <real>)
        ```
        perpendicular color: (red green blue brightness), parallel color: (red green blue brightness)... sets environment-map tint (on flagged shaders) instantly
  - slug: cinematic_reset_environment_map_tint
    info:
      en: |-
        ```hsc
        (<void> cinematic_reset_environment_map_tint)
        ```
        resets environment-map tint (on flagged shaders) to default instantly
  - slug: cinematic_layer
    info:
      en: |-
        ```hsc
        (<void> cinematic_layer <long> <real> <real>)
        ```
        interpolates the value of <cinematic layer x> from current position to <value> over <time>
  - slug: cinematic_dynamic_reflections
    info:
      en: |-
        ```hsc
        (<void> cinematic_dynamic_reflections <boolean> <boolean>)
        ```
        sets up dynamic reflections: <enabled: \[true, false\]> <filtering enabled: \[true, false\]>
  - slug: lightmaps_expose
    info:
      en: |-
        ```hsc
        (<void> lightmaps_expose <real> <real> <real>)
        ```
        re-exposes the lightmap palettes
  - slug: player_profile_create
    info:
      en: |-
        ```hsc
        (<void> player_profile_create <string> <short> <short> <boolean> <boolean> <boolean>)
        ```
        create a player profile
  - slug: player_profile_create_corrupt
    info:
      en: |-
        ```hsc
        (<void> player_profile_create_corrupt <string>)
        ```
        create a corrupt player profile, for ui testing
  - slug: player_has_skills
    info:
      en: |-
        ```hsc
        (<boolean> player_has_skills)
        ```
        Are you the best?
  - slug: player_has_mad_secret_skills
    info:
      en: |-
        ```hsc
        (<void> player_has_mad_secret_skills <long>)
        ```
        You are the best!
  - slug: controller_invert_look
    info:
      en: |-
        ```hsc
        (<void> controller_invert_look)
        ```
        invert look on all attached controllers
  - slug: controller_look_speed
    info:
      en: |-
        ```hsc
        (<void> controller_look_speed <short>)
        ```
        set look speed for all attached controllers
  - slug: controller_set_look_invert
    info:
      en: |-
        ```hsc
        (<void> controller_set_look_invert <boolean>)
        ```
        invert player0's look
  - slug: controller_get_look_invert
    info:
      en: |-
        ```hsc
        (<boolean> controller_get_look_invert)
        ```
        returns TRUE if player0's look pitch is inverted
  - slug: controller_unlock_solo_levels
    info:
      en: |-
        ```hsc
        (<void> controller_unlock_solo_levels <short>)
        ```
        unlocks all the solo player levels for <controller index>'s profile
  - slug: user_interface_controller_get_last_level_played
    info:
      en: |-
        ```hsc
        (<long> user_interface_controller_get_last_level_played <short>)
        ```
        returns index of last completed solo level for profile index passed in
  - slug: ui_debug_load_main_menu
    info:
      en: |-
        ```hsc
        (<void> ui_debug_load_main_menu)
        ```
        loads the main menu screen
  - slug: ui_debug_text_bounds
    info:
      en: |-
        ```hsc
        (<void> ui_debug_text_bounds <boolean>)
        ```
        toggle rendering of ui text boundaries
  - slug: ui_debug_show_title_safe_bounds
    info:
      en: |-
        ```hsc
        (<void> ui_debug_show_title_safe_bounds <boolean>)
        ```
        toggle display of title safe boundary
  - slug: ui_debug_element_bounds
    info:
      en: |-
        ```hsc
        (<void> ui_debug_element_bounds <boolean>)
        ```
        toggle rendering of widget tag block bounds
  - slug: ui_debug_screen_tag
    info:
      en: |-
        ```hsc
        (<void> ui_debug_screen_tag <string>)
        ```
        test a ui screen
  - slug: ui_transition_out_console_window
    info:
      en: |-
        ```hsc
        (<void> ui_transition_out_console_window)
        ```
        transition out any ui on the console window
  - slug: ui_debug_show_screen_tag_path
    info:
      en: |-
        ```hsc
        (<void> ui_debug_show_screen_tag_path <boolean>)
        ```
        display tag path of screens as they load
  - slug: ui_debug_show_current_screen_tag
    info:
      en: |-
        ```hsc
        (<void> ui_debug_show_current_screen_tag <string>)
        ```
        displays the current tag path on a specified channel
  - slug: ui_set_beta
    info:
      en: |-
        ```hsc
        (<void> ui_set_beta <boolean>)
        ```
        set ui beta testing on/off
  - slug: ui_memory_dump
    info:
      en: |-
        ```hsc
        (<void> ui_memory_dump <string>)
        ```
        dump the UI memory tracked allocations to a specified file
  - slug: ui_set_automation_mode
    info:
      en: |-
        ```hsc
        (<void> ui_set_automation_mode <string>)
        ```
        set ui automation mode
  - slug: ui_set_automation_hopper_type
    info:
      en: |-
        ```hsc
        (<void> ui_set_automation_hopper_type <short>)
        ```
        set ui / mp automation hopper
  - slug: ui_set_automation_variant_type_and_map
    info:
      en: |-
        ```hsc
        (<void> ui_set_automation_variant_type_and_map <short> <long>)
        ```
        set ui / mp automation variant and mp map
  - slug: ui_set_automation_desired_local_user_count
    info:
      en: |-
        ```hsc
        (<void> ui_set_automation_desired_local_user_count <short>)
        ```
        set ui / mp automation desired local user count
  - slug: ui_set_automation_desired_desired_network_game_player_count
    info:
      en: |-
        ```hsc
        (<void> ui_set_automation_desired_desired_network_game_player_count <short>)
        ```
        set ui / mp automation desired network game player count
  - slug: ui_set_automation_desired_network_game_length_seconds
    info:
      en: |-
        ```hsc
        (<void> ui_set_automation_desired_network_game_length_seconds <long>)
        ```
        set ui / mp automation desired game time length
  - slug: ui_set_automation_desired_network_session_name
    info:
      en: |-
        ```hsc
        (<void> ui_set_automation_desired_network_session_name <string>)
        ```
        set ui / mp automation desired session name
  - slug: ui_set_automation_desired_controller_team
    info:
      en: |-
        ```hsc
        (<void> ui_set_automation_desired_controller_team <short> <short>)
        ```
        set desired mp team for a controller
  - slug: ui_set_automation_desired_controller_player_profile
    info:
      en: |-
        ```hsc
        (<void> ui_set_automation_desired_controller_player_profile <short> <string> <string>)
        ```
        set desired player profile and gamertag for a controller
  - slug: objectives_clear
    info:
      en: |-
        ```hsc
        (<void> objectives_clear)
        ```
        clears the mission objectives.
  - slug: objectives_show_up_to
    info:
      en: |-
        ```hsc
        (<void> objectives_show_up_to <long>)
        ```
        show objectives 0..n
  - slug: objectives_finish_up_to
    info:
      en: |-
        ```hsc
        (<void> objectives_finish_up_to <long>)
        ```
        mark objectives 0..n as complete
  - slug: input_suppress_vibration
    info:
      en: |-
        ```hsc
        (<void> input_suppress_vibration <boolean>)
        ```
        disable the friggin' vibration
  - slug: update_remote_camera
    info:
      en: |-
        ```hsc
        (<void> update_remote_camera)
        ```
        force synchronization of remote machine camera
  - slug: net_status_filter
    info:
      en: |-
        ```hsc
        (<void> net_status_filter <string>)
        ```
        filters the set of network status to display
  - slug: net_sim_reset
    info:
      en: |-
        ```hsc
        (<void> net_sim_reset)
        ```
        network simulation: resets the simulation state
  - slug: net_sim_spike_now
    info:
      en: |-
        ```hsc
        (<void> net_sim_spike_now)
        ```
        network simulation: starts a latency spike immediately
  - slug: net_sim_dropspike_now
    info:
      en: |-
        ```hsc
        (<void> net_sim_dropspike_now)
        ```
        network simulation: starts a packet loss spike immediately
  - slug: net_test_ping
    info:
      en: |-
        ```hsc
        (<void> net_test_ping)
        ```
        network test: sends a ping
  - slug: net_test_channel_loopback
    info:
      en: |-
        ```hsc
        (<void> net_test_channel_loopback)
        ```
        network test: creates loopback channels
  - slug: net_test_channel_delete
    info:
      en: |-
        ```hsc
        (<void> net_test_channel_delete)
        ```
        network test: deletes all channels
  - slug: net_test_leave_squad
    info:
      en: |-
        ```hsc
        (<void> net_test_leave_squad)
        ```
        network test: leave current squad
  - slug: net_test_delegate_host
    info:
      en: |-
        ```hsc
        (<void> net_test_delegate_host <long>)
        ```
        network test: delegate hosting to the specified player
  - slug: net_test_delegate_leader
    info:
      en: |-
        ```hsc
        (<void> net_test_delegate_leader <long>)
        ```
        network test: delegate leadership to the specified player
  - slug: net_test_map_name
    info:
      en: |-
        ```hsc
        (<void> net_test_map_name <string>)
        ```
        network test: sets the name of the scenario to play
  - slug: net_test_campaign_difficulty
    info:
      en: |-
        ```hsc
        (<void> net_test_campaign_difficulty <short>)
        ```
        network test: sets the difficulty of the campaign game to play
  - slug: net_test_player_color
    info:
      en: |-
        ```hsc
        (<void> net_test_player_color <long>)
        ```
        network test: temporarily sets the color for all local players
  - slug: net_test_reset_objects
    info:
      en: |-
        ```hsc
        (<void> net_test_reset_objects)
        ```
        network test: resets all objects on the map
  - slug: net_test_fatal_error
    info:
      en: |-
        ```hsc
        (<void> net_test_fatal_error)
        ```
        creates a fatal simulation error
  - slug: net_test_matchmaking_hopper_list
    info:
      en: |-
        ```hsc
        (<void> net_test_matchmaking_hopper_list)
        ```
        network test: lists all available hoppers
  - slug: net_test_matchmaking_hopper_print
    info:
      en: |-
        ```hsc
        (<void> net_test_matchmaking_hopper_print <long>)
        ```
        network test: prints out the maps, games and frequencies for a hopper
  - slug: net_test_matchmaking_hopper_set_game
    info:
      en: |-
        ```hsc
        (<void> net_test_matchmaking_hopper_set_game <long> <long>)
        ```
        network test: retrieves a specific game within a hopper and sets it into an arranged game
  - slug: net_set_machine_name
    info:
      en: |-
        ```hsc
        (<void> net_set_machine_name <string>)
        ```
        sets the nickname of your xbox
  - slug: net_event_display_category
    info:
      en: |-
        ```hsc
        (<void> net_event_display_category <string> <network_event>)
        ```
        sets the display level for a named category of network events
  - slug: net_event_log_category
    info:
      en: |-
        ```hsc
        (<void> net_event_log_category <string> <network_event>)
        ```
        sets the log level for a named category of network events
  - slug: net_event_list_categories
    info:
      en: |-
        ```hsc
        (<void> net_event_list_categories <string>)
        ```
        lists all categories that exist under a particular category string
  - slug: online_task_list
    info:
      en: |-
        ```hsc
        (<void> online_task_list)
        ```
        lists all active online tasks
  - slug: play_bink_movie
    info:
      en: |-
        ```hsc
        (<void> play_bink_movie <string>)
        ```
        um...
  - slug: play_credits
    info:
      en: |-
        ```hsc
        (<void> play_credits)
        ```
        ur...
  - slug: bink_done
    info:
      en: |-
        ```hsc
        (<boolean> bink_done)
        ```
        returns true if the movie is done playing
  - slug: set_global_doppler_factor
    info:
      en: |-
        ```hsc
        (<void> set_global_doppler_factor <real>)
        ```
        new doppler factor: <real>
  - slug: set_global_mixbin_headroom
    info:
      en: |-
        ```hsc
        (<void> set_global_mixbin_headroom <long> <long>)
        ```
        blah
  - slug: debug_sound_environment_source_parameter
    info:
      en: |-
        ```hsc
        (<void> debug_sound_environment_source_parameter <long> <real>)
        ```
        blah
  - slug: data_mine_set_mission_segment
    info:
      en: |-
        ```hsc
        (<void> data_mine_set_mission_segment <string>)
        ```
        sets the mission segment for single player data mine events
  - slug: data_mine_display_mission_segment
    info:
      en: |-
        ```hsc
        (<void> data_mine_display_mission_segment <boolean>)
        ```
        display the current mission segment
  - slug: data_mine_insert
    info:
      en: |-
        ```hsc
        (<void> data_mine_insert <string>)
        ```
        insert text and camera position in the data mine
  - slug: data_mine_upload
    info:
      en: |-
        ```hsc
        (<void> data_mine_upload)
        ```
        upload all data mining data files to debug server
  - slug: data_mine_playback
    info:
      en: |-
        ```hsc
        (<void> data_mine_playback <string>)
        ```
        loads and displays data mine data from a file
  - slug: data_mine_playback_last
    info:
      en: |-
        ```hsc
        (<void> data_mine_playback_last)
        ```
        loads and displays last data mine data
  - slug: data_mine_playback_exit
    info:
      en: |-
        ```hsc
        (<void> data_mine_playback_exit)
        ```
        exit data visualization
  - slug: data_mine_enable
    info:
      en: |-
        ```hsc
        (<void> data_mine_enable <boolean>)
        ```
        enable/disable data mining
  - slug: data_mine_track_event
    info:
      en: |-
        ```hsc
        (<void> data_mine_track_event <string>)
        ```
        enable mining of an event
  - slug: data_mine_display_event
    info:
      en: |-
        ```hsc
        (<void> data_mine_display_event <string>)
        ```
        enable displaying of an event
  - slug: data_mine_show_all_events
    info:
      en: |-
        ```hsc
        (<void> data_mine_show_all_events)
        ```
        show all data mine events
  - slug: data_mine_show_tracked_events
    info:
      en: |-
        ```hsc
        (<void> data_mine_show_tracked_events)
        ```
        show what events are being tracked by the data mine
  - slug: data_mine_show_displayed_events
    info:
      en: |-
        ```hsc
        (<void> data_mine_show_displayed_events)
        ```
        show what events are being displayed by the data mine
  - slug: data_mine_display_session_data
    info:
      en: |-
        ```hsc
        (<void> data_mine_display_session_data)
        ```
        show data mine session, game, and network ids
  - slug: data_mine_display_disk_writes
    info:
      en: |-
        ```hsc
        (<void> data_mine_display_disk_writes <boolean>)
        ```
        enable/disable console message on disk writes
  - slug: data_mine_debug_menu_setting
    info:
      en: |-
        ```hsc
        (<void> data_mine_debug_menu_setting <string>)
        ```
        close debug menu and set user experience setting to string
  - slug: data_mine_open_debug_menu
    info:
      en: |-
        ```hsc
        (<void> data_mine_open_debug_menu)
        ```
        open debug menu
  - slug: error_enable
    info:
      en: |-
        ```hsc
        (<void> error_enable <string> <boolean>)
        ```
        enables/disables display for a class of errors
  - slug: render_layer_enable
    info:
      en: |-
        ```hsc
        (<void> render_layer_enable <string> <boolean>)
        ```
        enable/disables a render_layer
  - slug: render_layer_enable_all
    info:
      en: |-
        ```hsc
        (<void> render_layer_enable_all <boolean>)
        ```
        enable/disables all render_layers
  - slug: test_xcr_monkey_enable
    info:
      en: |-
        ```hsc
        (<void> test_xcr_monkey_enable <boolean>)
        ```
        enable/disable controller monkeys for all in game players
  - slug: test_web_map_snapshot
    info:
      en: |-
        ```hsc
        (<void> test_web_map_snapshot <string>)
        ```
        takes two special screenshots and saves them, along with the camera information, as <name>.tif, <name>_secondary.tif and <name>_camera.txt
  - slug: test_telnet_status_enable
    info:
      en: |-
        ```hsc
        (<void> test_telnet_status_enable <boolean>)
        ```
        enable/disable status events being sent to the telnet console
  - slug: test_telnet_status_interval
    info:
      en: |-
        ```hsc
        (<void> test_telnet_status_interval <long>)
        ```
        sets the interval that status events are sent to the telnet console.
  - slug: webstats_disable
    info:
      en: |-
        ```hsc
        (<void> webstats_disable <boolean>)
        ```
        disables webstats
  - slug: webstats_test_submit
    info:
      en: |-
        ```hsc
        (<void> webstats_test_submit <string>)
        ```
        submits a string to webstats upload
  - slug: netdebug_prefer_internet
    info:
      en: |-
        ```hsc
        (<void> netdebug_prefer_internet <boolean>)
        ```
        hints to the netdebug code that that we're on the internet
  - slug: script_temporary_disable_lightmap_shadows
    info:
      en: |-
        ```hsc
        (<void> script_temporary_disable_lightmap_shadows <boolean>)
        ```
        disable lightmap shadows
  - slug: flag_new
    info:
      en: |-
        ```hsc
        (<void> flag_new <string> <string>)
        ```
        <name> <description>
  - slug: flag_new_at_look
    info:
      en: |-
        ```hsc
        (<void> flag_new_at_look <string> <string>)
        ```
        <name> <description>
  - slug: flags_clear
    info:
      en: |-
        ```hsc
        (<void> flags_clear)
        ```
        erases all comment flags when not in editor (sapien)
  - slug: flags_save
    info:
      en: |-
        ```hsc
        (<void> flags_save)
        ```
        dump comment flags to vrml file
  - slug: flags_save_filtered
    info:
      en: |-
        ```hsc
        (<void> flags_save_filtered <string>)
        ```
        <substring filter>
  - slug: flags_save_named
    info:
      en: |-
        ```hsc
        (<void> flags_save_named <string>)
        ```
        <file name>
  - slug: flags_save_named_filtered
    info:
      en: |-
        ```hsc
        (<void> flags_save_named_filtered <string> <string>)
        ```
        <filter string> <file name>
  - slug: flags_default_name
    info:
      en: |-
        ```hsc
        (<void> flags_default_name <string>)
        ```
        <default comment flag name>
  - slug: flags_default_comment
    info:
      en: |-
        ```hsc
        (<void> flags_default_comment <string>)
        ```
        <default comment flag description>
  - slug: flags_set_filter
    info:
      en: |-
        ```hsc
        (<void> flags_set_filter <string>)
        ```
        <flag name filter>
  - slug: flags_export
    info:
      en: |-
        ```hsc
        (<void> flags_export)
        ```
        dump comment flags to a .txt file
  - slug: flags_export_filtered
    info:
      en: |-
        ```hsc
        (<void> flags_export_filtered <string>)
        ```
        <substring filter>
  - slug: flags_export_named
    info:
      en: |-
        ```hsc
        (<void> flags_export_named <string>)
        ```
        <file name>
  - slug: flags_export_named_filtered
    info:
      en: |-
        ```hsc
        (<void> flags_export_named_filtered <string> <string>)
        ```
        <filter string> <file name>
  - slug: bug_now
    info:
      en: |-
        ```hsc
        (<void> bug_now <string>)
        ```
        uploads files for bug <name>
  - slug: bug_now_lite
    info:
      en: |-
        ```hsc
        (<void> bug_now_lite <string>)
        ```
        uploads files (w/ no minidump) for bug <name>
  - slug: bug_now_auto
    info:
      en: |-
        ```hsc
        (<void> bug_now_auto <boolean>)
        ```
        uploads bug files, auto named <include_minidump>
  - slug: object_list_children
    info:
      en: |-
        ```hsc
        (<object_list> object_list_children <object> <object_definition>)
        ```
        returns list of child objects by definition.
  - slug: voice_set_outgoing_channel_count
    info:
      en: |-
        ```hsc
        (<void> voice_set_outgoing_channel_count <long> <long>)
        ```
        sets the outgoing channel count <in-game> <out-of-game>
  - slug: voice_set_voice_repeater_peer_index
    info:
      en: |-
        ```hsc
        (<void> voice_set_voice_repeater_peer_index <long>)
        ```
        sets the repeater peer index
  - slug: net_leaderboard_clear
    info:
      en: |-
        ```hsc
        (<void> net_leaderboard_clear <long> <long>)
        ```
        <hopper> <user index> clears the stats for the given hopper and user
  - slug: net_leaderboard_set
    info:
      en: |-
        ```hsc
        (<void> net_leaderboard_set <long> <long> <long> <long>)
        ```
        <hopper index> <user index> <stat index> <value> sets the stat for the given leaderboard and user
  - slug: dump_loaded_tags
    info:
      en: |-
        ```hsc
        (<void> dump_loaded_tags)
        ```
        dump a list of open tags to <map_name>_tags.txt
  - slug: interpolator_start
    info:
      en: |-
        ```hsc
        (<long> interpolator_start <string_id> <real> <real>)
        ```
        <name> <final value> <time>
  - slug: interpolator_start_smooth
    info:
      en: |-
        ```hsc
        (<long> interpolator_start_smooth <string_id> <real> <real>)
        ```
        <name> <final value> <time>
  - slug: interpolator_stop
    info:
      en: |-
        ```hsc
        (<long> interpolator_stop <string_id>)
        ```
        <name>
  - slug: interpolator_restart
    info:
      en: |-
        ```hsc
        (<long> interpolator_restart <string_id>)
        ```
        <name>
  - slug: interpolator_is_active
    info:
      en: |-
        ```hsc
        (<boolean> interpolator_is_active <string_id>)
        ```
        <name>
  - slug: interpolator_is_finished
    info:
      en: |-
        ```hsc
        (<boolean> interpolator_is_finished <string_id>)
        ```
        <name>
  - slug: interpolator_set_current_value
    info:
      en: |-
        ```hsc
        (<long> interpolator_set_current_value <string_id> <real>)
        ```
        <name> <current value>
  - slug: interpolator_get_current_value
    info:
      en: |-
        ```hsc
        (<real> interpolator_get_current_value <string_id> <boolean>)
        ```
        <name> <use function ON/OFF>
  - slug: interpolator_get_start_value
    info:
      en: |-
        ```hsc
        (<real> interpolator_get_start_value <string_id> <boolean>)
        ```
        <name> <use function ON/OFF>
  - slug: interpolator_get_final_value
    info:
      en: |-
        ```hsc
        (<real> interpolator_get_final_value <string_id> <boolean>)
        ```
        <name> <use function ON/OFF>
  - slug: interpolator_get_current_phase
    info:
      en: |-
        ```hsc
        (<real> interpolator_get_current_phase <string_id>)
        ```
        <name>
  - slug: interpolator_get_current_time_fraction
    info:
      en: |-
        ```hsc
        (<real> interpolator_get_current_time_fraction <string_id>)
        ```
        <name>
  - slug: interpolator_get_start_time
    info:
      en: |-
        ```hsc
        (<real> interpolator_get_start_time <string_id>)
        ```
        <name>
  - slug: interpolator_get_final_time
    info:
      en: |-
        ```hsc
        (<real> interpolator_get_final_time <string_id>)
        ```
        <name>
  - slug: interpolator_evaluate_at
    info:
      en: |-
        ```hsc
        (<real> interpolator_evaluate_at <string_id> <real> <boolean>)
        ```
        <name> <value in> <use function ON/OFF>
  - slug: interpolator_evaluate_at_time_fraction
    info:
      en: |-
        ```hsc
        (<real> interpolator_evaluate_at_time_fraction <string_id> <real> <boolean>)
        ```
        <name> <time fraction in> <use function ON/OFF>
  - slug: interpolator_evaluate_at_time
    info:
      en: |-
        ```hsc
        (<real> interpolator_evaluate_at_time <string_id> <real> <boolean>)
        ```
        <name> <time in> <use function ON/OFF>
  - slug: interpolator_evaluate_at_time_delta
    info:
      en: |-
        ```hsc
        (<real> interpolator_evaluate_at_time_delta <string_id> <real> <boolean>)
        ```
        <name> <time delta> <use function ON/OFF>
  - slug: interpolator_stop_all
    info:
      en: |-
        ```hsc
        (<void> interpolator_stop_all)
        ```
  - slug: interpolator_restart_all
    info:
      en: |-
        ```hsc
        (<void> interpolator_restart_all)
        ```
  - slug: interpolator_flip
    info:
      en: |-
        ```hsc
        (<void> interpolator_flip)
        ```
  - slug: set_pc_runtime_language
    info:
      en: |-
        ```hsc
        (<void> set_pc_runtime_language <string>)
        ```
        sets the pc language from a string
  - slug: weather_start
    info:
      en: |-
        ```hsc
        (<void> weather_start <real>)
        ```
        <time>
  - slug: weather_stop
    info:
      en: |-
        ```hsc
        (<void> weather_stop <real>)
        ```
        <time>
  - slug: weather_change_intensity
    info:
      en: |-
        ```hsc
        (<void> weather_change_intensity <real> <real>)
        ```
        <time> <intensity>
  - slug: animation_cache_stats_reset
    info:
      en: |-
        ```hsc
        (<void> animation_cache_stats_reset)
        ```
  - slug: cinematic_clone_players_weapon
    info:
      en: |-
        ```hsc
        (<void> cinematic_clone_players_weapon <object> <string_id> <string_id>)
        ```
        clone the first player's most reasonable weapon and attach it to the specified object's marker
  - slug: cinematic_move_attached_objects
    info:
      en: |-
        ```hsc
        (<void> cinematic_move_attached_objects <object> <string_id> <string_id> <string_id>)
        ```
        move the object's children attached to the first marker to the second marker
  - slug: vehicle_enable_ghost_effects
    info:
      en: |-
        ```hsc
        (<void> vehicle_enable_ghost_effects <boolean>)
        ```
  - slug: ice_cream_flavor_stock
    info:
      en: |-
        ```hsc
        (<void> ice_cream_flavor_stock <long>)
        ```
  - slug: ice_cream_flavor_available
    info:
      en: |-
        ```hsc
        (<boolean> ice_cream_flavor_available <long>)
        ```
  - slug: set_global_sound_environment
    info:
      en: |-
        ```hsc
        (<void> set_global_sound_environment <real> <real> <real> <real> <long> <real>)
        ```
        this is your brain on drugs
  - slug: game_save_cinematic_skip
    info:
      en: |-
        ```hsc
        (<void> game_save_cinematic_skip)
        ```
        don't use this, except in one place.
  - slug: cinematic_outro_start
    info:
      en: |-
        ```hsc
        (<void> cinematic_outro_start)
        ```
        flag this cutscene as an outro cutscene
  - slug: cinematic_enable_ambience_details
    info:
      en: |-
        ```hsc
        (<void> cinematic_enable_ambience_details <boolean>)
        ```
        enable/disable ambience details in cinematics
  - slug: set_rasterizer_gamma
    info:
      en: |-
        ```hsc
        (<void> set_rasterizer_gamma <real>)
        ```
        power
  - slug: predict_model_section
    info:
      en: |-
        ```hsc
        (<void> predict_model_section <render model> <long>)
        ```
        predict a geometry block.
  - slug: predict_structure_section
    info:
      en: |-
        ```hsc
        (<void> predict_structure_section <structure_bsp> <long> <boolean>)
        ```
        predict a geometry block.
  - slug: predict_lightmap_bucket
    info:
      en: |-
        ```hsc
        (<void> predict_lightmap_bucket <structure_bsp> <long>)
        ```
        predict a geometry block.
  - slug: predict_bitmap
    info:
      en: |-
        ```hsc
        (<void> predict_bitmap <bitmap> <long>)
        ```
        predict a bitmap.
  - slug: rasterizer_bloom_override
    info:
      en: |-
        ```hsc
        (<void> rasterizer_bloom_override <boolean>)
        ```
        enable
  - slug: rasterizer_bloom_override_reset
    info:
      en: |-
        ```hsc
        (<void> rasterizer_bloom_override_reset <boolean>)
        ```
        reset
  - slug: rasterizer_bloom_override_blur_amount
    info:
      en: |-
        ```hsc
        (<void> rasterizer_bloom_override_blur_amount <real>)
        ```
        blur mount
  - slug: rasterizer_bloom_override_threshold
    info:
      en: |-
        ```hsc
        (<void> rasterizer_bloom_override_threshold <real>)
        ```
        threshold
  - slug: rasterizer_bloom_override_brightness
    info:
      en: |-
        ```hsc
        (<void> rasterizer_bloom_override_brightness <real>)
        ```
        brightness
  - slug: rasterizer_bloom_override_box_factor
    info:
      en: |-
        ```hsc
        (<void> rasterizer_bloom_override_box_factor <real>)
        ```
        box factor
  - slug: rasterizer_bloom_override_max_factor
    info:
      en: |-
        ```hsc
        (<void> rasterizer_bloom_override_max_factor <real>)
        ```
        max factor
  - slug: rasterizer_bloom_override_silver_bullet
    info:
      en: |-
        ```hsc
        (<void> rasterizer_bloom_override_silver_bullet <boolean>)
        ```
        silver bullet
  - slug: rasterizer_bloom_override_only
    info:
      en: |-
        ```hsc
        (<void> rasterizer_bloom_override_only <boolean>)
        ```
        only
  - slug: rasterizer_bloom_override_high_res
    info:
      en: |-
        ```hsc
        (<void> rasterizer_bloom_override_high_res <boolean>)
        ```
        high res
  - slug: rasterizer_bloom_override_brightness_alpha
    info:
      en: |-
        ```hsc
        (<void> rasterizer_bloom_override_brightness_alpha <real>)
        ```
        brightness alpha
  - slug: rasterizer_bloom_override_max_factor_alpha
    info:
      en: |-
        ```hsc
        (<void> rasterizer_bloom_override_max_factor_alpha <real>)
        ```
        max factor alpha
  - slug: cache_block_for_one_frame
    info:
      en: |-
        ```hsc
        (<void> cache_block_for_one_frame)
        ```
        call this to force texture and geometry cache to block until satiated
  - slug: sound_suppress_ambience_update_on_revert
    info:
      en: |-
        ```hsc
        (<void> sound_suppress_ambience_update_on_revert)
        ```
        call this when transitioning between two cinematics so ambience won't fade in between the skips
  - slug: ui_test_error_ok
    info:
      en: |-
        ```hsc
        (<void> ui_test_error_ok <short>)
        ```
        test error code display w/ ok dialog
  - slug: ui_test_error_ok_cancel
    info:
      en: |-
        ```hsc
        (<void> ui_test_error_ok_cancel <short>)
        ```
        test error code display w/ ok-cancel dialog
  - slug: ui_test_confirmation
    info:
      en: |-
        ```hsc
        (<void> ui_test_confirmation <short>)
        ```
        test confirmation dialog display
  - slug: cinematic_lightmap_shadow_disable
    info:
      en: |-
        ```hsc
        (<void> cinematic_lightmap_shadow_disable)
        ```
        turn off lightmap shadow in cinematics
  - slug: cinematic_lightmap_shadow_enable
    info:
      en: |-
        ```hsc
        (<void> cinematic_lightmap_shadow_enable)
        ```
        turn on lightmap shadow in cinematics
  - slug: predict_animation
    info:
      en: |-
        ```hsc
        (<void> predict_animation <animation_graph> <string_id>)
        ```
        begin loading an animation for the graph provided
  - slug: online_message_send
    info:
      en: |-
        ```hsc
        (<void> online_message_send <long> <long> <string>)
        ```
        send a message from <controller_from> to <controller_to>
  - slug: test_web_event_local_cheater
    info:
      en: |-
        ```hsc
        (<void> test_web_event_local_cheater)
        ```
        claims that the local box is a cheater
  - slug: test_web_event_remote_cheater
    info:
      en: |-
        ```hsc
        (<void> test_web_event_remote_cheater <string>)
        ```
        <gamertag> claims that a remote player is a cheater
  - slug: test_cheating_detect
    info:
      en: |-
        ```hsc
        (<void> test_cheating_detect)
        ```
        tells our servers that the local box is cheating
  - slug: test_network_storage_simulate
    info:
      en: |-
        ```hsc
        (<void> test_network_storage_simulate <string> <string>)
        ```
        <hopper/ban/motd/network> <none/download/fail>
  - slug: scenario_dump_scenario_signature_enable
    info:
      en: |-
        ```hsc
        (<void> scenario_dump_scenario_signature_enable)
        ```
        enable signature dumps
  - slug: scenario_force_signature_failure_enable
    info:
      en: |-
        ```hsc
        (<void> scenario_force_signature_failure_enable)
        ```
        enable forcing signature failure
  - slug: scenario_force_name_failure_enable
    info:
      en: |-
        ```hsc
        (<void> scenario_force_name_failure_enable)
        ```
        enable forcing name failure
  - slug: scenario_ignore_failures_enable
    info:
      en: |-
        ```hsc
        (<void> scenario_ignore_failures_enable)
        ```
        enable ignoring failure
  - slug: scenario_dump_scenario_signature_disable
    info:
      en: |-
        ```hsc
        (<void> scenario_dump_scenario_signature_disable)
        ```
        disable signature dumps
  - slug: scenario_force_signature_failure_disable
    info:
      en: |-
        ```hsc
        (<void> scenario_force_signature_failure_disable)
        ```
        disable forcing signature failure
  - slug: scenario_force_name_failure_disable
    info:
      en: |-
        ```hsc
        (<void> scenario_force_name_failure_disable)
        ```
        disable forcing name failure
  - slug: scenario_ignore_failures_disable
    info:
      en: |-
        ```hsc
        (<void> scenario_ignore_failures_disable)
        ```
        disable ignoring failures
  - slug: hopper_verify_force_failures_enable
    info:
      en: |-
        ```hsc
        (<void> hopper_verify_force_failures_enable)
        ```
        enable forcing hopper failure
  - slug: hopper_verify_ignore_failures_enable
    info:
      en: |-
        ```hsc
        (<void> hopper_verify_ignore_failures_enable)
        ```
        enable ignoring hopper failure
  - slug: hopper_verify_force_failures_disable
    info:
      en: |-
        ```hsc
        (<void> hopper_verify_force_failures_disable)
        ```
        disable forcing hopper failure
  - slug: hopper_verify_ignore_failures_disable
    info:
      en: |-
        ```hsc
        (<void> hopper_verify_ignore_failures_disable)
        ```
        disable ignoring hopper failure
  - slug: loading_screen_fade_to_white
    info:
      en: |-
        ```hsc
        (<void> loading_screen_fade_to_white)
        ```
        sets the next loading screen to just fade to white
  - slug: rasterizer_debug_frame_usage
    info:
      en: |-
        ```hsc
        (<void> rasterizer_debug_frame_usage <boolean>)
        ```
        spew texture usage data per frame
  - slug: rasterizer_debug_crap_pixel_shader
    info:
      en: |-
        ```hsc
        (<void> rasterizer_debug_crap_pixel_shader <boolean>)
        ```
        spew texture usage data per frame
  - slug: enable_render_light_suppressor
    info:
      en: |-
        ```hsc
        (<void> enable_render_light_suppressor)
        ```
        enables the code that constrains the max # active lights
  - slug: disable_render_light_suppressor
    info:
      en: |-
        ```hsc
        (<void> disable_render_light_suppressor)
        ```
        disables the code that constrains the max # active lights
  - slug: cinematic_start_movie
    info:
      en: |-
        ```hsc
        (<void> cinematic_start_movie <string>)
        ```
        starts cinematic movie
  - slug: set_decal_override
    info:
      en: |-
        ```hsc
        (<void> set_decal_override <string>)
        ```
        override decal creation with specified tag
  - slug: set_pjl_effect
    info:
      en: |-
        ```hsc
        (<void> set_pjl_effect <effect>)
        ```
        override projectile effect creation with specified tag
  - slug: drop_variant
    info:
      en: |-
        ```hsc
        (<void> drop_variant <string> <string>)
        ```
        drops the named tag e.g. objects\vehicles\banshee\banshee.vehicle
  - slug: determinism_debug_manager_enable_logging
    info:
      en: |-
        ```hsc
        (<void> determinism_debug_manager_enable_logging <boolean>)
        ```
        enable/disable determinism logging
  - slug: determinism_debug_manager_set_trace_flags
    info:
      en: |-
        ```hsc
        (<void> determinism_debug_manager_set_trace_flags <long>)
        ```
        set which determinism debugging traces should be turned on
  - slug: determinism_debug_manager_enable_game_state_checksum
    info:
      en: |-
        ```hsc
        (<void> determinism_debug_manager_enable_game_state_checksum <boolean>)
        ```
        enable/disable determinism checkpoints
  - slug: determinism_debug_manager_enable_trace
    info:
      en: |-
        ```hsc
        (<void> determinism_debug_manager_enable_trace <boolean>)
        ```
        enable determinism tracing
  - slug: determinism_debug_manager_set_consumer_sample_level
    info:
      en: |-
        ```hsc
        (<void> determinism_debug_manager_set_consumer_sample_level <string> <long>)
        ```
        sets sample level for a consumer
  - slug: determinism_log_compare_log_files
    info:
      en: |-
        ```hsc
        (<void> determinism_log_compare_log_files <string> <string>)
        ```
        comares determinism log files
  - slug: determinism_debug_manager_enable_log_file_comparision_on_oos
    info:
      en: |-
        ```hsc
        (<void> determinism_debug_manager_enable_log_file_comparision_on_oos <boolean>)
        ```
        enables/disables determinism log file comparision on oos
        net_safe_raw: No
  - slug: h2a2_effect_new
    info:
      en: |-
        ```hsc
        (<void> h2a2_effect_new <effect> <long> <string_id>)
        ```
        starts the specified effect on the specified object at the specified marker.
  - slug: debug_sound_channels_by_substring
    info:
      en: |-
        ```hsc
        (<void> debug_sound_channels_by_substring <string>)
        ```
        filter display sound channels by substring
  - slug: rally_point_save_name
    info:
      en: |-
        ```hsc
        (<void> rally_point_save_name <string>)
        ```
        saves game state as rally point to core\<path>
  - slug: flush_ddm
    info:
      en: |-
        ```hsc
        (<void> flush_ddm)
        ```
        flush ddm file
  - slug: game_tick_get
    info:
      en: |-
        ```hsc
        (<long> game_tick_get)
        ```
        returns current game tick
        net_safe_raw: only if game_time_get is
  - slug: game_tick_rate
    info:
      en: |-
        ```hsc
        (<long> game_tick_rate)
        ```
        returns current game ticks per second rate
        net_safe_raw: only if game_time_get is
  - slug: game_tick_rate_scalar
    info:
      en: |-
        ```hsc
        (<long> game_tick_rate_scalar)
        ```
        returns current game ticks per second rate relative to k_authored_tick_rate (30Hz)
        net_safe_raw: only if game_time_get is
  - slug: game_tick_length
    info:
      en: |-
        ```hsc
        (<real> game_tick_length)
        ```
        returns how many seconds are in a current game tick
        net_safe_raw: only if game_time_get is
  - slug: TestPrintBool
    info:
      en: |-
        ```hsc
        (<void> TestPrintBool <string> <boolean>)
        ```
        Prints the specified boolean with the format '<string> = '<boolean>' to the Shell.
  - slug: TestPrintReal
    info:
      en: |-
        ```hsc
        (<void> TestPrintReal <string> <real>)
        ```
        Prints the specified real with the format '<string> = '<real>' to the Shell.
  - slug: debug_camera_load_text
    info:
      en: |-
        ```hsc
        (<void> debug_camera_load_text <string>)
        ```
        loads the camera position and facing from a passed in string
